{
    "sourceFile": "screens/EditMealScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1748647710549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749522062581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,20 +9,33 @@\n   Alert,\n } from 'react-native';\n import { useState } from 'react';\n import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList, Meal } from '../types';\n+import type { RootStackParamList } from '../types';\n import { ref, update } from 'firebase/database';\n import { db } from '../firebase';\n \n type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n   const { params } = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = params.meal;\n+  const navigation = useNavigation<NavigationProp>();\n+  const meal = params?.meal;\n \n+  if (!meal) {\n+    return (\n+      <View style={styles.container}>\n+        <Text style={styles.title}>⚠ Invalid Meal Data</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n+          <Text style={styles.buttonText}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+\n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n   const [time, setTime] = useState(meal.time);\n   const [budget, setBudget] = useState(meal.budget);\n@@ -40,16 +53,16 @@\n \n       await update(ref(db, `meals/${meal.id}`), updates);\n \n       if (Platform.OS === 'android') {\n-        ToastAndroid.show('Meal updated!', ToastAndroid.SHORT);\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n       } else {\n         Alert.alert('Success', 'Meal updated!');\n       }\n \n       navigation.goBack();\n     } catch (err) {\n-      console.error('Update failed:', err);\n+      console.error('❌ Update failed:', err);\n       Alert.alert('Error', 'Failed to update meal.');\n     }\n   };\n \n"
                },
                {
                    "date": 1749522531706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,23 +19,20 @@\n type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n-  const { params } = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation<NavigationProp>();\n-  const meal = params?.meal;\n+  const route = useRoute<EditMealRouteProp>();\n+  const meal = route.params?.meal;\n \n-  if (!meal) {\n-    return (\n-      <View style={styles.container}>\n-        <Text style={styles.title}>⚠ Invalid Meal Data</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n-          <Text style={styles.buttonText}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n+if (!meal) {\n+  return (\n+    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+      <Text style={{ color: 'red' }}>⚠ No meal data provided.</Text>\n+    </View>\n+  );\n+}\n \n+\n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n   const [time, setTime] = useState(meal.time);\n   const [budget, setBudget] = useState(meal.budget);\n"
                },
                {
                    "date": 1749523172996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,18 +19,22 @@\n type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const meal = route.params?.meal;\n+  const { params } = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+  const meal = params?.meal;\n \n-if (!meal) {\n-  return (\n-    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-      <Text style={{ color: 'red' }}>⚠ No meal data provided.</Text>\n-    </View>\n-  );\n-}\n+  if (!meal) {\n+    return (\n+      <View style={styles.container}>\n+        <Text style={styles.title}>⚠️ Missing meal data</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n+          <Text style={styles.buttonText}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n \n \n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n"
                },
                {
                    "date": 1749523179533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ToastAndroid,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n+export default function EditMealScreen() {\n+  const { params } = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+  const meal = params?.meal;\n+\n+  if (!meal) {\n+    return (\n+      <View style={styles.container}>\n+        <Text style={styles.title}>⚠️ Missing meal data</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n+          <Text style={styles.buttonText}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+\n+\n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+\n+      if (Platform.OS === 'android') {\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n+      } else {\n+        Alert.alert('Success', 'Meal updated!');\n+      }\n+\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('❌ Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>✏ Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749524957060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,134 +127,4 @@\n     marginTop: 12,\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ToastAndroid,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList } from '../types';\n-import { ref, update } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function EditMealScreen() {\n-  const { params } = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = params?.meal;\n-\n-  if (!meal) {\n-    return (\n-      <View style={styles.container}>\n-        <Text style={styles.title}>⚠️ Missing meal data</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n-          <Text style={styles.buttonText}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-\n-\n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n-\n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n-\n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n-      if (Platform.OS === 'android') {\n-        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n-      } else {\n-        Alert.alert('Success', 'Meal updated!');\n-      }\n-\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('❌ Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>✏ Edit Meal</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n-\n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-    marginTop: 12,\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n"
                },
                {
                    "date": 1749525104214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,11 @@\n type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n-  const { params } = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = params?.meal;\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation<NavigationProp>();\n+  const meal = route?.params?.meal;\n \n   if (!meal) {\n     return (\n       <View style={styles.container}>\n"
                },
                {
                    "date": 1749525523666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { View, Text, TextInput, Pressable, StyleSheet } from 'react-native';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList } from '../types';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+\n+export default function EditMealScreen() {\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+  const meal = route.params?.meal;\n+\n+  if (!meal) {\n+    return (\n+      <View style={styles.container}>\n+        <Text>⚠️ No meal found</Text>\n+        <Pressable onPress={() => navigation.goBack()}>\n+          <Text>Go back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Edit: {meal.title}</Text>\n+      <TextInput style={styles.input} value={meal.location} editable={false} />\n+      <TextInput style={styles.input} value={meal.time} editable={false} />\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20 },\n+  title: { fontSize: 20, fontWeight: 'bold' },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    padding: 10,\n+    marginTop: 10,\n+    borderRadius: 6,\n+  },\n+});\n"
                },
                {
                    "date": 1749525529073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { View, Text, TextInput, Pressable, StyleSheet } from 'react-native';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList } from '../types';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+\n+export default function EditMealScreen() {\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+  const meal = route.params?.meal;\n+\n+  if (!meal) {\n+    return (\n+      <View style={styles.container}>\n+        <Text>⚠️ No meal found</Text>\n+        <Pressable onPress={() => navigation.goBack()}>\n+          <Text>Go back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Edit: {meal.title}</Text>\n+      <TextInput style={styles.input} value={meal.location} editable={false} />\n+      <TextInput style={styles.input} value={meal.time} editable={false} />\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20 },\n+  title: { fontSize: 20, fontWeight: 'bold' },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    padding: 10,\n+    marginTop: 10,\n+    borderRadius: 6,\n+  },\n+});\n"
                },
                {
                    "date": 1749525538381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,177 +40,4 @@\n     marginTop: 10,\n     borderRadius: 6,\n   },\n });\n-import { View, Text, TextInput, Pressable, StyleSheet } from 'react-native';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList } from '../types';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-\n-export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = route.params?.meal;\n-\n-  if (!meal) {\n-    return (\n-      <View style={styles.container}>\n-        <Text>⚠️ No meal found</Text>\n-        <Pressable onPress={() => navigation.goBack()}>\n-          <Text>Go back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>Edit: {meal.title}</Text>\n-      <TextInput style={styles.input} value={meal.location} editable={false} />\n-      <TextInput style={styles.input} value={meal.time} editable={false} />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20 },\n-  title: { fontSize: 20, fontWeight: 'bold' },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    padding: 10,\n-    marginTop: 10,\n-    borderRadius: 6,\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ToastAndroid,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList } from '../types';\n-import { ref, update } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation<NavigationProp>();\n-  const meal = route?.params?.meal;\n-\n-  if (!meal) {\n-    return (\n-      <View style={styles.container}>\n-        <Text style={styles.title}>⚠️ Missing meal data</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n-          <Text style={styles.buttonText}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-\n-\n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n-\n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n-\n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n-      if (Platform.OS === 'android') {\n-        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n-      } else {\n-        Alert.alert('Success', 'Meal updated!');\n-      }\n-\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('❌ Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>✏ Edit Meal</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n-\n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-    marginTop: 12,\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n"
                },
                {
                    "date": 1749525553458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,130 @@\n-import { View, Text, TextInput, Pressable, StyleSheet } from 'react-native';\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ToastAndroid,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RouteProp } from '@react-navigation/native';\n import type { RootStackParamList } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n \n type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = route.params?.meal;\n+  const navigation = useNavigation<NavigationProp>();\n+  const meal = route?.params?.meal;\n \n   if (!meal) {\n     return (\n       <View style={styles.container}>\n-        <Text>⚠️ No meal found</Text>\n-        <Pressable onPress={() => navigation.goBack()}>\n-          <Text>Go back</Text>\n+        <Text style={styles.title}>⚠️ Missing meal data</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n+          <Text style={styles.buttonText}>Go Back</Text>\n         </Pressable>\n       </View>\n     );\n   }\n \n+\n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+\n+      if (Platform.OS === 'android') {\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n+      } else {\n+        Alert.alert('Success', 'Meal updated!');\n+      }\n+\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('❌ Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.title}>Edit: {meal.title}</Text>\n-      <TextInput style={styles.input} value={meal.location} editable={false} />\n-      <TextInput style={styles.input} value={meal.time} editable={false} />\n+      <Text style={styles.title}>✏ Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20 },\n-  title: { fontSize: 20, fontWeight: 'bold' },\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n   input: {\n     borderWidth: 1,\n     borderColor: '#ccc',\n-    padding: 10,\n-    marginTop: 10,\n-    borderRadius: 6,\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n   },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n });\n"
                },
                {
                    "date": 1749525730394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation<NavigationProp>();\n+  const navigation = useNavigation();\n   const meal = route?.params?.meal;\n-\n+  \n   if (!meal) {\n     return (\n       <View style={styles.container}>\n         <Text style={styles.title}>⚠️ Missing meal data</Text>\n"
                },
                {
                    "date": 1749525778083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n   const navigation = useNavigation();\n   const meal = route?.params?.meal;\n-  \n+\n   if (!meal) {\n     return (\n       <View style={styles.container}>\n         <Text style={styles.title}>⚠️ Missing meal data</Text>\n"
                },
                {
                    "date": 1749526680578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,23 +20,22 @@\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = route?.params?.meal;\n+const navigation = useNavigation();\n+const meal = route?.params?.meal;\n \n-  if (!meal) {\n-    return (\n-      <View style={styles.container}>\n-        <Text style={styles.title}>⚠️ Missing meal data</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={styles.button}>\n-          <Text style={styles.buttonText}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-\n-\n+if (!meal || typeof meal !== 'object') {\n+  console.warn('⚠️ EditMealScreen loaded without valid meal');\n+  return (\n+    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+      <Text>⚠️ No meal passed in.</Text>\n+      <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+        <Text style={{ color: 'blue' }}>Go Back</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n   const [time, setTime] = useState(meal.time);\n   const [budget, setBudget] = useState(meal.budget);\n"
                },
                {
                    "date": 1749527037636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,21 +20,21 @@\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n-const navigation = useNavigation();\n-const meal = route?.params?.meal;\n+  const navigation = useNavigation();\n+  const meal = route?.params?.meal;\n \n-if (!meal || typeof meal !== 'object') {\n-  console.warn('⚠️ EditMealScreen loaded without valid meal');\n-  return (\n-    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-      <Text>⚠️ No meal passed in.</Text>\n-      <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n-        <Text style={{ color: 'blue' }}>Go Back</Text>\n-      </Pressable>\n-    </View>\n-  );\n+  if (!meal || typeof meal !== 'object') {\n+    console.warn('⚠️ EditMealScreen loaded without valid meal');\n+    return (\n+      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+        <Text>⚠️ No meal passed in.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+          <Text style={{ color: 'blue' }}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n }\n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n   const [time, setTime] = useState(meal.time);\n"
                },
                {
                    "date": 1749527546575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ToastAndroid,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n+export default function EditMealScreen() {\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+  const meal = route.params.meal as Meal;\n+\n+  if (!meal || typeof meal !== 'object') {\n+    console.warn('⚠️ EditMealScreen loaded without valid meal');\n+    return (\n+      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+        <Text>⚠️ No meal passed in.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+          <Text style={{ color: 'blue' }}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+  \n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+\n+      if (Platform.OS === 'android') {\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n+      } else {\n+        Alert.alert('Success', 'Meal updated!');\n+      }\n+\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('❌ Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>✏ Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749527686892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ToastAndroid,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n+export default function EditMealScreen() {\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+   const meal = route.params?.meal as Meal | undefined;\n+\n+  if (!meal || typeof meal !== 'object') {\n+    console.warn('⚠️ EditMealScreen loaded without valid meal');\n+    return (\n+      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+        <Text>⚠️ No meal passed in.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+          <Text style={{ color: 'blue' }}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+  \n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+\n+      if (Platform.OS === 'android') {\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n+      } else {\n+        Alert.alert('Success', 'Meal updated!');\n+      }\n+\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('❌ Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>✏ Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749527736672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ToastAndroid,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, Meal } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n+export default function EditMealScreen() {\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation<NavigationProp>();\n+  const meal = route.params?.meal as Meal | undefined;\n+\n+  if (!meal || typeof meal !== 'object') {\n+    console.warn('⚠️ EditMealScreen loaded without valid meal');\n+    return (\n+      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+        <Text>⚠️ No meal passed in.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+          <Text style={{ color: 'blue' }}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+  \n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+\n+      if (Platform.OS === 'android') {\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n+      } else {\n+        Alert.alert('Success', 'Meal updated!');\n+      }\n+\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('❌ Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>✏ Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749527748993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ToastAndroid,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, Meal } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n+export default function EditMealScreen() {\n+  const route = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation<NavigationProp>();\n+  const meal = route.params?.meal as Meal | undefined;\n+\n+  if (!meal || typeof meal !== 'object') {\n+    console.warn('⚠️ EditMealScreen loaded without valid meal');\n+    return (\n+      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+        <Text>⚠️ No meal passed in.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+          <Text style={{ color: 'blue' }}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+  \n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+\n+      if (Platform.OS === 'android') {\n+        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n+      } else {\n+        Alert.alert('Success', 'Meal updated!');\n+      }\n+\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('❌ Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>✏ Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749527806923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n   const navigation = useNavigation<NavigationProp>();\n-  const meal = route.params?.meal as Meal | undefined;\n+  const { meal } = route.params;\n \n   if (!meal || typeof meal !== 'object') {\n     console.warn('⚠️ EditMealScreen loaded without valid meal');\n     return (\n@@ -127,523 +127,4 @@\n     marginTop: 12,\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ToastAndroid,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList, Meal } from '../types';\n-import { ref, update } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation<NavigationProp>();\n-  const meal = route.params?.meal as Meal | undefined;\n-\n-  if (!meal || typeof meal !== 'object') {\n-    console.warn('⚠️ EditMealScreen loaded without valid meal');\n-    return (\n-      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-        <Text>⚠️ No meal passed in.</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n-          <Text style={{ color: 'blue' }}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-  \n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n-\n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n-\n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n-      if (Platform.OS === 'android') {\n-        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n-      } else {\n-        Alert.alert('Success', 'Meal updated!');\n-      }\n-\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('❌ Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>✏ Edit Meal</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n-\n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-    marginTop: 12,\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ToastAndroid,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList } from '../types';\n-import { ref, update } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-   const meal = route.params?.meal as Meal | undefined;\n-\n-  if (!meal || typeof meal !== 'object') {\n-    console.warn('⚠️ EditMealScreen loaded without valid meal');\n-    return (\n-      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-        <Text>⚠️ No meal passed in.</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n-          <Text style={{ color: 'blue' }}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-  \n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n-\n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n-\n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n-      if (Platform.OS === 'android') {\n-        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n-      } else {\n-        Alert.alert('Success', 'Meal updated!');\n-      }\n-\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('❌ Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>✏ Edit Meal</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n-\n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-    marginTop: 12,\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ToastAndroid,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList } from '../types';\n-import { ref, update } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = route.params.meal as Meal;\n-\n-  if (!meal || typeof meal !== 'object') {\n-    console.warn('⚠️ EditMealScreen loaded without valid meal');\n-    return (\n-      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-        <Text>⚠️ No meal passed in.</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n-          <Text style={{ color: 'blue' }}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-  }\n-  \n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n-\n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n-\n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n-      if (Platform.OS === 'android') {\n-        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n-      } else {\n-        Alert.alert('Success', 'Meal updated!');\n-      }\n-\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('❌ Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>✏ Edit Meal</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n-\n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-    marginTop: 12,\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ToastAndroid,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList } from '../types';\n-import { ref, update } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function EditMealScreen() {\n-  const route = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = route?.params?.meal;\n-\n-  if (!meal || typeof meal !== 'object') {\n-    console.warn('⚠️ EditMealScreen loaded without valid meal');\n-    return (\n-      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-        <Text>⚠️ No meal passed in.</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n-          <Text style={{ color: 'blue' }}>Go Back</Text>\n-        </Pressable>\n-      </View>\n-    );\n-}\n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n-\n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n-\n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n-      if (Platform.OS === 'android') {\n-        ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n-      } else {\n-        Alert.alert('Success', 'Meal updated!');\n-      }\n-\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('❌ Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>✏ Edit Meal</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n-\n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-    marginTop: 12,\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n"
                },
                {
                    "date": 1749527830378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,16 @@\n import type { RootStackParamList, Meal } from '../types';\n import { ref, update } from 'firebase/database';\n import { db } from '../firebase';\n \n+// ✅ Types\n type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n   const navigation = useNavigation<NavigationProp>();\n+\n   const { meal } = route.params;\n \n   if (!meal || typeof meal !== 'object') {\n     console.warn('⚠️ EditMealScreen loaded without valid meal');\n@@ -34,27 +36,26 @@\n         </Pressable>\n       </View>\n     );\n   }\n-  \n+\n+  // 👇 UseState\n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n   const [time, setTime] = useState(meal.time);\n   const [budget, setBudget] = useState(meal.budget);\n   const [cuisine, setCuisine] = useState(meal.cuisine);\n \n   const handleUpdate = async () => {\n     try {\n-      const updates = {\n+      await update(ref(db, `meals/${meal.id}`), {\n         title,\n         location,\n         time,\n         budget,\n         cuisine,\n-      };\n+      });\n \n-      await update(ref(db, `meals/${meal.id}`), updates);\n-\n       if (Platform.OS === 'android') {\n         ToastAndroid.show('✅ Meal updated!', ToastAndroid.SHORT);\n       } else {\n         Alert.alert('Success', 'Meal updated!');\n@@ -70,38 +71,13 @@\n   return (\n     <View style={styles.container}>\n       <Text style={styles.title}>✏ Edit Meal</Text>\n \n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} placeholder=\"Title\" />\n+      <TextInput style={styles.input} value={location} onChangeText={setLocation} placeholder=\"Location\" />\n+      <TextInput style={styles.input} value={time} onChangeText={setTime} placeholder=\"Time\" />\n+      <TextInput style={styles.input} value={budget} onChangeText={setBudget} placeholder=\"Budget\" />\n+      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} placeholder=\"Cuisine\" />\n \n       <Pressable onPress={handleUpdate} style={styles.button}>\n         <Text style={styles.buttonText}>Save Changes</Text>\n       </Pressable>\n"
                },
                {
                    "date": 1749528108987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n \n export default function EditMealScreen() {\n   const route = useRoute<EditMealRouteProp>();\n   const navigation = useNavigation<NavigationProp>();\n+  const meal = route.params?.meal;\n \n-  const { meal } = route.params;\n \n   if (!meal || typeof meal !== 'object') {\n     console.warn('⚠️ EditMealScreen loaded without valid meal');\n     return (\n"
                },
                {
                    "date": 1749528285316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,10 @@\n   const route = useRoute<EditMealRouteProp>();\n   const navigation = useNavigation<NavigationProp>();\n   const meal = route.params?.meal;\n \n-\n   if (!meal || typeof meal !== 'object') {\n-    console.warn('⚠️ EditMealScreen loaded without valid meal');\n+    console.warn('⚠️ EditMealScreen loaded without valid meal. route.params =', route.params);\n     return (\n       <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n         <Text>⚠️ No meal passed in.</Text>\n         <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n@@ -37,8 +36,9 @@\n       </View>\n     );\n   }\n \n+\n   // 👇 UseState\n   const [title, setTitle] = useState(meal.title);\n   const [location, setLocation] = useState(meal.location);\n   const [time, setTime] = useState(meal.time);\n"
                },
                {
                    "date": 1749532405252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,12 @@\n \n       <Pressable onPress={handleUpdate} style={styles.button}>\n         <Text style={styles.buttonText}>Save Changes</Text>\n       </Pressable>\n+      <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+        <Text style={styles.backButtonText}>← Go Back</Text>\n+      </Pressable>\n+\n     </View>\n   );\n }\n \n@@ -102,5 +106,18 @@\n     alignItems: 'center',\n     marginTop: 12,\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n+\n+  backButton: {\n+    marginTop: 20,\n+    padding: 10,\n+    alignItems: 'center',\n+    borderRadius: 6,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+},\n });\n"
                }
            ],
            "date": 1748647710549,
            "name": "Commit-0",
            "content": "import {\n  View,\n  Text,\n  TextInput,\n  Pressable,\n  StyleSheet,\n  ToastAndroid,\n  Platform,\n  Alert,\n} from 'react-native';\nimport { useState } from 'react';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport type { RouteProp } from '@react-navigation/native';\nimport type { RootStackParamList, Meal } from '../types';\nimport { ref, update } from 'firebase/database';\nimport { db } from '../firebase';\n\ntype EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n\nexport default function EditMealScreen() {\n  const { params } = useRoute<EditMealRouteProp>();\n  const navigation = useNavigation();\n  const meal = params.meal;\n\n  const [title, setTitle] = useState(meal.title);\n  const [location, setLocation] = useState(meal.location);\n  const [time, setTime] = useState(meal.time);\n  const [budget, setBudget] = useState(meal.budget);\n  const [cuisine, setCuisine] = useState(meal.cuisine);\n\n  const handleUpdate = async () => {\n    try {\n      const updates = {\n        title,\n        location,\n        time,\n        budget,\n        cuisine,\n      };\n\n      await update(ref(db, `meals/${meal.id}`), updates);\n\n      if (Platform.OS === 'android') {\n        ToastAndroid.show('Meal updated!', ToastAndroid.SHORT);\n      } else {\n        Alert.alert('Success', 'Meal updated!');\n      }\n\n      navigation.goBack();\n    } catch (err) {\n      console.error('Update failed:', err);\n      Alert.alert('Error', 'Failed to update meal.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>✏ Edit Meal</Text>\n\n      <TextInput\n        style={styles.input}\n        value={title}\n        onChangeText={setTitle}\n        placeholder=\"Title\"\n      />\n      <TextInput\n        style={styles.input}\n        value={location}\n        onChangeText={setLocation}\n        placeholder=\"Location\"\n      />\n      <TextInput\n        style={styles.input}\n        value={time}\n        onChangeText={setTime}\n        placeholder=\"Time\"\n      />\n      <TextInput\n        style={styles.input}\n        value={budget}\n        onChangeText={setBudget}\n        placeholder=\"Budget\"\n      />\n      <TextInput\n        style={styles.input}\n        value={cuisine}\n        onChangeText={setCuisine}\n        placeholder=\"Cuisine\"\n      />\n\n      <Pressable onPress={handleUpdate} style={styles.button}>\n        <Text style={styles.buttonText}>Save Changes</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 12,\n  },\n  button: {\n    backgroundColor: '#007aff',\n    padding: 14,\n    borderRadius: 8,\n    alignItems: 'center',\n    marginTop: 12,\n  },\n  buttonText: { color: '#fff', fontWeight: '600' },\n});\n"
        }
    ]
}