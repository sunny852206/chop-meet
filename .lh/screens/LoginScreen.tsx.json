{
    "sourceFile": "screens/LoginScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1748561974027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748562982880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n   Alert,\n } from \"react-native\";\n import { useState } from \"react\";\n import { useNavigation } from \"@react-navigation/native\";\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n+import type { RootStackParamList } from \"../navigation/types\";\n import { dummyUsers } from \"../data/dummyUsers\";\n \n export default function LoginScreen() {\n   const [email, setEmail] = useState(\"\");\n"
                },
                {
                    "date": 1748563000152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,12 @@\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n import type { RootStackParamList } from \"../navigation/types\";\n import { dummyUsers } from \"../data/dummyUsers\";\n \n+\n+type LoginNavProp = NativeStackNavigationProp<RootStackParamList, \"Login\">;\n+const navigation = useNavigation<LoginNavProp>();\n+\n export default function LoginScreen() {\n   const [email, setEmail] = useState(\"\");\n   const [password, setPassword] = useState(\"\");\n   const navigation = useNavigation();\n"
                },
                {
                    "date": 1748563045950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n } from \"react-native\";\n import { useState } from \"react\";\n import { useNavigation } from \"@react-navigation/native\";\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n-import type { RootStackParamList } from \"../navigation/types\";\n+import type { RootStackParamList } from \"../types/types\";\n import { dummyUsers } from \"../data/dummyUsers\";\n \n \n type LoginNavProp = NativeStackNavigationProp<RootStackParamList, \"Login\">;\n"
                },
                {
                    "date": 1748563129491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n import { dummyUsers } from \"../data/dummyUsers\";\n \n \n type LoginNavProp = NativeStackNavigationProp<RootStackParamList, \"Login\">;\n-const navigation = useNavigation<LoginNavProp>();\n \n export default function LoginScreen() {\n   const [email, setEmail] = useState(\"\");\n   const [password, setPassword] = useState(\"\");\n-  const navigation = useNavigation();\n+  const navigation = useNavigation<LoginNavProp>();\n \n+\n   const handleLogin = () => {\n     // Check if user credentials match any dummy account\n     const user = dummyUsers.find(\n       (u) => u.email === email && u.password === password\n"
                },
                {
                    "date": 1748642515686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Alert,\n+} from \"react-native\";\n+import { useState } from \"react\";\n+import { useNavigation } from \"@react-navigation/native\";\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n+import type { RootStackParamList } from \"../types/types\";\n+import auth from '@react-native-firebase/auth';\n+\n+type LoginNavProp = NativeStackNavigationProp<RootStackParamList, \"Login\">;\n+\n+export default function LoginScreen() {\n+  const [email, setEmail] = useState(\"\");\n+  const [password, setPassword] = useState(\"\");\n+  const navigation = useNavigation<LoginNavProp>();\n+\n+  const handleLogin = async () => {\n+    try {\n+      await auth().signInWithEmailAndPassword(email, password);\n+      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+    } catch (error) {\n+      Alert.alert(\"Login Failed\", error.message);\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Login</Text>\n+      <TextInput\n+        placeholder=\"Email\"\n+        style={styles.input}\n+        autoCapitalize=\"none\"\n+        value={email}\n+        onChangeText={setEmail}\n+      />\n+      <TextInput\n+        placeholder=\"Password\"\n+        style={styles.input}\n+        secureTextEntry\n+        value={password}\n+        onChangeText={setPassword}\n+      />\n+      <Pressable style={styles.button} onPress={handleLogin}>\n+        <Text style={styles.buttonText}>Login</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, justifyContent: \"center\", padding: 20 },\n+  title: {\n+    fontSize: 24,\n+    fontWeight: \"bold\",\n+    marginBottom: 20,\n+    textAlign: \"center\",\n+  },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: \"#ccc\",\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 16,\n+  },\n+  button: {\n+    backgroundColor: \"#28a745\",\n+    padding: 12,\n+    borderRadius: 8,\n+    alignItems: \"center\",\n+  },\n+  buttonText: { color: \"#fff\", fontWeight: \"600\" },\n+});\n"
                },
                {
                    "date": 1748642557726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,88 +74,4 @@\n     alignItems: \"center\",\n   },\n   buttonText: { color: \"#fff\", fontWeight: \"600\" },\n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Alert,\n-} from \"react-native\";\n-import { useState } from \"react\";\n-import { useNavigation } from \"@react-navigation/native\";\n-import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n-import type { RootStackParamList } from \"../types/types\";\n-import { dummyUsers } from \"../data/dummyUsers\";\n-\n-\n-type LoginNavProp = NativeStackNavigationProp<RootStackParamList, \"Login\">;\n-\n-export default function LoginScreen() {\n-  const [email, setEmail] = useState(\"\");\n-  const [password, setPassword] = useState(\"\");\n-  const navigation = useNavigation<LoginNavProp>();\n-\n-\n-  const handleLogin = () => {\n-    // Check if user credentials match any dummy account\n-    const user = dummyUsers.find(\n-      (u) => u.email === email && u.password === password\n-    );\n-\n-    if (user) {\n-      // Navigate to meal list on success\n-      navigation.navigate(\"MealList\");\n-    } else {\n-      Alert.alert(\"Login Failed\", \"Invalid email or password\");\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>Login</Text>\n-      <TextInput\n-        placeholder=\"Email\"\n-        style={styles.input}\n-        autoCapitalize=\"none\"\n-        value={email}\n-        onChangeText={setEmail}\n-      />\n-      <TextInput\n-        placeholder=\"Password\"\n-        style={styles.input}\n-        secureTextEntry\n-        value={password}\n-        onChangeText={setPassword}\n-      />\n-      <Pressable style={styles.button} onPress={handleLogin}>\n-        <Text style={styles.buttonText}>Login</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, justifyContent: \"center\", padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: \"bold\",\n-    marginBottom: 20,\n-    textAlign: \"center\",\n-  },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 16,\n-  },\n-  button: {\n-    backgroundColor: \"#28a745\",\n-    padding: 12,\n-    borderRadius: 8,\n-    alignItems: \"center\",\n-  },\n-  buttonText: { color: \"#fff\", fontWeight: \"600\" },\n-});\n"
                },
                {
                    "date": 1748643304746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,31 @@\n import { useNavigation } from \"@react-navigation/native\";\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n import type { RootStackParamList } from \"../types/types\";\n import auth from '@react-native-firebase/auth';\n+import messaging from '@react-native-firebase/messaging';\n+import { ref, set } from 'firebase/database';\n+import { db } from '../firebase';\n \n type LoginNavProp = NativeStackNavigationProp<RootStackParamList, \"Login\">;\n \n export default function LoginScreen() {\n   const [email, setEmail] = useState(\"\");\n   const [password, setPassword] = useState(\"\");\n   const navigation = useNavigation<LoginNavProp>();\n \n+  const saveFcmToken = async () => {\n+    const token = await messaging().getToken();\n+    const user = auth().currentUser;\n+    if (user && token) {\n+      await set(ref(db, `users/${user.uid}/fcmToken`), token);\n+    }\n+  };\n+\n   const handleLogin = async () => {\n     try {\n       await auth().signInWithEmailAndPassword(email, password);\n+      await saveFcmToken(); // ✅ 存 FCM token\n       navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n     } catch (error) {\n       Alert.alert(\"Login Failed\", error.message);\n     }\n"
                },
                {
                    "date": 1748646917015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n \n   const handleLogin = async () => {\n     try {\n       await auth().signInWithEmailAndPassword(email, password);\n-      await saveFcmToken(); // ✅ 存 FCM token\n+      await saveFcmToken(); // \n       navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n-    } catch (error) {\n+    } catch (error： any) {\n       Alert.alert(\"Login Failed\", error.message);\n     }\n   };\n \n"
                },
                {
                    "date": 1748647018486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,22 @@\n       await set(ref(db, `users/${user.uid}/fcmToken`), token);\n     }\n   };\n \n+  const [loading, setLoading] = useState(false);\n+\n   const handleLogin = async () => {\n-    try {\n-      await auth().signInWithEmailAndPassword(email, password);\n-      await saveFcmToken(); // \n-      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n-    } catch (error： any) {\n-      Alert.alert(\"Login Failed\", error.message);\n-    }\n-  };\n+  setLoading(true);\n+  try {\n+    await auth().signInWithEmailAndPassword(email, password);\n+    await saveFcmToken();\n+    navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+  } catch (error: any) {\n+    Alert.alert(\"Login Failed\", error.message);\n+  } finally {\n+    setLoading(false);\n+  }\n+};\n \n   return (\n     <View style={styles.container}>\n       <Text style={styles.title}>Login</Text>\n@@ -59,8 +64,9 @@\n       />\n       <Pressable style={styles.button} onPress={handleLogin}>\n         <Text style={styles.buttonText}>Login</Text>\n       </Pressable>\n+      {loading && <Text style={{ textAlign: 'center', marginTop: 10 }}>Logging in...</Text>}\n     </View>\n   );\n }\n \n"
                },
                {
                    "date": 1748650589352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useState } from \"react\";\n import { useNavigation } from \"@react-navigation/native\";\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n import type { RootStackParamList } from \"../types/types\";\n-import auth from '@react-native-firebase/auth';\n+import { auth } from '../firebase';\n import messaging from '@react-native-firebase/messaging';\n import { ref, set } from 'firebase/database';\n import { db } from '../firebase';\n \n@@ -23,9 +23,9 @@\n   const navigation = useNavigation<LoginNavProp>();\n \n   const saveFcmToken = async () => {\n     const token = await messaging().getToken();\n-    const user = auth().currentUser;\n+    const user = auth.currentUser;\n     if (user && token) {\n       await set(ref(db, `users/${user.uid}/fcmToken`), token);\n     }\n   };\n"
                },
                {
                    "date": 1748650639216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import { useNavigation } from \"@react-navigation/native\";\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n import type { RootStackParamList } from \"../types/types\";\n import { auth } from '../firebase';\n+import { signInWithEmailAndPassword } from 'firebase/auth';\n import messaging from '@react-native-firebase/messaging';\n import { ref, set } from 'firebase/database';\n import { db } from '../firebase';\n \n@@ -34,9 +35,9 @@\n \n   const handleLogin = async () => {\n   setLoading(true);\n   try {\n-    await auth().signInWithEmailAndPassword(email, password);\n+    await auth.signInWithEmailAndPassword(email, password);\n     await saveFcmToken();\n     navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n   } catch (error: any) {\n     Alert.alert(\"Login Failed\", error.message);\n"
                },
                {
                    "date": 1748650655006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n   const handleLogin = async () => {\n   setLoading(true);\n   try {\n-    await auth.signInWithEmailAndPassword(email, password);\n+    await signInWithEmailAndPassword(auth, email, password);\n     await saveFcmToken();\n     navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n   } catch (error: any) {\n     Alert.alert(\"Login Failed\", error.message);\n"
                },
                {
                    "date": 1749526556929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n   setLoading(true);\n   try {\n     await signInWithEmailAndPassword(auth, email, password);\n     await saveFcmToken();\n-    navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+    navigation.reset({ index: 0, routes: [{ name: 'MainTabs' }] });\n   } catch (error: any) {\n     Alert.alert(\"Login Failed\", error.message);\n   } finally {\n     setLoading(false);\n"
                }
            ],
            "date": 1748561974027,
            "name": "Commit-0",
            "content": "import {\n  View,\n  Text,\n  TextInput,\n  Pressable,\n  StyleSheet,\n  Alert,\n} from \"react-native\";\nimport { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { dummyUsers } from \"../data/dummyUsers\";\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigation = useNavigation();\n\n  const handleLogin = () => {\n    // Check if user credentials match any dummy account\n    const user = dummyUsers.find(\n      (u) => u.email === email && u.password === password\n    );\n\n    if (user) {\n      // Navigate to meal list on success\n      navigation.navigate(\"MealList\");\n    } else {\n      Alert.alert(\"Login Failed\", \"Invalid email or password\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Login</Text>\n      <TextInput\n        placeholder=\"Email\"\n        style={styles.input}\n        autoCapitalize=\"none\"\n        value={email}\n        onChangeText={setEmail}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        style={styles.input}\n        secureTextEntry\n        value={password}\n        onChangeText={setPassword}\n      />\n      <Pressable style={styles.button} onPress={handleLogin}>\n        <Text style={styles.buttonText}>Login</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", padding: 20 },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 20,\n    textAlign: \"center\",\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: \"#ccc\",\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  button: {\n    backgroundColor: \"#28a745\",\n    padding: 12,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  buttonText: { color: \"#fff\", fontWeight: \"600\" },\n});\n"
        }
    ]
}