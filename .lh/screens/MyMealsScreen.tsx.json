{
    "sourceFile": "screens/MyMealsScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1748648717434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748650689880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n } from 'react-native';\n import { useEffect, useState } from 'react';\n import { ref, onValue, remove, update } from 'firebase/database';\n import { db } from '../firebase';\n-import auth from '@react-native-firebase/auth';\n+import { auth } from '../firebase';\n import { useNavigation } from '@react-navigation/native';\n import type { Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RootStackParamList } from '../types';\n"
                },
                {
                    "date": 1748650697379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     budget: '',\n     cuisine: '',\n   });\n \n-  const user = auth().currentUser;\n+  const user = auth.currentUser;\n   const userId = user?.uid;\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1749522965391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,231 +2,108 @@\n   View,\n   Text,\n   FlatList,\n   Pressable,\n-  TextInput,\n+  StyleSheet,\n+  ActivityIndicator,\n   Alert,\n-  StyleSheet,\n } from 'react-native';\n import { useEffect, useState } from 'react';\n-import { ref, onValue, remove, update } from 'firebase/database';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, get } from 'firebase/database';\n import { db } from '../firebase';\n-import { auth } from '../firebase';\n-import { useNavigation } from '@react-navigation/native';\n-import type { Meal } from '../types';\n+import auth from '@react-native-firebase/auth';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList } from '../types';\n+import type { RootStackParamList, Meal } from '../types';\n \n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n export default function MyMealsScreen() {\n-  const [myMeals, setMyMeals] = useState<Meal[]>([]);\n+  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n-  const [editingMealId, setEditingMealId] = useState<string | null>(null);\n-  const [editFields, setEditFields] = useState({\n-    title: '',\n-    location: '',\n-    time: '',\n-    budget: '',\n-    cuisine: '',\n-  });\n+  const navigation = useNavigation<NavigationProp>();\n+  const userId = auth().currentUser?.uid;\n \n-  const user = auth.currentUser;\n-  const userId = user?.uid;\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-\n   useEffect(() => {\n-    if (!userId) return;\n+    const fetchJoinedMeals = async () => {\n+      if (!userId) return;\n \n-    const mealRef = ref(db, 'meals');\n-    const unsubscribe = onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (!data) return;\n+      try {\n+        const snapshot = await get(ref(db, 'meals'));\n+        const data = snapshot.val();\n \n-      const meals = Object.entries(data)\n-        .map(([id, meal]: [string, any]) => ({ id, ...meal }))\n-        .filter((meal) => meal.creatorId === userId);\n+        if (!data) return;\n \n-      setMyMeals(meals);\n-      setLoading(false);\n-    });\n+        const myMeals = Object.values(data).filter((meal: any) =>\n+          meal.joinedIds?.includes(userId)\n+        );\n \n-    return () => unsubscribe();\n-  }, [userId]);\n+        setJoinedMeals(myMeals);\n+      } catch (err) {\n+        console.error('‚ùå Failed to fetch meals:', err);\n+        Alert.alert('Error', 'Failed to load your meals.');\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n \n-  const handleDelete = (mealId: string) => {\n-    Alert.alert('Delete Meal', 'Are you sure you want to delete this meal?', [\n-      { text: 'Cancel', style: 'cancel' },\n-      {\n-        text: 'Delete',\n-        style: 'destructive',\n-        onPress: async () => {\n-          try {\n-            await remove(ref(db, `meals/${mealId}`));\n-            alert('Meal deleted');\n-          } catch (e) {\n-            console.error('Failed to delete meal:', e);\n-            alert('Failed to delete meal.');\n-          }\n-        },\n-      },\n-    ]);\n-  };\n+    fetchJoinedMeals();\n+  }, []);\n \n-  const handleEdit = (meal: Meal) => {\n-    setEditingMealId(meal.id);\n-    setEditFields({\n-      title: meal.title,\n-      location: meal.location,\n-      time: meal.time,\n-      budget: meal.budget,\n-      cuisine: meal.cuisine,\n-    });\n-  };\n+  if (loading) {\n+    return (\n+      <View style={styles.center}>\n+        <ActivityIndicator size=\"large\" />\n+      </View>\n+    );\n+  }\n \n-  const handleSave = async (mealId: string) => {\n-    try {\n-      await update(ref(db, `meals/${mealId}`), editFields);\n-      setEditingMealId(null);\n-      alert('Meal updated!');\n-    } catch (err) {\n-      console.error('Update failed:', err);\n-      alert('Failed to update meal.');\n-    }\n-  };\n+  if (joinedMeals.length === 0) {\n+    return (\n+      <View style={styles.center}>\n+        <Text>No joined meals found.</Text>\n+      </View>\n+    );\n+  }\n \n-  if (!userId) return null;\n-\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.title}>üç± My Created Meals</Text>\n-      {loading && <Text>Loading...</Text>}\n-      {myMeals.length === 0 && !loading && (\n-        <Text style={styles.empty}>You haven‚Äôt created any meals yet.</Text>\n-      )}\n+      <Text style={styles.title}>üç± My Meals</Text>\n+\n       <FlatList\n-        data={myMeals}\n+        data={joinedMeals}\n         keyExtractor={(item) => item.id}\n         renderItem={({ item }) => (\n-          <View style={styles.card}>\n+          <Pressable\n+            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            style={styles.mealCard}\n+          >\n             <Text style={styles.mealTitle}>{item.title}</Text>\n-            <Text style={styles.meta}>üìç {item.location} ¬∑ {item.time}</Text>\n-\n-            <View style={styles.actions}>\n-              <Pressable onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}>\n-                <Text style={styles.link}>üí¨ Chat</Text>\n-              </Pressable>\n-              <Pressable onPress={() => handleEdit(item)}>\n-                <Text style={styles.edit}>‚úè Edit</Text>\n-              </Pressable>\n-              <Pressable onPress={() => handleDelete(item.id)}>\n-                <Text style={styles.delete}>üóë Delete</Text>\n-              </Pressable>\n-              <Pressable onPress={() => navigation.navigate('EditMeal', { meal: item })}>\n-                <Text style={styles.edit}>‚úè Edit</Text>\n-              </Pressable>\n-            </View>\n-\n-            {editingMealId === item.id && (\n-              <View style={styles.editForm}>\n-                <TextInput\n-                  style={styles.input}\n-                  value={editFields.title}\n-                  onChangeText={(text) =>\n-                    setEditFields((prev) => ({ ...prev, title: text }))\n-                  }\n-                  placeholder=\"Title\"\n-                />\n-                <TextInput\n-                  style={styles.input}\n-                  value={editFields.location}\n-                  onChangeText={(text) =>\n-                    setEditFields((prev) => ({ ...prev, location: text }))\n-                  }\n-                  placeholder=\"Location\"\n-                />\n-                <TextInput\n-                  style={styles.input}\n-                  value={editFields.time}\n-                  onChangeText={(text) =>\n-                    setEditFields((prev) => ({ ...prev, time: text }))\n-                  }\n-                  placeholder=\"Time\"\n-                />\n-                <TextInput\n-                  style={styles.input}\n-                  value={editFields.budget}\n-                  onChangeText={(text) =>\n-                    setEditFields((prev) => ({ ...prev, budget: text }))\n-                  }\n-                  placeholder=\"Budget\"\n-                />\n-                <TextInput\n-                  style={styles.input}\n-                  value={editFields.cuisine}\n-                  onChangeText={(text) =>\n-                    setEditFields((prev) => ({ ...prev, cuisine: text }))\n-                  }\n-                  placeholder=\"Cuisine\"\n-                />\n-\n-                <View style={styles.editButtons}>\n-                  <Pressable onPress={() => handleSave(item.id)} style={styles.saveBtn}>\n-                    <Text style={styles.saveText}>Save</Text>\n-                  </Pressable>\n-                  <Pressable onPress={() => setEditingMealId(null)}>\n-                    <Text style={styles.cancelText}>Cancel</Text>\n-                  </Pressable>\n-                </View>\n-              </View>\n-            )}\n-          </View>\n+            <Text>{item.location} | {item.time}</Text>\n+          </Pressable>\n         )}\n       />\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n+  container: { flex: 1, padding: 20 },\n+  title: {\n+    fontSize: 24,\n+    fontWeight: 'bold',\n+    marginBottom: 16,\n+  },\n+  mealCard: {\n     padding: 14,\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    marginBottom: 12,\n     borderWidth: 1,\n-    borderColor: '#eee',\n-  },\n-  mealTitle: { fontSize: 16, fontWeight: '600' },\n-  meta: { color: '#666', marginTop: 4 },\n-  actions: {\n-    flexDirection: 'row',\n-    justifyContent: 'space-between',\n-    marginTop: 10,\n-  },\n-  link: { color: '#007aff', fontWeight: '600' },\n-  edit: { color: '#ff9500', fontWeight: '600' },\n-  delete: { color: '#ff3b30', fontWeight: '600' },\n-  empty: { textAlign: 'center', marginTop: 30, color: '#888' },\n-\n-  editForm: { marginTop: 12 },\n-  input: {\n-    borderWidth: 1,\n     borderColor: '#ccc',\n-    borderRadius: 6,\n-    padding: 10,\n-    marginBottom: 8,\n-    backgroundColor: '#fff',\n+    borderRadius: 8,\n+    marginBottom: 12,\n   },\n-  editButtons: {\n-    flexDirection: 'row',\n-    justifyContent: 'space-between',\n-    marginTop: 6,\n+  mealTitle: { fontSize: 18, fontWeight: '600' },\n+  center: {\n+    flex: 1,\n+    justifyContent: 'center',\n+    alignItems: 'center',\n   },\n-  saveBtn: {\n-    backgroundColor: '#007aff',\n-    paddingHorizontal: 16,\n-    paddingVertical: 10,\n-    borderRadius: 6,\n-  },\n-  saveText: { color: 'white', fontWeight: 'bold' },\n-  cancelText: { color: '#888', marginLeft: 10, marginTop: 10 },\n });\n"
                },
                {
                    "date": 1749523049387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n         const data = snapshot.val();\n \n         if (!data) return;\n \n-        const myMeals = Object.values(data).filter((meal: any) =>\n-          meal.joinedIds?.includes(userId)\n-        );\n+        const myMeals = Object.values(data as Record<string, Meal>).filter((meal) =>\n+        meal.joinedIds?.includes(userId)\n+      );\n \n         setJoinedMeals(myMeals);\n       } catch (err) {\n         console.error('‚ùå Failed to fetch meals:', err);\n"
                },
                {
                    "date": 1749524001853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, get } from 'firebase/database';\n+import { db } from '../firebase';\n+import auth from '@react-native-firebase/auth';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList, Meal } from '../types';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+\n+export default function MyMealsScreen() {\n+  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const navigation = useNavigation<NavigationProp>();\n+  const userId = auth().currentUser?.uid;\n+\n+  useEffect(() => {\n+    const fetchJoinedMeals = async () => {\n+      if (!userId) return;\n+\n+      try {\n+        const snapshot = await get(ref(db, 'meals'));\n+        const data = snapshot.val();\n+\n+        if (!data) return;\n+\n+        const myMeals = Object.values(data as Record<string, Meal>).filter((meal) =>\n+        meal.joinedIds?.includes(userId)\n+      );\n+\n+        setJoinedMeals(myMeals);\n+      } catch (err) {\n+        console.error('‚ùå Failed to fetch meals:', err);\n+        Alert.alert('Error', 'Failed to load your meals.');\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchJoinedMeals();\n+  }, []);\n+\n+  if (loading) {\n+    return (\n+      <View style={styles.center}>\n+        <ActivityIndicator size=\"large\" />\n+      </View>\n+    );\n+  }\n+\n+  if (joinedMeals.length === 0) {\n+    return (\n+      <View style={styles.center}>\n+        <Text>No joined meals found.</Text>\n+      </View>\n+    );\n+  }\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>üç± My Meals</Text>\n+\n+      <FlatList\n+      data={joinedMeals}\n+      keyExtractor={(item) => item.id}\n+      renderItem={({ item }) => (\n+        <Pressable\n+          onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+          style={styles.mealCard}\n+        >\n+          <Text style={styles.mealTitle}>{item.title}</Text>\n+          <Text>{item.location}</Text>\n+          <Text>{item.time}</Text>\n+        </Pressable>\n+      )}\n+    />\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20 },\n+  title: {\n+    fontSize: 24,\n+    fontWeight: 'bold',\n+    marginBottom: 16,\n+  },\n+  mealCard: {\n+    padding: 14,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    marginBottom: 12,\n+  },\n+  mealTitle: { fontSize: 18, fontWeight: '600' },\n+  center: {\n+    flex: 1,\n+    justifyContent: 'center',\n+    alignItems: 'center',\n+  },\n+});\n"
                },
                {
                    "date": 1749524070631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,161 +3,57 @@\n   Text,\n   FlatList,\n   Pressable,\n   StyleSheet,\n+  RefreshControl,\n   ActivityIndicator,\n-  Alert,\n } from 'react-native';\n-import { useEffect, useState } from 'react';\n+import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n+import auth from '@react-native-firebase/auth';\n import { ref, get } from 'firebase/database';\n import { db } from '../firebase';\n-import auth from '@react-native-firebase/auth';\n+import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList, Meal } from '../types';\n \n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n export default function MyMealsScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n   const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n-  const navigation = useNavigation<NavigationProp>();\n+  const [refreshing, setRefreshing] = useState(false);\n+\n   const userId = auth().currentUser?.uid;\n \n-  useEffect(() => {\n-    const fetchJoinedMeals = async () => {\n-      if (!userId) return;\n+  const fetchMeals = async () => {\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n+      const data = snapshot.val();\n \n-      try {\n-        const snapshot = await get(ref(db, 'meals'));\n-        const data = snapshot.val();\n-\n-        if (!data) return;\n-\n-        const myMeals = Object.values(data as Record<string, Meal>).filter((meal) =>\n-        meal.joinedIds?.includes(userId)\n-      );\n-\n-        setJoinedMeals(myMeals);\n-      } catch (err) {\n-        console.error('‚ùå Failed to fetch meals:', err);\n-        Alert.alert('Error', 'Failed to load your meals.');\n-      } finally {\n-        setLoading(false);\n+      if (!data) {\n+        setJoinedMeals([]);\n+        return;\n       }\n-    };\n \n-    fetchJoinedMeals();\n-  }, []);\n+      const mealsArray = Object.values(data) as Meal[];\n+      const myMeals = mealsArray.filter((meal) => meal.joinedIds?.includes(userId));\n+      setJoinedMeals(myMeals);\n+    } catch (err) {\n+      console.error('üî• Failed to fetch meals:', err);\n+    } finally {\n+      setLoading(false);\n+      setRefreshing(false);\n+    }\n+  };\n \n-  if (loading) {\n-    return (\n-      <View style={styles.center}>\n-        <ActivityIndicator size=\"large\" />\n-      </View>\n-    );\n-  }\n-\n-  if (joinedMeals.length === 0) {\n-    return (\n-      <View style={styles.center}>\n-        <Text>No joined meals found.</Text>\n-      </View>\n-    );\n-  }\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>üç± My Meals</Text>\n-\n-      <FlatList\n-      data={joinedMeals}\n-      keyExtractor={(item) => item.id}\n-      renderItem={({ item }) => (\n-        <Pressable\n-          onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-          style={styles.mealCard}\n-        >\n-          <Text style={styles.mealTitle}>{item.title}</Text>\n-          <Text>{item.location}</Text>\n-          <Text>{item.time}</Text>\n-        </Pressable>\n-      )}\n-    />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: 'bold',\n-    marginBottom: 16,\n-  },\n-  mealCard: {\n-    padding: 14,\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    marginBottom: 12,\n-  },\n-  mealTitle: { fontSize: 18, fontWeight: '600' },\n-  center: {\n-    flex: 1,\n-    justifyContent: 'center',\n-    alignItems: 'center',\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, get } from 'firebase/database';\n-import { db } from '../firebase';\n-import auth from '@react-native-firebase/auth';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList, Meal } from '../types';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\n-\n-export default function MyMealsScreen() {\n-  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const navigation = useNavigation<NavigationProp>();\n-  const userId = auth().currentUser?.uid;\n-\n   useEffect(() => {\n-    const fetchJoinedMeals = async () => {\n-      if (!userId) return;\n+    fetchMeals();\n+  }, []);\n \n-      try {\n-        const snapshot = await get(ref(db, 'meals'));\n-        const data = snapshot.val();\n-\n-        if (!data) return;\n-\n-        const myMeals = Object.values(data as Record<string, Meal>).filter((meal) =>\n-        meal.joinedIds?.includes(userId)\n-      );\n-\n-        setJoinedMeals(myMeals);\n-      } catch (err) {\n-        console.error('‚ùå Failed to fetch meals:', err);\n-        Alert.alert('Error', 'Failed to load your meals.');\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchJoinedMeals();\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n   }, []);\n \n   if (loading) {\n     return (\n@@ -166,54 +62,43 @@\n       </View>\n     );\n   }\n \n-  if (joinedMeals.length === 0) {\n-    return (\n-      <View style={styles.center}>\n-        <Text>No joined meals found.</Text>\n-      </View>\n-    );\n-  }\n-\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.title}>üç± My Meals</Text>\n+      <Text style={styles.header}>üçΩ My Joined Meals</Text>\n \n       <FlatList\n         data={joinedMeals}\n         keyExtractor={(item) => item.id}\n+        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n         renderItem={({ item }) => (\n           <Pressable\n             onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.mealCard}\n+            style={styles.card}\n           >\n-            <Text style={styles.mealTitle}>{item.title}</Text>\n-            <Text>{item.location} | {item.time}</Text>\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n           </Pressable>\n         )}\n+        ListEmptyComponent={\n+          <Text style={{ textAlign: 'center', marginTop: 20 }}>You haven't joined any meals yet.</Text>\n+        }\n       />\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: 'bold',\n-    marginBottom: 16,\n-  },\n-  mealCard: {\n-    padding: 14,\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  header: { fontSize: 20, fontWeight: 'bold', marginBottom: 12 },\n+  card: {\n     borderWidth: 1,\n-    borderColor: '#ccc',\n+    borderColor: '#ddd',\n+    padding: 16,\n     borderRadius: 8,\n     marginBottom: 12,\n+    backgroundColor: '#f9f9f9',\n   },\n-  mealTitle: { fontSize: 18, fontWeight: '600' },\n-  center: {\n-    flex: 1,\n-    justifyContent: 'center',\n-    alignItems: 'center',\n-  },\n+  cardTitle: { fontSize: 16, fontWeight: '600' },\n+  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n });\n"
                },
                {
                    "date": 1749524190772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,28 +25,38 @@\n \n   const userId = auth().currentUser?.uid;\n \n   const fetchMeals = async () => {\n-    try {\n-      const snapshot = await get(ref(db, 'meals'));\n-      const data = snapshot.val();\n+  try {\n+    const snapshot = await get(ref(db, 'meals'));\n+    const data = snapshot.val();\n \n-      if (!data) {\n-        setJoinedMeals([]);\n-        return;\n-      }\n+    if (!data) {\n+      setJoinedMeals([]);\n+      return;\n+    }\n \n-      const mealsArray = Object.values(data) as Meal[];\n-      const myMeals = mealsArray.filter((meal) => meal.joinedIds?.includes(userId));\n-      setJoinedMeals(myMeals);\n-    } catch (err) {\n-      console.error('üî• Failed to fetch meals:', err);\n-    } finally {\n-      setLoading(false);\n-      setRefreshing(false);\n+    const userId = auth.currentUser?.uid;\n+    if (!userId) {\n+      console.error('‚ùå No userId found.');\n+      return;\n     }\n-  };\n \n+    const mealsArray = Object.values(data) as Meal[];\n+    const myMeals = mealsArray.filter((meal) =>\n+      meal.joinedIds?.includes(userId)\n+    );\n+    setJoinedMeals(myMeals);\n+  } catch (err) {\n+    console.error('üî• Failed to fetch meals:', err);\n+    Alert.alert('Error', 'Failed to load your meals.');\n+  } finally {\n+    setLoading(false);\n+    setRefreshing(false);\n+  }\n+};\n+\n+\n   useEffect(() => {\n     fetchMeals();\n   }, []);\n \n@@ -100,5 +110,5 @@\n     backgroundColor: '#f9f9f9',\n   },\n   cardTitle: { fontSize: 16, fontWeight: '600' },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749524305825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   ActivityIndicator,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import auth from '@react-native-firebase/auth';\n+import { auth } from '../firebase';\n import { ref, get } from 'firebase/database';\n import { db } from '../firebase';\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n"
                },
                {
                    "date": 1749524445525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,14 @@\n   Pressable,\n   StyleSheet,\n   RefreshControl,\n   ActivityIndicator,\n+  Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { auth } from '../firebase';\n import { ref, get } from 'firebase/database';\n-import { db } from '../firebase';\n+import { db, auth } from '../firebase'; // ‚úÖ Web Áâà auth\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n@@ -22,40 +22,39 @@\n   const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n \n-  const userId = auth().currentUser?.uid;\n-\n   const fetchMeals = async () => {\n-  try {\n-    const snapshot = await get(ref(db, 'meals'));\n-    const data = snapshot.val();\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n+      const data = snapshot.val();\n \n-    if (!data) {\n-      setJoinedMeals([]);\n-      return;\n-    }\n+      if (!data) {\n+        setJoinedMeals([]);\n+        return;\n+      }\n \n-    const userId = auth.currentUser?.uid;\n-    if (!userId) {\n-      console.error('‚ùå No userId found.');\n-      return;\n-    }\n+      const userId = auth.currentUser?.uid;\n+      if (!userId) {\n+        console.error('‚ùå No user is logged in');\n+        setJoinedMeals([]);\n+        return;\n+      }\n \n-    const mealsArray = Object.values(data) as Meal[];\n-    const myMeals = mealsArray.filter((meal) =>\n-      meal.joinedIds?.includes(userId)\n-    );\n-    setJoinedMeals(myMeals);\n-  } catch (err) {\n-    console.error('üî• Failed to fetch meals:', err);\n-    Alert.alert('Error', 'Failed to load your meals.');\n-  } finally {\n-    setLoading(false);\n-    setRefreshing(false);\n-  }\n-};\n+      const mealsArray = Object.values(data) as Meal[];\n+      const myMeals = mealsArray.filter((meal) =>\n+        meal.joinedIds?.includes(userId)\n+      );\n \n+      setJoinedMeals(myMeals);\n+    } catch (err) {\n+      console.error('üî• Failed to fetch meals:', err);\n+      Alert.alert('Error', 'Failed to load your meals.');\n+    } finally {\n+      setLoading(false);\n+      setRefreshing(false);\n+    }\n+  };\n \n   useEffect(() => {\n     fetchMeals();\n   }, []);\n@@ -79,9 +78,11 @@\n \n       <FlatList\n         data={joinedMeals}\n         keyExtractor={(item) => item.id}\n-        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n         renderItem={({ item }) => (\n           <Pressable\n             onPress={() => navigation.navigate('EditMeal', { meal: item })}\n             style={styles.card}\n@@ -90,9 +91,11 @@\n             <Text>{item.location} ‚Ä¢ {item.time}</Text>\n           </Pressable>\n         )}\n         ListEmptyComponent={\n-          <Text style={{ textAlign: 'center', marginTop: 20 }}>You haven't joined any meals yet.</Text>\n+          <Text style={{ textAlign: 'center', marginTop: 20 }}>\n+            You haven't joined any meals yet.\n+          </Text>\n         }\n       />\n     </View>\n   );\n@@ -110,5 +113,5 @@\n     backgroundColor: '#f9f9f9',\n   },\n   cardTitle: { fontSize: 16, fontWeight: '600' },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1749525415076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,28 +70,32 @@\n         <ActivityIndicator size=\"large\" />\n       </View>\n     );\n   }\n-\n+  \n   return (\n     <View style={styles.container}>\n       <Text style={styles.header}>üçΩ My Joined Meals</Text>\n \n       <FlatList\n         data={joinedMeals}\n-        keyExtractor={(item) => item.id}\n+        keyExtractor={(item, index) => item?.id ?? index.toString()}\n         refreshControl={\n           <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n         }\n-        renderItem={({ item }) => (\n-          <Pressable\n-            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.card}\n-          >\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </Pressable>\n-        )}\n+        renderItem={({ item }) => {\n+          if (!item?.id) return null;\n+\n+          return (\n+            <Pressable\n+              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+              style={styles.card}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+          );\n+        }}\n         ListEmptyComponent={\n           <Text style={{ textAlign: 'center', marginTop: 20 }}>\n             You haven't joined any meals yet.\n           </Text>\n"
                },
                {
                    "date": 1749526047781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,10 @@\n         refreshControl={\n           <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n         }\n         renderItem={({ item }) => {\n-          if (!item?.id) return null;\n+          console.log('üß≠ navigating with item:', item); \n+          if (!item || typeof item !== 'object' || !item.id) return null;\n \n           return (\n             <Pressable\n               onPress={() => navigation.navigate('EditMeal', { meal: item })}\n"
                },
                {
                    "date": 1749535776209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,18 +9,19 @@\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, get } from 'firebase/database';\n-import { db, auth } from '../firebase'; // ‚úÖ Web Áâà auth\n+import { ref, get, remove } from 'firebase/database';\n+import { db, auth } from '../firebase';\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n   const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n+  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n \n   const fetchMeals = async () => {\n@@ -29,24 +30,33 @@\n       const data = snapshot.val();\n \n       if (!data) {\n         setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n         return;\n       }\n \n       const userId = auth.currentUser?.uid;\n       if (!userId) {\n         console.error('‚ùå No user is logged in');\n         setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n         return;\n       }\n \n-      const mealsArray = Object.values(data) as Meal[];\n-      const myMeals = mealsArray.filter((meal) =>\n-        meal.joinedIds?.includes(userId)\n+      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n+        ...(meal as Meal),\n+        id,\n+      }));\n+\n+      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n+      const myJoined = mealsArray.filter(\n+        (meal) =>\n+          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n       );\n \n-      setJoinedMeals(myMeals);\n+      setMyCreatedMeals(myCreated);\n+      setJoinedMeals(myJoined);\n     } catch (err) {\n       console.error('üî• Failed to fetch meals:', err);\n       Alert.alert('Error', 'Failed to load your meals.');\n     } finally {\n@@ -54,8 +64,28 @@\n       setRefreshing(false);\n     }\n   };\n \n+  const handleDeleteMeal = async (mealId: string) => {\n+    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n+      { text: 'Cancel', style: 'cancel' },\n+      {\n+        text: 'Delete',\n+        style: 'destructive',\n+        onPress: async () => {\n+          try {\n+            console.log('üóë Deleting meal with ID:', mealId);\n+            await remove(ref(db, `meals/${mealId}`));\n+            fetchMeals(); // refresh\n+          } catch (error) {\n+            console.error('üî• Failed to delete meal:', error);\n+            Alert.alert('Error', 'Failed to delete meal.');\n+          }\n+        },\n+      },\n+    ]);\n+  };\n+\n   useEffect(() => {\n     fetchMeals();\n   }, []);\n \n@@ -70,35 +100,59 @@\n         <ActivityIndicator size=\"large\" />\n       </View>\n     );\n   }\n-  \n+\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ My Joined Meals</Text>\n-\n+      {/* Meals You Created */}\n+      <Text style={styles.header}>üìù Meals You Created</Text>\n       <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item?.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => {\n-          console.log('üß≠ navigating with item:', item); \n-          if (!item || typeof item !== 'object' || !item.id) return null;\n-\n-          return (\n+        data={myCreatedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n             <Pressable\n               onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-              style={styles.card}\n+              style={styles.cardContent}\n             >\n               <Text style={styles.cardTitle}>{item.title}</Text>\n               <Text>{item.location} ‚Ä¢ {item.time}</Text>\n             </Pressable>\n-          );\n-        }}\n+            <Pressable\n+              onPress={() => handleDeleteMeal(item.id)}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.deleteText}>Delete</Text>\n+            </Pressable>\n+          </View>\n+        )}\n         ListEmptyComponent={\n-          <Text style={{ textAlign: 'center', marginTop: 20 }}>\n+          <Text style={styles.emptyText}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n+        }\n+      />\n+\n+      {/* Meals You Joined */}\n+      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n+      <FlatList\n+        data={joinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n+        renderItem={({ item }) => (\n+          <Pressable\n+            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            style={styles.card}\n+          >\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+          </Pressable>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n             You haven't joined any meals yet.\n           </Text>\n         }\n       />\n@@ -107,16 +161,37 @@\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginBottom: 12 },\n+  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n   card: {\n     borderWidth: 1,\n     borderColor: '#ddd',\n     padding: 16,\n     borderRadius: 8,\n     marginBottom: 12,\n     backgroundColor: '#f9f9f9',\n   },\n-  cardTitle: { fontSize: 16, fontWeight: '600' },\n+  cardRow: {\n+    flexDirection: 'row',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n+  },\n+  cardContent: {\n+    flex: 1,\n+  },\n+  deleteButton: {\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+  },\n+  deleteText: {\n+    color: 'red',\n+    fontWeight: '600',\n+  },\n+  cardTitle: {\n+    fontSize: 16,\n+    fontWeight: '600',\n+    marginBottom: 4,\n+  },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n+  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n });\n"
                },
                {
                    "date": 1749536113440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,19 +9,18 @@\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, get, remove } from 'firebase/database';\n-import { db, auth } from '../firebase';\n+import { ref, get } from 'firebase/database';\n+import { db, auth } from '../firebase'; // ‚úÖ Web Áâà auth\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n   const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n-  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n \n   const fetchMeals = async () => {\n@@ -30,33 +29,24 @@\n       const data = snapshot.val();\n \n       if (!data) {\n         setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n         return;\n       }\n \n       const userId = auth.currentUser?.uid;\n       if (!userId) {\n         console.error('‚ùå No user is logged in');\n         setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n         return;\n       }\n \n-      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n-        ...(meal as Meal),\n-        id,\n-      }));\n-\n-      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n-      const myJoined = mealsArray.filter(\n-        (meal) =>\n-          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n+      const mealsArray = Object.values(data) as Meal[];\n+      const myMeals = mealsArray.filter((meal) =>\n+        meal.joinedIds?.includes(userId)\n       );\n \n-      setMyCreatedMeals(myCreated);\n-      setJoinedMeals(myJoined);\n+      setJoinedMeals(myMeals);\n     } catch (err) {\n       console.error('üî• Failed to fetch meals:', err);\n       Alert.alert('Error', 'Failed to load your meals.');\n     } finally {\n@@ -64,28 +54,8 @@\n       setRefreshing(false);\n     }\n   };\n \n-  const handleDeleteMeal = async (mealId: string) => {\n-    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n-      { text: 'Cancel', style: 'cancel' },\n-      {\n-        text: 'Delete',\n-        style: 'destructive',\n-        onPress: async () => {\n-          try {\n-            console.log('üóë Deleting meal with ID:', mealId);\n-            await remove(ref(db, `meals/${mealId}`));\n-            fetchMeals(); // refresh\n-          } catch (error) {\n-            console.error('üî• Failed to delete meal:', error);\n-            Alert.alert('Error', 'Failed to delete meal.');\n-          }\n-        },\n-      },\n-    ]);\n-  };\n-\n   useEffect(() => {\n     fetchMeals();\n   }, []);\n \n@@ -100,59 +70,35 @@\n         <ActivityIndicator size=\"large\" />\n       </View>\n     );\n   }\n-\n+  \n   return (\n     <View style={styles.container}>\n-      {/* Meals You Created */}\n-      <Text style={styles.header}>üìù Meals You Created</Text>\n+      <Text style={styles.header}>üçΩ My Joined Meals</Text>\n+\n       <FlatList\n-        data={myCreatedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={[styles.card, styles.cardRow]}>\n+        data={joinedMeals}\n+        keyExtractor={(item, index) => item?.id ?? index.toString()}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n+        renderItem={({ item }) => {\n+          console.log('üß≠ navigating with item:', item); \n+          if (!item || typeof item !== 'object' || !item.id) return null;\n+\n+          return (\n             <Pressable\n               onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-              style={styles.cardContent}\n+              style={styles.card}\n             >\n               <Text style={styles.cardTitle}>{item.title}</Text>\n               <Text>{item.location} ‚Ä¢ {item.time}</Text>\n             </Pressable>\n-            <Pressable\n-              onPress={() => handleDeleteMeal(item.id)}\n-              style={styles.deleteButton}\n-            >\n-              <Text style={styles.deleteText}>Delete</Text>\n-            </Pressable>\n-          </View>\n-        )}\n+          );\n+        }}\n         ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven‚Äôt created any meals yet.\n-          </Text>\n-        }\n-      />\n-\n-      {/* Meals You Joined */}\n-      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n-      <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => (\n-          <Pressable\n-            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.card}\n-          >\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </Pressable>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n+          <Text style={{ textAlign: 'center', marginTop: 20 }}>\n             You haven't joined any meals yet.\n           </Text>\n         }\n       />\n@@ -161,37 +107,16 @@\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n+  header: { fontSize: 20, fontWeight: 'bold', marginBottom: 12 },\n   card: {\n     borderWidth: 1,\n     borderColor: '#ddd',\n     padding: 16,\n     borderRadius: 8,\n     marginBottom: 12,\n     backgroundColor: '#f9f9f9',\n   },\n-  cardRow: {\n-    flexDirection: 'row',\n-    alignItems: 'center',\n-    justifyContent: 'space-between',\n-  },\n-  cardContent: {\n-    flex: 1,\n-  },\n-  deleteButton: {\n-    paddingHorizontal: 12,\n-    paddingVertical: 8,\n-  },\n-  deleteText: {\n-    color: 'red',\n-    fontWeight: '600',\n-  },\n-  cardTitle: {\n-    fontSize: 16,\n-    fontWeight: '600',\n-    marginBottom: 4,\n-  },\n+  cardTitle: { fontSize: 16, fontWeight: '600' },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n });\n"
                },
                {
                    "date": 1749536255469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,18 +9,19 @@\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, get } from 'firebase/database';\n-import { db, auth } from '../firebase'; // ‚úÖ Web Áâà auth\n+import { ref, get, remove } from 'firebase/database';\n+import { db, auth } from '../firebase';\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n   const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n+  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n \n   const fetchMeals = async () => {\n@@ -29,24 +30,33 @@\n       const data = snapshot.val();\n \n       if (!data) {\n         setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n         return;\n       }\n \n       const userId = auth.currentUser?.uid;\n       if (!userId) {\n         console.error('‚ùå No user is logged in');\n         setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n         return;\n       }\n \n-      const mealsArray = Object.values(data) as Meal[];\n-      const myMeals = mealsArray.filter((meal) =>\n-        meal.joinedIds?.includes(userId)\n+      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n+        ...(meal as Meal),\n+        id,\n+      }));\n+\n+      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n+      const myJoined = mealsArray.filter(\n+        (meal) =>\n+          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n       );\n \n-      setJoinedMeals(myMeals);\n+      setMyCreatedMeals(myCreated);\n+      setJoinedMeals(myJoined);\n     } catch (err) {\n       console.error('üî• Failed to fetch meals:', err);\n       Alert.alert('Error', 'Failed to load your meals.');\n     } finally {\n@@ -54,8 +64,28 @@\n       setRefreshing(false);\n     }\n   };\n \n+  const handleDeleteMeal = async (mealId: string) => {\n+    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n+      { text: 'Cancel', style: 'cancel' },\n+      {\n+        text: 'Delete',\n+        style: 'destructive',\n+        onPress: async () => {\n+          try {\n+            console.log('üóë Deleting meal with ID:', mealId);\n+            await remove(ref(db, `meals/${mealId}`));\n+            fetchMeals(); // refresh\n+          } catch (error) {\n+            console.error('üî• Failed to delete meal:', error);\n+            Alert.alert('Error', 'Failed to delete meal.');\n+          }\n+        },\n+      },\n+    ]);\n+  };\n+\n   useEffect(() => {\n     fetchMeals();\n   }, []);\n \n@@ -70,35 +100,59 @@\n         <ActivityIndicator size=\"large\" />\n       </View>\n     );\n   }\n-  \n+\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ My Joined Meals</Text>\n-\n+      {/* Meals You Created */}\n+      <Text style={styles.header}>üìù Meals You Created</Text>\n       <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item?.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => {\n-          console.log('üß≠ navigating with item:', item); \n-          if (!item || typeof item !== 'object' || !item.id) return null;\n-\n-          return (\n+        data={myCreatedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n             <Pressable\n               onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-              style={styles.card}\n+              style={styles.cardContent}\n             >\n               <Text style={styles.cardTitle}>{item.title}</Text>\n               <Text>{item.location} ‚Ä¢ {item.time}</Text>\n             </Pressable>\n-          );\n-        }}\n+            <Pressable\n+              onPress={() => handleDeleteMeal(item.id)}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.deleteText}>Delete</Text>\n+            </Pressable>\n+          </View>\n+        )}\n         ListEmptyComponent={\n-          <Text style={{ textAlign: 'center', marginTop: 20 }}>\n+          <Text style={styles.emptyText}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n+        }\n+      />\n+\n+      {/* Meals You Joined */}\n+      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n+      <FlatList\n+        data={joinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n+        renderItem={({ item }) => (\n+          <Pressable\n+            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            style={styles.card}\n+          >\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+          </Pressable>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n             You haven't joined any meals yet.\n           </Text>\n         }\n       />\n@@ -107,16 +161,37 @@\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginBottom: 12 },\n+  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n   card: {\n     borderWidth: 1,\n     borderColor: '#ddd',\n     padding: 16,\n     borderRadius: 8,\n     marginBottom: 12,\n     backgroundColor: '#f9f9f9',\n   },\n-  cardTitle: { fontSize: 16, fontWeight: '600' },\n+  cardRow: {\n+    flexDirection: 'row',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n+  },\n+  cardContent: {\n+    flex: 1,\n+  },\n+  deleteButton: {\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+  },\n+  deleteText: {\n+    color: 'red',\n+    fontWeight: '600',\n+  },\n+  cardTitle: {\n+    fontSize: 16,\n+    fontWeight: '600',\n+    marginBottom: 4,\n+  },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n+  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n });\n"
                },
                {
                    "date": 1749537289501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,89 +3,46 @@\n   Text,\n   FlatList,\n   Pressable,\n   StyleSheet,\n+  ActivityIndicator,\n   RefreshControl,\n-  ActivityIndicator,\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, get, remove } from 'firebase/database';\n+import { ref, onValue, update } from 'firebase/database';\n import { db, auth } from '../firebase';\n-import type { RootStackParamList, Meal } from '../types';\n+import type { Meal, RootStackParamList } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n \n-export default function MyMealsScreen() {\n+export default function MealListScreen() {\n   const navigation = useNavigation<NavigationProp>();\n-  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n-  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n+  const [meals, setMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n \n-  const fetchMeals = async () => {\n-    try {\n-      const snapshot = await get(ref(db, 'meals'));\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n       const data = snapshot.val();\n-\n-      if (!data) {\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n+      if (data) {\n+        const mealArray = Object.entries(data).map(([id, value]) => ({\n+          ...(value as Meal),\n+          id,\n+        }));\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n       }\n-\n-      const userId = auth.currentUser?.uid;\n-      if (!userId) {\n-        console.error('‚ùå No user is logged in');\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n-      }\n-\n-      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n-        ...(meal as Meal),\n-        id,\n-      }));\n-\n-      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n-      const myJoined = mealsArray.filter(\n-        (meal) =>\n-          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n-      );\n-\n-      setMyCreatedMeals(myCreated);\n-      setJoinedMeals(myJoined);\n-    } catch (err) {\n-      console.error('üî• Failed to fetch meals:', err);\n-      Alert.alert('Error', 'Failed to load your meals.');\n-    } finally {\n       setLoading(false);\n       setRefreshing(false);\n-    }\n+    });\n   };\n \n-  const handleDeleteMeal = async (mealId: string) => {\n-    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n-      { text: 'Cancel', style: 'cancel' },\n-      {\n-        text: 'Delete',\n-        style: 'destructive',\n-        onPress: async () => {\n-          try {\n-            console.log('üóë Deleting meal with ID:', mealId);\n-            await remove(ref(db, `meals/${mealId}`));\n-            fetchMeals(); // refresh\n-          } catch (error) {\n-            console.error('üî• Failed to delete meal:', error);\n-            Alert.alert('Error', 'Failed to delete meal.');\n-          }\n-        },\n-      },\n-    ]);\n-  };\n-\n   useEffect(() => {\n     fetchMeals();\n   }, []);\n \n@@ -93,105 +50,133 @@\n     setRefreshing(true);\n     fetchMeals();\n   }, []);\n \n-  if (loading) {\n-    return (\n-      <View style={styles.center}>\n-        <ActivityIndicator size=\"large\" />\n-      </View>\n-    );\n-  }\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n \n+  const handleCreateMeal = () => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n+  const handleJoin = async (meal: Meal) => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to join a meal.');\n+      return;\n+    }\n+\n+    if (meal.joinedIds?.includes(userId)) {\n+      Alert.alert('Already Joined', 'You have already joined this meal.');\n+      return;\n+    }\n+\n+    const updatedJoinedIds = [...(meal.joinedIds || []), userId];\n+\n+    try {\n+      await update(ref(db, `meals/${meal.id}`), {\n+        joinedIds: updatedJoinedIds,\n+      });\n+\n+      Alert.alert('Success', 'You joined the meal!');\n+    } catch (err) {\n+      console.error('üî• Failed to join meal:', err);\n+      Alert.alert('Error', 'Failed to join the meal. Please try again.');\n+    }\n+  };\n+\n   return (\n     <View style={styles.container}>\n-      {/* Meals You Created */}\n-      <Text style={styles.header}>üìù Meals You Created</Text>\n-      <FlatList\n-        data={myCreatedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={[styles.card, styles.cardRow]}>\n-            <Pressable\n-              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-              style={styles.cardContent}\n-            >\n-              <Text style={styles.cardTitle}>{item.title}</Text>\n-              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-            </Pressable>\n-            <Pressable\n-              onPress={() => handleDeleteMeal(item.id)}\n-              style={styles.deleteButton}\n-            >\n-              <Text style={styles.deleteText}>Delete</Text>\n-            </Pressable>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven‚Äôt created any meals yet.\n-          </Text>\n-        }\n-      />\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n \n-      {/* Meals You Joined */}\n-      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n-      <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => (\n-          <Pressable\n-            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.card}\n-          >\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </Pressable>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven't joined any meals yet.\n-          </Text>\n-        }\n-      />\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => {\n+            const isCreatedByMe = item.creatorId === userId;\n+\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByMe ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={styles.button}\n+                    onPress={() => handleJoin(item)}\n+                  >\n+                    <Text style={styles.buttonText}>Join</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No meal events found near you.\n+            </Text>\n+          }\n+        />\n+      )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n   card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n     borderWidth: 1,\n     borderColor: '#ddd',\n-    padding: 16,\n-    borderRadius: 8,\n-    marginBottom: 12,\n-    backgroundColor: '#f9f9f9',\n   },\n-  cardRow: {\n-    flexDirection: 'row',\n-    alignItems: 'center',\n-    justifyContent: 'space-between',\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n   },\n-  cardContent: {\n-    flex: 1,\n-  },\n-  deleteButton: {\n-    paddingHorizontal: 12,\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n     paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n   },\n-  deleteText: {\n-    color: 'red',\n-    fontWeight: '600',\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n   },\n-  cardTitle: {\n+  createButtonText: {\n+    color: '#fff',\n     fontSize: 16,\n     fontWeight: '600',\n-    marginBottom: 4,\n   },\n-  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n });\n"
                },
                {
                    "date": 1749537399465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,44 +3,97 @@\n   Text,\n   FlatList,\n   Pressable,\n   StyleSheet,\n+  RefreshControl,\n   ActivityIndicator,\n-  RefreshControl,\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database';\n+import { ref, get, remove } from 'firebase/database';\n import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n+import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n-export default function MealListScreen() {\n+export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n+  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n-  const userId = auth.currentUser?.uid;\n \n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n+  const fetchMeals = async () => {\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n       const data = snapshot.val();\n-      if (data) {\n-        const mealArray = Object.entries(data).map(([id, value]) => ({\n-          ...(value as Meal),\n-          id,\n-        }));\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n+\n+      if (!data) {\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n       }\n-      setLoading(false);\n-      setRefreshing(false);\n-    });\n+\n+      const userId = auth.currentUser?.uid;\n+      if (!userId) {\n+        console.error('‚ùå No user is logged in');\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n+      }\n+\n+      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n+        ...(meal as Meal),\n+        id,\n+      }));\n+\n+      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n+      const handleJoin = async (meal: Meal) => {\n+      const userId = auth.currentUser?.uid;\n+      if (!userId) {\n+        Alert.alert('Login Required', 'You must be logged in to join a meal.');\n+        return;\n+      }\n+\n+      if (meal.joinedIds?.includes(userId)) {\n+        Alert.alert('You already joined this meal.');\n+        return;\n+      }\n+\n+      const updatedJoinedIds = [...(meal.joinedIds || []), userId];\n+\n+      try {\n+        await update(ref(db, `meals/${meal.id}`), {\n+          joinedIds: updatedJoinedIds,\n+        });\n+\n+        Alert.alert('Success', 'You joined the meal!');\n+      } catch (err) {\n+        console.error('üî• Failed to join meal:', err);\n+        Alert.alert('Error', 'Failed to join meal.');\n+      }\n+    };\n+\n+  const handleDeleteMeal = async (mealId: string) => {\n+    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n+      { text: 'Cancel', style: 'cancel' },\n+      {\n+        text: 'Delete',\n+        style: 'destructive',\n+        onPress: async () => {\n+          try {\n+            console.log('üóë Deleting meal with ID:', mealId);\n+            await remove(ref(db, `meals/${mealId}`));\n+            fetchMeals(); // refresh\n+          } catch (error) {\n+            console.error('üî• Failed to delete meal:', error);\n+            Alert.alert('Error', 'Failed to delete meal.');\n+          }\n+        },\n+      },\n+    ]);\n   };\n \n   useEffect(() => {\n     fetchMeals();\n@@ -50,133 +103,105 @@\n     setRefreshing(true);\n     fetchMeals();\n   }, []);\n \n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n+  if (loading) {\n+    return (\n+      <View style={styles.center}>\n+        <ActivityIndicator size=\"large\" />\n+      </View>\n+    );\n+  }\n \n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n-\n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n-  const handleJoin = async (meal: Meal) => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to join a meal.');\n-      return;\n-    }\n-\n-    if (meal.joinedIds?.includes(userId)) {\n-      Alert.alert('Already Joined', 'You have already joined this meal.');\n-      return;\n-    }\n-\n-    const updatedJoinedIds = [...(meal.joinedIds || []), userId];\n-\n-    try {\n-      await update(ref(db, `meals/${meal.id}`), {\n-        joinedIds: updatedJoinedIds,\n-      });\n-\n-      Alert.alert('Success', 'You joined the meal!');\n-    } catch (err) {\n-      console.error('üî• Failed to join meal:', err);\n-      Alert.alert('Error', 'Failed to join the meal. Please try again.');\n-    }\n-  };\n-\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+      {/* Meals You Created */}\n+      <Text style={styles.header}>üìù Meals You Created</Text>\n+      <FlatList\n+        data={myCreatedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n+            <Pressable\n+              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+              style={styles.cardContent}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+            <Pressable\n+              onPress={() => handleDeleteMeal(item.id)}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.deleteText}>Delete</Text>\n+            </Pressable>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n+        }\n+      />\n \n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => {\n-            const isCreatedByMe = item.creatorId === userId;\n-\n-            return (\n-              <View style={styles.card}>\n-                <Text style={styles.title}>{item.title}</Text>\n-                <Text>üìç {item.location}</Text>\n-                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n-\n-                {isCreatedByMe ? (\n-                  <Text style={styles.creatorNote}>You created this meal.</Text>\n-                ) : (\n-                  <Pressable\n-                    style={styles.button}\n-                    onPress={() => handleJoin(item)}\n-                  >\n-                    <Text style={styles.buttonText}>Join</Text>\n-                  </Pressable>\n-                )}\n-              </View>\n-            );\n-          }}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No meal events found near you.\n-            </Text>\n-          }\n-        />\n-      )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n+      {/* Meals You Joined */}\n+      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n+      <FlatList\n+        data={joinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n+        renderItem={({ item }) => (\n+          <Pressable\n+            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            style={styles.card}\n+          >\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+          </Pressable>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven't joined any meals yet.\n+          </Text>\n+        }\n+      />\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n   card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n     padding: 16,\n+    borderRadius: 8,\n     marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n+    backgroundColor: '#f9f9f9',\n   },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  creatorNote: {\n-    marginTop: 10,\n-    color: 'gray',\n-    fontStyle: 'italic',\n+  cardRow: {\n+    flexDirection: 'row',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n   },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n+  cardContent: {\n+    flex: 1,\n+  },\n+  deleteButton: {\n+    paddingHorizontal: 12,\n     paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n   },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n+  deleteText: {\n+    color: 'red',\n+    fontWeight: '600',\n   },\n-  createButtonText: {\n-    color: '#fff',\n+  cardTitle: {\n     fontSize: 16,\n     fontWeight: '600',\n+    marginBottom: 4,\n   },\n+  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n+  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n });\n"
                },
                {
                    "date": 1749537487202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  RefreshControl,\n+  ActivityIndicator,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, get, remove } from 'firebase/database';\n+import { db, auth } from '../firebase';\n+import type { RootStackParamList, Meal } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n+\n+export default function MyMealsScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n+  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+\n+  const fetchMeals = async () => {\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n+      const data = snapshot.val();\n+\n+      if (!data) {\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n+      }\n+\n+      const userId = auth.currentUser?.uid;\n+      if (!userId) {\n+        console.error('‚ùå No user is logged in');\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n+      }\n+\n+      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n+        ...(meal as Meal),\n+        id,\n+      }));\n+\n+      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n+      const myJoined = mealsArray.filter(\n+        (meal) =>\n+          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n+      );\n+\n+      setMyCreatedMeals(myCreated);\n+      setJoinedMeals(myJoined);\n+    } catch (err) {\n+      console.error('üî• Failed to fetch meals:', err);\n+      Alert.alert('Error', 'Failed to load your meals.');\n+    } finally {\n+      setLoading(false);\n+      setRefreshing(false);\n+    }\n+  };\n+\n+  const handleDeleteMeal = async (mealId: string) => {\n+    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n+      { text: 'Cancel', style: 'cancel' },\n+      {\n+        text: 'Delete',\n+        style: 'destructive',\n+        onPress: async () => {\n+          try {\n+            console.log('üóë Deleting meal with ID:', mealId);\n+            await remove(ref(db, `meals/${mealId}`));\n+            fetchMeals(); // refresh\n+          } catch (error) {\n+            console.error('üî• Failed to delete meal:', error);\n+            Alert.alert('Error', 'Failed to delete meal.');\n+          }\n+        },\n+      },\n+    ]);\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  if (loading) {\n+    return (\n+      <View style={styles.center}>\n+        <ActivityIndicator size=\"large\" />\n+      </View>\n+    );\n+  }\n+\n+  return (\n+    <View style={styles.container}>\n+      {/* Meals You Created */}\n+      <Text style={styles.header}>üìù Meals You Created</Text>\n+      <FlatList\n+        data={myCreatedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n+            <Pressable\n+              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+              style={styles.cardContent}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+            <Pressable\n+              onPress={() => handleDeleteMeal(item.id)}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.deleteText}>Delete</Text>\n+            </Pressable>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n+        }\n+      />\n+\n+      {/* Meals You Joined */}\n+      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n+      <FlatList\n+        data={joinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n+        renderItem={({ item }) => (\n+          <Pressable\n+            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            style={styles.card}\n+          >\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+          </Pressable>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven't joined any meals yet.\n+          </Text>\n+        }\n+      />\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n+  card: {\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+    padding: 16,\n+    borderRadius: 8,\n+    marginBottom: 12,\n+    backgroundColor: '#f9f9f9',\n+  },\n+  cardRow: {\n+    flexDirection: 'row',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n+  },\n+  cardContent: {\n+    flex: 1,\n+  },\n+  deleteButton: {\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+  },\n+  deleteText: {\n+    color: 'red',\n+    fontWeight: '600',\n+  },\n+  cardTitle: {\n+    fontSize: 16,\n+    fontWeight: '600',\n+    marginBottom: 4,\n+  },\n+  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n+  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749537573171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,235 +135,33 @@\n \n       {/* Meals You Joined */}\n       <Text style={styles.header}>üçΩ Meals You Joined</Text>\n       <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => (\n-          <Pressable\n-            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.card}\n-          >\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </Pressable>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven't joined any meals yet.\n-          </Text>\n-        }\n-      />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n-  card: {\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-    padding: 16,\n-    borderRadius: 8,\n-    marginBottom: 12,\n-    backgroundColor: '#f9f9f9',\n-  },\n-  cardRow: {\n-    flexDirection: 'row',\n-    alignItems: 'center',\n-    justifyContent: 'space-between',\n-  },\n-  cardContent: {\n-    flex: 1,\n-  },\n-  deleteButton: {\n-    paddingHorizontal: 12,\n-    paddingVertical: 8,\n-  },\n-  deleteText: {\n-    color: 'red',\n-    fontWeight: '600',\n-  },\n-  cardTitle: {\n-    fontSize: 16,\n-    fontWeight: '600',\n-    marginBottom: 4,\n-  },\n-  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  RefreshControl,\n-  ActivityIndicator,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, get, remove } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import type { RootStackParamList, Meal } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n-\n-export default function MyMealsScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n-  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-\n-  const fetchMeals = async () => {\n-    try {\n-      const snapshot = await get(ref(db, 'meals'));\n-      const data = snapshot.val();\n-\n-      if (!data) {\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n+      data={joinedMeals}\n+      keyExtractor={(item, index) => item.id ?? index.toString()}\n+      refreshControl={\n+        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n       }\n-\n-      const userId = auth.currentUser?.uid;\n-      if (!userId) {\n-        console.error('‚ùå No user is logged in');\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n+      renderItem={({ item }) => (\n+        <Pressable\n+          onPress={() =>\n+            navigation.navigate('ChatRoom', {\n+              mealId: item.id,\n+              mealTitle: item.title,\n+            })\n+          }\n+          style={styles.card}\n+        >\n+          <Text style={styles.cardTitle}>{item.title}</Text>\n+          <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+        </Pressable>\n+      )}\n+      ListEmptyComponent={\n+        <Text style={styles.emptyText}>\n+          You haven't joined any meals yet.\n+        </Text>\n       }\n-\n-      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n-        ...(meal as Meal),\n-        id,\n-      }));\n-\n-      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n-      const handleJoin = async (meal: Meal) => {\n-      const userId = auth.currentUser?.uid;\n-      if (!userId) {\n-        Alert.alert('Login Required', 'You must be logged in to join a meal.');\n-        return;\n-      }\n-\n-      if (meal.joinedIds?.includes(userId)) {\n-        Alert.alert('You already joined this meal.');\n-        return;\n-      }\n-\n-      const updatedJoinedIds = [...(meal.joinedIds || []), userId];\n-\n-      try {\n-        await update(ref(db, `meals/${meal.id}`), {\n-          joinedIds: updatedJoinedIds,\n-        });\n-\n-        Alert.alert('Success', 'You joined the meal!');\n-      } catch (err) {\n-        console.error('üî• Failed to join meal:', err);\n-        Alert.alert('Error', 'Failed to join meal.');\n-      }\n-    };\n-\n-  const handleDeleteMeal = async (mealId: string) => {\n-    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n-      { text: 'Cancel', style: 'cancel' },\n-      {\n-        text: 'Delete',\n-        style: 'destructive',\n-        onPress: async () => {\n-          try {\n-            console.log('üóë Deleting meal with ID:', mealId);\n-            await remove(ref(db, `meals/${mealId}`));\n-            fetchMeals(); // refresh\n-          } catch (error) {\n-            console.error('üî• Failed to delete meal:', error);\n-            Alert.alert('Error', 'Failed to delete meal.');\n-          }\n-        },\n-      },\n-    ]);\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  if (loading) {\n-    return (\n-      <View style={styles.center}>\n-        <ActivityIndicator size=\"large\" />\n-      </View>\n-    );\n-  }\n-\n-  return (\n-    <View style={styles.container}>\n-      {/* Meals You Created */}\n-      <Text style={styles.header}>üìù Meals You Created</Text>\n-      <FlatList\n-        data={myCreatedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={[styles.card, styles.cardRow]}>\n-            <Pressable\n-              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-              style={styles.cardContent}\n-            >\n-              <Text style={styles.cardTitle}>{item.title}</Text>\n-              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-            </Pressable>\n-            <Pressable\n-              onPress={() => handleDeleteMeal(item.id)}\n-              style={styles.deleteButton}\n-            >\n-              <Text style={styles.deleteText}>Delete</Text>\n-            </Pressable>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven‚Äôt created any meals yet.\n-          </Text>\n-        }\n       />\n-\n-      {/* Meals You Joined */}\n-      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n-      <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => (\n-          <Pressable\n-            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.card}\n-          >\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </Pressable>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven't joined any meals yet.\n-          </Text>\n-        }\n-      />\n     </View>\n   );\n }\n \n"
                },
                {
                    "date": 1749590497387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,69 +3,83 @@\n   Text,\n   FlatList,\n   Pressable,\n   StyleSheet,\n-  RefreshControl,\n   ActivityIndicator,\n   Alert,\n } from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n+import { useEffect, useState } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, get, remove } from 'firebase/database';\n+import { ref, onValue, off, remove, update } from 'firebase/database';\n+import { parseISO, isAfter } from 'date-fns';\n import { db, auth } from '../firebase';\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n-  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n   const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n+  const [upcomingJoinedMeals, setUpcomingJoinedMeals] = useState<Meal[]>([]);\n+  const [pastJoinedMeals, setPastJoinedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n \n-  const fetchMeals = async () => {\n-    try {\n-      const snapshot = await get(ref(db, 'meals'));\n+  useEffect(() => {\n+    const mealsRef = ref(db, 'meals');\n+\n+    const unsubscribe = onValue(mealsRef, (snapshot) => {\n       const data = snapshot.val();\n+      const userId = auth.currentUser?.uid;\n \n-      if (!data) {\n-        setJoinedMeals([]);\n+      if (!data || !userId) {\n         setMyCreatedMeals([]);\n+        setUpcomingJoinedMeals([]);\n+        setPastJoinedMeals([]);\n+        setLoading(false);\n         return;\n       }\n \n-      const userId = auth.currentUser?.uid;\n-      if (!userId) {\n-        console.error('‚ùå No user is logged in');\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n-      }\n-\n+      const now = new Date();\n       const mealsArray = Object.entries(data).map(([id, meal]) => ({\n         ...(meal as Meal),\n         id,\n       }));\n \n       const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n-      const myJoined = mealsArray.filter(\n+\n+      const joined = mealsArray.filter(\n         (meal) =>\n           meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n       );\n \n+      const upcoming: Meal[] = [];\n+      const past: Meal[] = [];\n+\n+      for (const meal of joined) {\n+        if (!meal.date || !meal.time) continue;\n+\n+        try {\n+          const mealDateTime = parseISO(`${meal.date}T${meal.time}`);\n+          if (isAfter(mealDateTime, now)) {\n+            upcoming.push(meal);\n+          } else {\n+            past.push(meal);\n+          }\n+        } catch (err) {\n+          console.warn(`‚ö†Ô∏è Skipping invalid time for ${meal.title}`);\n+        }\n+      }\n+\n       setMyCreatedMeals(myCreated);\n-      setJoinedMeals(myJoined);\n-    } catch (err) {\n-      console.error('üî• Failed to fetch meals:', err);\n-      Alert.alert('Error', 'Failed to load your meals.');\n-    } finally {\n+      setUpcomingJoinedMeals(upcoming);\n+      setPastJoinedMeals(past);\n       setLoading(false);\n-      setRefreshing(false);\n-    }\n-  };\n+    });\n \n+    return () => off(mealsRef);\n+  }, []);\n+\n   const handleDeleteMeal = async (mealId: string) => {\n     Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n       { text: 'Cancel', style: 'cancel' },\n       {\n@@ -74,9 +88,8 @@\n         onPress: async () => {\n           try {\n             console.log('üóë Deleting meal with ID:', mealId);\n             await remove(ref(db, `meals/${mealId}`));\n-            fetchMeals(); // refresh\n           } catch (error) {\n             console.error('üî• Failed to delete meal:', error);\n             Alert.alert('Error', 'Failed to delete meal.');\n           }\n@@ -84,16 +97,20 @@\n       },\n     ]);\n   };\n \n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n+  const handleLeaveMeal = async (mealId: string, joinedIds: string[]) => {\n+    const userId = auth.currentUser?.uid;\n+    if (!userId) return;\n \n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n+    const updatedIds = joinedIds.filter((id) => id !== userId);\n+    try {\n+      await update(ref(db, `meals/${mealId}`), { joinedIds: updatedIds });\n+    } catch (error) {\n+      console.error('üî• Failed to leave meal:', error);\n+      Alert.alert('Error', 'Failed to leave the meal.');\n+    }\n+  };\n \n   if (loading) {\n     return (\n       <View style={styles.center}>\n@@ -103,9 +120,9 @@\n   }\n \n   return (\n     <View style={styles.container}>\n-      {/* Meals You Created */}\n+      {/* üìù Meals You Created */}\n       <Text style={styles.header}>üìù Meals You Created</Text>\n       <FlatList\n         data={myCreatedMeals}\n         keyExtractor={(item, index) => item.id ?? index.toString()}\n@@ -132,36 +149,57 @@\n           </Text>\n         }\n       />\n \n-      {/* Meals You Joined */}\n+      {/* üçΩ Meals You Joined */}\n       <Text style={styles.header}>üçΩ Meals You Joined</Text>\n       <FlatList\n-      data={joinedMeals}\n-      keyExtractor={(item, index) => item.id ?? index.toString()}\n-      refreshControl={\n-        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-      }\n-      renderItem={({ item }) => (\n-        <Pressable\n-          onPress={() =>\n-            navigation.navigate('ChatRoom', {\n-              mealId: item.id,\n-              mealTitle: item.title,\n-            })\n-          }\n-          style={styles.card}\n-        >\n-          <Text style={styles.cardTitle}>{item.title}</Text>\n-          <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-        </Pressable>\n-      )}\n-      ListEmptyComponent={\n-        <Text style={styles.emptyText}>\n-          You haven't joined any meals yet.\n-        </Text>\n-      }\n+        data={upcomingJoinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n+            <Pressable\n+              onPress={() =>\n+                navigation.navigate('ChatRoom', {\n+                  mealId: item.id,\n+                  mealTitle: item.title,\n+                })\n+              }\n+              style={styles.cardContent}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+            <Pressable\n+              onPress={() => handleLeaveMeal(item.id, item.joinedIds || [])}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.leaveText}>Leave</Text>\n+            </Pressable>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven't joined any upcoming meals.\n+          </Text>\n+        }\n       />\n+\n+      {/* üïì Past Meals You Joined */}\n+      <Text style={styles.header}>üïì Past Meals You Joined</Text>\n+      <FlatList\n+        data={pastJoinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={styles.card}>\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>No past meals yet.</Text>\n+        }\n+      />\n     </View>\n   );\n }\n \n@@ -191,12 +229,16 @@\n   deleteText: {\n     color: 'red',\n     fontWeight: '600',\n   },\n+  leaveText: {\n+    color: '#d9534f',\n+    fontWeight: '600',\n+  },\n   cardTitle: {\n     fontSize: 16,\n     fontWeight: '600',\n     marginBottom: 4,\n\\ No newline at end of file\n   },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n   emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n-});\n+});\n"
                },
                {
                    "date": 1749590540615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,5 +240,5 @@\n     marginBottom: 4,\n   },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n   emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1749590664929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,244 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue, off, remove, update } from 'firebase/database';\n+import { parseISO, isAfter } from 'date-fns';\n+import { db, auth } from '../firebase';\n+import type { RootStackParamList, Meal } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n+\n+export default function MyMealsScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n+  const [upcomingJoinedMeals, setUpcomingJoinedMeals] = useState<Meal[]>([]);\n+  const [pastJoinedMeals, setPastJoinedMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const mealsRef = ref(db, 'meals');\n+\n+    const unsubscribe = onValue(mealsRef, (snapshot) => {\n+      const data = snapshot.val();\n+      const userId = auth.currentUser?.uid;\n+\n+      if (!data || !userId) {\n+        setMyCreatedMeals([]);\n+        setUpcomingJoinedMeals([]);\n+        setPastJoinedMeals([]);\n+        setLoading(false);\n+        return;\n+      }\n+\n+      const now = new Date();\n+      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n+        ...(meal as Meal),\n+        id,\n+      }));\n+\n+      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n+\n+      const joined = mealsArray.filter(\n+        (meal) =>\n+          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n+      );\n+\n+      const upcoming: Meal[] = [];\n+      const past: Meal[] = [];\n+\n+      for (const meal of joined) {\n+        if (!meal.date || !meal.time) continue;\n+\n+        try {\n+          const mealDateTime = parseISO(`${meal.date}T${meal.time}`);\n+          if (isAfter(mealDateTime, now)) {\n+            upcoming.push(meal);\n+          } else {\n+            past.push(meal);\n+          }\n+        } catch (err) {\n+          console.warn(`‚ö†Ô∏è Skipping invalid time for ${meal.title}`);\n+        }\n+      }\n+\n+      setMyCreatedMeals(myCreated);\n+      setUpcomingJoinedMeals(upcoming);\n+      setPastJoinedMeals(past);\n+      setLoading(false);\n+    });\n+\n+    return () => off(mealsRef);\n+  }, []);\n+\n+  const handleDeleteMeal = async (mealId: string) => {\n+    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n+      { text: 'Cancel', style: 'cancel' },\n+      {\n+        text: 'Delete',\n+        style: 'destructive',\n+        onPress: async () => {\n+          try {\n+            console.log('üóë Deleting meal with ID:', mealId);\n+            await remove(ref(db, `meals/${mealId}`));\n+          } catch (error) {\n+            console.error('üî• Failed to delete meal:', error);\n+            Alert.alert('Error', 'Failed to delete meal.');\n+          }\n+        },\n+      },\n+    ]);\n+  };\n+\n+  const handleLeaveMeal = async (mealId: string, joinedIds: string[]) => {\n+    const userId = auth.currentUser?.uid;\n+    if (!userId) return;\n+\n+    const updatedIds = joinedIds.filter((id) => id !== userId);\n+    try {\n+      await update(ref(db, `meals/${mealId}`), { joinedIds: updatedIds });\n+    } catch (error) {\n+      console.error('üî• Failed to leave meal:', error);\n+      Alert.alert('Error', 'Failed to leave the meal.');\n+    }\n+  };\n+\n+  if (loading) {\n+    return (\n+      <View style={styles.center}>\n+        <ActivityIndicator size=\"large\" />\n+      </View>\n+    );\n+  }\n+\n+  return (\n+    <View style={styles.container}>\n+      {/* üìù Meals You Created */}\n+      <Text style={styles.header}>üìù Meals You Created</Text>\n+      <FlatList\n+        data={myCreatedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n+            <Pressable\n+              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+              style={styles.cardContent}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+            <Pressable\n+              onPress={() => handleDeleteMeal(item.id)}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.deleteText}>Delete</Text>\n+            </Pressable>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n+        }\n+      />\n+\n+      {/* üçΩ Meals You Joined */}\n+      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n+      <FlatList\n+        data={upcomingJoinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={[styles.card, styles.cardRow]}>\n+            <Pressable\n+              onPress={() =>\n+                navigation.navigate('ChatRoom', {\n+                  mealId: item.id,\n+                  mealTitle: item.title,\n+                })\n+              }\n+              style={styles.cardContent}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+            <Pressable\n+              onPress={() => handleLeaveMeal(item.id, item.joinedIds || [])}\n+              style={styles.deleteButton}\n+            >\n+              <Text style={styles.leaveText}>Leave</Text>\n+            </Pressable>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>\n+            You haven't joined any upcoming meals.\n+          </Text>\n+        }\n+      />\n+\n+      {/* üïì Past Meals You Joined */}\n+      <Text style={styles.header}>üïì Past Meals You Joined</Text>\n+      <FlatList\n+        data={pastJoinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={styles.card}>\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={styles.emptyText}>No past meals yet.</Text>\n+        }\n+      />\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n+  card: {\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+    padding: 16,\n+    borderRadius: 8,\n+    marginBottom: 12,\n+    backgroundColor: '#f9f9f9',\n+  },\n+  cardRow: {\n+    flexDirection: 'row',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n+  },\n+  cardContent: {\n+    flex: 1,\n+  },\n+  deleteButton: {\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+  },\n+  deleteText: {\n+    color: 'red',\n+    fontWeight: '600',\n+  },\n+  leaveText: {\n+    color: '#d9534f',\n+    fontWeight: '600',\n+  },\n+  cardTitle: {\n+    fontSize: 16,\n+    fontWeight: '600',\n+    marginBottom: 4,\n+  },\n+  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n+  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n+});\n"
                },
                {
                    "date": 1749590729263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n } from 'react-native';\n import { useEffect, useState } from 'react';\n import { useNavigation } from '@react-navigation/native';\n import { ref, onValue, off, remove, update } from 'firebase/database';\n-import { parseISO, isAfter } from 'date-fns';\n import { db, auth } from '../firebase';\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n@@ -38,9 +37,10 @@\n         setLoading(false);\n         return;\n       }\n \n-      const now = new Date();\n+      const now = Date.now();\n+\n       const mealsArray = Object.entries(data).map(([id, meal]) => ({\n         ...(meal as Meal),\n         id,\n       }));\n@@ -57,261 +57,17 @@\n \n       for (const meal of joined) {\n         if (!meal.date || !meal.time) continue;\n \n-        try {\n-          const mealDateTime = parseISO(`${meal.date}T${meal.time}`);\n-          if (isAfter(mealDateTime, now)) {\n-            upcoming.push(meal);\n-          } else {\n-            past.push(meal);\n-          }\n-        } catch (err) {\n-          console.warn(`‚ö†Ô∏è Skipping invalid time for ${meal.title}`);\n-        }\n-      }\n+        const datetimeString = `${meal.date}T${meal.time}`; // \"2025-06-11T18:00\"\n+        const timestamp = Date.parse(datetimeString);\n \n-      setMyCreatedMeals(myCreated);\n-      setUpcomingJoinedMeals(upcoming);\n-      setPastJoinedMeals(past);\n-      setLoading(false);\n-    });\n-\n-    return () => off(mealsRef);\n-  }, []);\n-\n-  const handleDeleteMeal = async (mealId: string) => {\n-    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n-      { text: 'Cancel', style: 'cancel' },\n-      {\n-        text: 'Delete',\n-        style: 'destructive',\n-        onPress: async () => {\n-          try {\n-            console.log('üóë Deleting meal with ID:', mealId);\n-            await remove(ref(db, `meals/${mealId}`));\n-          } catch (error) {\n-            console.error('üî• Failed to delete meal:', error);\n-            Alert.alert('Error', 'Failed to delete meal.');\n-          }\n-        },\n-      },\n-    ]);\n-  };\n-\n-  const handleLeaveMeal = async (mealId: string, joinedIds: string[]) => {\n-    const userId = auth.currentUser?.uid;\n-    if (!userId) return;\n-\n-    const updatedIds = joinedIds.filter((id) => id !== userId);\n-    try {\n-      await update(ref(db, `meals/${mealId}`), { joinedIds: updatedIds });\n-    } catch (error) {\n-      console.error('üî• Failed to leave meal:', error);\n-      Alert.alert('Error', 'Failed to leave the meal.');\n-    }\n-  };\n-\n-  if (loading) {\n-    return (\n-      <View style={styles.center}>\n-        <ActivityIndicator size=\"large\" />\n-      </View>\n-    );\n-  }\n-\n-  return (\n-    <View style={styles.container}>\n-      {/* üìù Meals You Created */}\n-      <Text style={styles.header}>üìù Meals You Created</Text>\n-      <FlatList\n-        data={myCreatedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={[styles.card, styles.cardRow]}>\n-            <Pressable\n-              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-              style={styles.cardContent}\n-            >\n-              <Text style={styles.cardTitle}>{item.title}</Text>\n-              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-            </Pressable>\n-            <Pressable\n-              onPress={() => handleDeleteMeal(item.id)}\n-              style={styles.deleteButton}\n-            >\n-              <Text style={styles.deleteText}>Delete</Text>\n-            </Pressable>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven‚Äôt created any meals yet.\n-          </Text>\n-        }\n-      />\n-\n-      {/* üçΩ Meals You Joined */}\n-      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n-      <FlatList\n-        data={upcomingJoinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={[styles.card, styles.cardRow]}>\n-            <Pressable\n-              onPress={() =>\n-                navigation.navigate('ChatRoom', {\n-                  mealId: item.id,\n-                  mealTitle: item.title,\n-                })\n-              }\n-              style={styles.cardContent}\n-            >\n-              <Text style={styles.cardTitle}>{item.title}</Text>\n-              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-            </Pressable>\n-            <Pressable\n-              onPress={() => handleLeaveMeal(item.id, item.joinedIds || [])}\n-              style={styles.deleteButton}\n-            >\n-              <Text style={styles.leaveText}>Leave</Text>\n-            </Pressable>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven't joined any upcoming meals.\n-          </Text>\n-        }\n-      />\n-\n-      {/* üïì Past Meals You Joined */}\n-      <Text style={styles.header}>üïì Past Meals You Joined</Text>\n-      <FlatList\n-        data={pastJoinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={styles.card}>\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>No past meals yet.</Text>\n-        }\n-      />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n-  card: {\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-    padding: 16,\n-    borderRadius: 8,\n-    marginBottom: 12,\n-    backgroundColor: '#f9f9f9',\n-  },\n-  cardRow: {\n-    flexDirection: 'row',\n-    alignItems: 'center',\n-    justifyContent: 'space-between',\n-  },\n-  cardContent: {\n-    flex: 1,\n-  },\n-  deleteButton: {\n-    paddingHorizontal: 12,\n-    paddingVertical: 8,\n-  },\n-  deleteText: {\n-    color: 'red',\n-    fontWeight: '600',\n-  },\n-  leaveText: {\n-    color: '#d9534f',\n-    fontWeight: '600',\n-  },\n-  cardTitle: {\n-    fontSize: 16,\n-    fontWeight: '600',\n-    marginBottom: 4,\n-  },\n-  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-  emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, off, remove, update } from 'firebase/database';\n-import { parseISO, isAfter } from 'date-fns';\n-import { db, auth } from '../firebase';\n-import type { RootStackParamList, Meal } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n-\n-export default function MyMealsScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n-  const [upcomingJoinedMeals, setUpcomingJoinedMeals] = useState<Meal[]>([]);\n-  const [pastJoinedMeals, setPastJoinedMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-\n-  useEffect(() => {\n-    const mealsRef = ref(db, 'meals');\n-\n-    const unsubscribe = onValue(mealsRef, (snapshot) => {\n-      const data = snapshot.val();\n-      const userId = auth.currentUser?.uid;\n-\n-      if (!data || !userId) {\n-        setMyCreatedMeals([]);\n-        setUpcomingJoinedMeals([]);\n-        setPastJoinedMeals([]);\n-        setLoading(false);\n-        return;\n-      }\n-\n-      const now = new Date();\n-      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n-        ...(meal as Meal),\n-        id,\n-      }));\n-\n-      const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n-\n-      const joined = mealsArray.filter(\n-        (meal) =>\n-          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n-      );\n-\n-      const upcoming: Meal[] = [];\n-      const past: Meal[] = [];\n-\n-      for (const meal of joined) {\n-        if (!meal.date || !meal.time) continue;\n-\n-        try {\n-          const mealDateTime = parseISO(`${meal.date}T${meal.time}`);\n-          if (isAfter(mealDateTime, now)) {\n+        if (!isNaN(timestamp)) {\n+          if (timestamp > now) {\n             upcoming.push(meal);\n           } else {\n             past.push(meal);\n           }\n-        } catch (err) {\n-          console.warn(`‚ö†Ô∏è Skipping invalid time for ${meal.title}`);\n         }\n       }\n \n       setMyCreatedMeals(myCreated);\n@@ -387,15 +143,13 @@\n             </Pressable>\n           </View>\n         )}\n         ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven‚Äôt created any meals yet.\n-          </Text>\n+          <Text style={styles.emptyText}>You haven‚Äôt created any meals yet.</Text>\n         }\n       />\n \n-      {/* üçΩ Meals You Joined */}\n+      {/* üçΩ Upcoming Meals You Joined */}\n       <Text style={styles.header}>üçΩ Meals You Joined</Text>\n       <FlatList\n         data={upcomingJoinedMeals}\n         keyExtractor={(item, index) => item.id ?? index.toString()}\n@@ -421,11 +175,9 @@\n             </Pressable>\n           </View>\n         )}\n         ListEmptyComponent={\n-          <Text style={styles.emptyText}>\n-            You haven't joined any upcoming meals.\n-          </Text>\n+          <Text style={styles.emptyText}>You haven't joined any upcoming meals.</Text>\n         }\n       />\n \n       {/* üïì Past Meals You Joined */}\n"
                },
                {
                    "date": 1749591448386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,29 +38,40 @@\n         return;\n       }\n \n       const now = Date.now();\n-\n       const mealsArray = Object.entries(data).map(([id, meal]) => ({\n         ...(meal as Meal),\n         id,\n       }));\n \n       const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n \n-      const joined = mealsArray.filter(\n-        (meal) =>\n-          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n-      );\n+      const joined = mealsArray.filter((meal) => {\n+        const joinedIds = meal.joinedIds;\n \n+        if (!joinedIds || meal.creatorId === userId) return false;\n+\n+        if (Array.isArray(joinedIds)) {\n+          return joinedIds.includes(userId);\n+        }\n+\n+        if (typeof joinedIds === 'object') {\n+          const values = Object.values(joinedIds);\n+          return values.includes(userId) || !!joinedIds[userId];\n+        }\n+\n+        return false;\n+      });\n+\n       const upcoming: Meal[] = [];\n       const past: Meal[] = [];\n \n       for (const meal of joined) {\n         if (!meal.date || !meal.time) continue;\n \n-        const datetimeString = `${meal.date}T${meal.time}`; // \"2025-06-11T18:00\"\n-        const timestamp = Date.parse(datetimeString);\n+        const dateTimeStr = `${meal.date}T${meal.time}`;\n+        const timestamp = Date.parse(dateTimeStr);\n \n         if (!isNaN(timestamp)) {\n           if (timestamp > now) {\n             upcoming.push(meal);\n@@ -86,9 +97,8 @@\n         text: 'Delete',\n         style: 'destructive',\n         onPress: async () => {\n           try {\n-            console.log('üóë Deleting meal with ID:', mealId);\n             await remove(ref(db, `meals/${mealId}`));\n           } catch (error) {\n             console.error('üî• Failed to delete meal:', error);\n             Alert.alert('Error', 'Failed to delete meal.');\n@@ -97,15 +107,23 @@\n       },\n     ]);\n   };\n \n-  const handleLeaveMeal = async (mealId: string, joinedIds: string[]) => {\n+  const handleLeaveMeal = async (mealId: string, joinedIds: any) => {\n     const userId = auth.currentUser?.uid;\n     if (!userId) return;\n \n-    const updatedIds = joinedIds.filter((id) => id !== userId);\n+    let ids: string[] = [];\n+\n+    if (Array.isArray(joinedIds)) {\n+      ids = joinedIds;\n+    } else if (typeof joinedIds === 'object' && joinedIds !== null) {\n+      ids = Object.values(joinedIds);\n+    }\n+\n+    const updated = ids.filter((id) => id !== userId);\n     try {\n-      await update(ref(db, `meals/${mealId}`), { joinedIds: updatedIds });\n+      await update(ref(db, `meals/${mealId}`), { joinedIds: updated });\n     } catch (error) {\n       console.error('üî• Failed to leave meal:', error);\n       Alert.alert('Error', 'Failed to leave the meal.');\n     }\n@@ -124,9 +142,9 @@\n       {/* üìù Meals You Created */}\n       <Text style={styles.header}>üìù Meals You Created</Text>\n       <FlatList\n         data={myCreatedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        keyExtractor={(item) => item.id ?? ''}\n         renderItem={({ item }) => (\n           <View style={[styles.card, styles.cardRow]}>\n             <Pressable\n               onPress={() => navigation.navigate('EditMeal', { meal: item })}\n@@ -147,13 +165,13 @@\n           <Text style={styles.emptyText}>You haven‚Äôt created any meals yet.</Text>\n         }\n       />\n \n-      {/* üçΩ Upcoming Meals You Joined */}\n+      {/* üçΩ Meals You Joined */}\n       <Text style={styles.header}>üçΩ Meals You Joined</Text>\n       <FlatList\n         data={upcomingJoinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        keyExtractor={(item) => item.id ?? ''}\n         renderItem={({ item }) => (\n           <View style={[styles.card, styles.cardRow]}>\n             <Pressable\n               onPress={() =>\n@@ -167,9 +185,9 @@\n               <Text style={styles.cardTitle}>{item.title}</Text>\n               <Text>{item.location} ‚Ä¢ {item.time}</Text>\n             </Pressable>\n             <Pressable\n-              onPress={() => handleLeaveMeal(item.id, item.joinedIds || [])}\n+              onPress={() => handleLeaveMeal(item.id, item.joinedIds)}\n               style={styles.deleteButton}\n             >\n               <Text style={styles.leaveText}>Leave</Text>\n             </Pressable>\n@@ -183,9 +201,9 @@\n       {/* üïì Past Meals You Joined */}\n       <Text style={styles.header}>üïì Past Meals You Joined</Text>\n       <FlatList\n         data={pastJoinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        keyExtractor={(item) => item.id ?? ''}\n         renderItem={({ item }) => (\n           <View style={styles.card}>\n             <Text style={styles.cardTitle}>{item.title}</Text>\n             <Text>{item.location} ‚Ä¢ {item.time}</Text>\n"
                },
                {
                    "date": 1749592322065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,103 +3,80 @@\n   Text,\n   FlatList,\n   Pressable,\n   StyleSheet,\n+  RefreshControl,\n   ActivityIndicator,\n   Alert,\n } from 'react-native';\n-import { useEffect, useState } from 'react';\n+import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, off, remove, update } from 'firebase/database';\n+import { ref, get, remove } from 'firebase/database';\n import { db, auth } from '../firebase';\n import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n+  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n   const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n-  const [upcomingJoinedMeals, setUpcomingJoinedMeals] = useState<Meal[]>([]);\n-  const [pastJoinedMeals, setPastJoinedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n \n-  useEffect(() => {\n-    const mealsRef = ref(db, 'meals');\n-\n-    const unsubscribe = onValue(mealsRef, (snapshot) => {\n+  const fetchMeals = async () => {\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n       const data = snapshot.val();\n-      const userId = auth.currentUser?.uid;\n \n-      if (!data || !userId) {\n+      if (!data) {\n+        setJoinedMeals([]);\n         setMyCreatedMeals([]);\n-        setUpcomingJoinedMeals([]);\n-        setPastJoinedMeals([]);\n-        setLoading(false);\n         return;\n       }\n \n-      const now = Date.now();\n+      const userId = auth.currentUser?.uid;\n+      if (!userId) {\n+        console.error('‚ùå No user is logged in');\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n+      }\n+\n       const mealsArray = Object.entries(data).map(([id, meal]) => ({\n         ...(meal as Meal),\n         id,\n       }));\n \n       const myCreated = mealsArray.filter((meal) => meal.creatorId === userId);\n+      const myJoined = mealsArray.filter(\n+        (meal) =>\n+          meal.joinedIds?.includes(userId) && meal.creatorId !== userId\n+      );\n \n-      const joined = mealsArray.filter((meal) => {\n-        const joinedIds = meal.joinedIds;\n-\n-        if (!joinedIds || meal.creatorId === userId) return false;\n-\n-        if (Array.isArray(joinedIds)) {\n-          return joinedIds.includes(userId);\n-        }\n-\n-        if (typeof joinedIds === 'object') {\n-          const values = Object.values(joinedIds);\n-          return values.includes(userId) || !!joinedIds[userId];\n-        }\n-\n-        return false;\n-      });\n-\n-      const upcoming: Meal[] = [];\n-      const past: Meal[] = [];\n-\n-      for (const meal of joined) {\n-        if (!meal.date || !meal.time) continue;\n-\n-        const dateTimeStr = `${meal.date}T${meal.time}`;\n-        const timestamp = Date.parse(dateTimeStr);\n-\n-        if (!isNaN(timestamp)) {\n-          if (timestamp > now) {\n-            upcoming.push(meal);\n-          } else {\n-            past.push(meal);\n-          }\n-        }\n-      }\n-\n       setMyCreatedMeals(myCreated);\n-      setUpcomingJoinedMeals(upcoming);\n-      setPastJoinedMeals(past);\n+      setJoinedMeals(myJoined);\n+    } catch (err) {\n+      console.error('üî• Failed to fetch meals:', err);\n+      Alert.alert('Error', 'Failed to load your meals.');\n+    } finally {\n       setLoading(false);\n-    });\n+      setRefreshing(false);\n+    }\n+  };\n \n-    return () => off(mealsRef);\n-  }, []);\n-\n   const handleDeleteMeal = async (mealId: string) => {\n     Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n       { text: 'Cancel', style: 'cancel' },\n       {\n         text: 'Delete',\n         style: 'destructive',\n         onPress: async () => {\n           try {\n+            console.log('üóë Deleting meal with ID:', mealId);\n             await remove(ref(db, `meals/${mealId}`));\n+            fetchMeals(); // refresh\n           } catch (error) {\n             console.error('üî• Failed to delete meal:', error);\n             Alert.alert('Error', 'Failed to delete meal.');\n           }\n@@ -107,29 +84,17 @@\n       },\n     ]);\n   };\n \n-  const handleLeaveMeal = async (mealId: string, joinedIds: any) => {\n-    const userId = auth.currentUser?.uid;\n-    if (!userId) return;\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n \n-    let ids: string[] = [];\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n \n-    if (Array.isArray(joinedIds)) {\n-      ids = joinedIds;\n-    } else if (typeof joinedIds === 'object' && joinedIds !== null) {\n-      ids = Object.values(joinedIds);\n-    }\n-\n-    const updated = ids.filter((id) => id !== userId);\n-    try {\n-      await update(ref(db, `meals/${mealId}`), { joinedIds: updated });\n-    } catch (error) {\n-      console.error('üî• Failed to leave meal:', error);\n-      Alert.alert('Error', 'Failed to leave the meal.');\n-    }\n-  };\n-\n   if (loading) {\n     return (\n       <View style={styles.center}>\n         <ActivityIndicator size=\"large\" />\n@@ -138,13 +103,13 @@\n   }\n \n   return (\n     <View style={styles.container}>\n-      {/* üìù Meals You Created */}\n+      {/* Meals You Created */}\n       <Text style={styles.header}>üìù Meals You Created</Text>\n       <FlatList\n         data={myCreatedMeals}\n-        keyExtractor={(item) => item.id ?? ''}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n         renderItem={({ item }) => (\n           <View style={[styles.card, styles.cardRow]}>\n             <Pressable\n               onPress={() => navigation.navigate('EditMeal', { meal: item })}\n@@ -161,59 +126,42 @@\n             </Pressable>\n           </View>\n         )}\n         ListEmptyComponent={\n-          <Text style={styles.emptyText}>You haven‚Äôt created any meals yet.</Text>\n+          <Text style={styles.emptyText}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n         }\n       />\n \n-      {/* üçΩ Meals You Joined */}\n+      {/* Meals You Joined */}\n       <Text style={styles.header}>üçΩ Meals You Joined</Text>\n       <FlatList\n-        data={upcomingJoinedMeals}\n-        keyExtractor={(item) => item.id ?? ''}\n-        renderItem={({ item }) => (\n-          <View style={[styles.card, styles.cardRow]}>\n-            <Pressable\n-              onPress={() =>\n-                navigation.navigate('ChatRoom', {\n-                  mealId: item.id,\n-                  mealTitle: item.title,\n-                })\n-              }\n-              style={styles.cardContent}\n-            >\n-              <Text style={styles.cardTitle}>{item.title}</Text>\n-              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-            </Pressable>\n-            <Pressable\n-              onPress={() => handleLeaveMeal(item.id, item.joinedIds)}\n-              style={styles.deleteButton}\n-            >\n-              <Text style={styles.leaveText}>Leave</Text>\n-            </Pressable>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>You haven't joined any upcoming meals.</Text>\n-        }\n+      data={joinedMeals}\n+      keyExtractor={(item, index) => item.id ?? index.toString()}\n+      refreshControl={\n+        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+      }\n+      renderItem={({ item }) => (\n+        <Pressable\n+          onPress={() =>\n+            navigation.navigate('ChatRoom', {\n+              mealId: item.id,\n+              mealTitle: item.title,\n+            })\n+          }\n+          style={styles.card}\n+        >\n+          <Text style={styles.cardTitle}>{item.title}</Text>\n+          <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+        </Pressable>\n+      )}\n+      ListEmptyComponent={\n+        <Text style={styles.emptyText}>\n+          You haven't joined any meals yet.\n+        </Text>\n+      }\n       />\n-\n-      {/* üïì Past Meals You Joined */}\n-      <Text style={styles.header}>üïì Past Meals You Joined</Text>\n-      <FlatList\n-        data={pastJoinedMeals}\n-        keyExtractor={(item) => item.id ?? ''}\n-        renderItem={({ item }) => (\n-          <View style={styles.card}>\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={styles.emptyText}>No past meals yet.</Text>\n-        }\n-      />\n     </View>\n   );\n }\n \n@@ -243,16 +191,12 @@\n   deleteText: {\n     color: 'red',\n     fontWeight: '600',\n   },\n-  leaveText: {\n-    color: '#d9534f',\n-    fontWeight: '600',\n-  },\n   cardTitle: {\n     fontSize: 16,\n     fontWeight: '600',\n     marginBottom: 4,\n   },\n   center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n   emptyText: { textAlign: 'center', marginTop: 12, color: '#666' },\n-});\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748648717434,
            "name": "Commit-0",
            "content": "import {\n  View,\n  Text,\n  FlatList,\n  Pressable,\n  TextInput,\n  Alert,\n  StyleSheet,\n} from 'react-native';\nimport { useEffect, useState } from 'react';\nimport { ref, onValue, remove, update } from 'firebase/database';\nimport { db } from '../firebase';\nimport auth from '@react-native-firebase/auth';\nimport { useNavigation } from '@react-navigation/native';\nimport type { Meal } from '../types';\nimport type { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport type { RootStackParamList } from '../types';\n\nexport default function MyMealsScreen() {\n  const [myMeals, setMyMeals] = useState<Meal[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingMealId, setEditingMealId] = useState<string | null>(null);\n  const [editFields, setEditFields] = useState({\n    title: '',\n    location: '',\n    time: '',\n    budget: '',\n    cuisine: '',\n  });\n\n  const user = auth().currentUser;\n  const userId = user?.uid;\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n\n  useEffect(() => {\n    if (!userId) return;\n\n    const mealRef = ref(db, 'meals');\n    const unsubscribe = onValue(mealRef, (snapshot) => {\n      const data = snapshot.val();\n      if (!data) return;\n\n      const meals = Object.entries(data)\n        .map(([id, meal]: [string, any]) => ({ id, ...meal }))\n        .filter((meal) => meal.creatorId === userId);\n\n      setMyMeals(meals);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [userId]);\n\n  const handleDelete = (mealId: string) => {\n    Alert.alert('Delete Meal', 'Are you sure you want to delete this meal?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Delete',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            await remove(ref(db, `meals/${mealId}`));\n            alert('Meal deleted');\n          } catch (e) {\n            console.error('Failed to delete meal:', e);\n            alert('Failed to delete meal.');\n          }\n        },\n      },\n    ]);\n  };\n\n  const handleEdit = (meal: Meal) => {\n    setEditingMealId(meal.id);\n    setEditFields({\n      title: meal.title,\n      location: meal.location,\n      time: meal.time,\n      budget: meal.budget,\n      cuisine: meal.cuisine,\n    });\n  };\n\n  const handleSave = async (mealId: string) => {\n    try {\n      await update(ref(db, `meals/${mealId}`), editFields);\n      setEditingMealId(null);\n      alert('Meal updated!');\n    } catch (err) {\n      console.error('Update failed:', err);\n      alert('Failed to update meal.');\n    }\n  };\n\n  if (!userId) return null;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>üç± My Created Meals</Text>\n      {loading && <Text>Loading...</Text>}\n      {myMeals.length === 0 && !loading && (\n        <Text style={styles.empty}>You haven‚Äôt created any meals yet.</Text>\n      )}\n      <FlatList\n        data={myMeals}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <View style={styles.card}>\n            <Text style={styles.mealTitle}>{item.title}</Text>\n            <Text style={styles.meta}>üìç {item.location} ¬∑ {item.time}</Text>\n\n            <View style={styles.actions}>\n              <Pressable onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}>\n                <Text style={styles.link}>üí¨ Chat</Text>\n              </Pressable>\n              <Pressable onPress={() => handleEdit(item)}>\n                <Text style={styles.edit}>‚úè Edit</Text>\n              </Pressable>\n              <Pressable onPress={() => handleDelete(item.id)}>\n                <Text style={styles.delete}>üóë Delete</Text>\n              </Pressable>\n              <Pressable onPress={() => navigation.navigate('EditMeal', { meal: item })}>\n                <Text style={styles.edit}>‚úè Edit</Text>\n              </Pressable>\n            </View>\n\n            {editingMealId === item.id && (\n              <View style={styles.editForm}>\n                <TextInput\n                  style={styles.input}\n                  value={editFields.title}\n                  onChangeText={(text) =>\n                    setEditFields((prev) => ({ ...prev, title: text }))\n                  }\n                  placeholder=\"Title\"\n                />\n                <TextInput\n                  style={styles.input}\n                  value={editFields.location}\n                  onChangeText={(text) =>\n                    setEditFields((prev) => ({ ...prev, location: text }))\n                  }\n                  placeholder=\"Location\"\n                />\n                <TextInput\n                  style={styles.input}\n                  value={editFields.time}\n                  onChangeText={(text) =>\n                    setEditFields((prev) => ({ ...prev, time: text }))\n                  }\n                  placeholder=\"Time\"\n                />\n                <TextInput\n                  style={styles.input}\n                  value={editFields.budget}\n                  onChangeText={(text) =>\n                    setEditFields((prev) => ({ ...prev, budget: text }))\n                  }\n                  placeholder=\"Budget\"\n                />\n                <TextInput\n                  style={styles.input}\n                  value={editFields.cuisine}\n                  onChangeText={(text) =>\n                    setEditFields((prev) => ({ ...prev, cuisine: text }))\n                  }\n                  placeholder=\"Cuisine\"\n                />\n\n                <View style={styles.editButtons}>\n                  <Pressable onPress={() => handleSave(item.id)} style={styles.saveBtn}>\n                    <Text style={styles.saveText}>Save</Text>\n                  </Pressable>\n                  <Pressable onPress={() => setEditingMealId(null)}>\n                    <Text style={styles.cancelText}>Cancel</Text>\n                  </Pressable>\n                </View>\n              </View>\n            )}\n          </View>\n        )}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n  card: {\n    padding: 14,\n    backgroundColor: '#f9f9f9',\n    borderRadius: 10,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: '#eee',\n  },\n  mealTitle: { fontSize: 16, fontWeight: '600' },\n  meta: { color: '#666', marginTop: 4 },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 10,\n  },\n  link: { color: '#007aff', fontWeight: '600' },\n  edit: { color: '#ff9500', fontWeight: '600' },\n  delete: { color: '#ff3b30', fontWeight: '600' },\n  empty: { textAlign: 'center', marginTop: 30, color: '#888' },\n\n  editForm: { marginTop: 12 },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 6,\n    padding: 10,\n    marginBottom: 8,\n    backgroundColor: '#fff',\n  },\n  editButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 6,\n  },\n  saveBtn: {\n    backgroundColor: '#007aff',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 6,\n  },\n  saveText: { color: 'white', fontWeight: 'bold' },\n  cancelText: { color: '#888', marginLeft: 10, marginTop: 10 },\n});\n"
        }
    ]
}