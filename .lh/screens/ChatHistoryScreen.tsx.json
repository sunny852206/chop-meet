{
    "sourceFile": "screens/ChatHistoryScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1748644549760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748644855077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,19 @@\n import { ref, get } from 'firebase/database';\n import { db } from '../firebase';\n import auth from '@react-native-firebase/auth';\n import { useNavigation } from '@react-navigation/native';\n+import type { Meal, ChatMessage } from '../types'\n \n export default function ChatHistoryScreen() {\n   const [joinedMeals, setJoinedMeals] = useState([]);\n   const [loading, setLoading] = useState(true);\n   const [error, setError] = useState(null);\n   const navigation = useNavigation();\n   const userId = auth().currentUser?.uid;\n+  const data = snapshot.val() as Record<string, Meal>;\n \n+\n   useEffect(() => {\n     if (!userId) return;\n \n     const fetchJoinedMeals = async () => {\n"
                },
                {
                    "date": 1748645612310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,26 +9,35 @@\n import { ref, get } from 'firebase/database';\n import { db } from '../firebase';\n import auth from '@react-native-firebase/auth';\n import { useNavigation } from '@react-navigation/native';\n-import type { Meal, ChatMessage } from '../types'\n+import type { Meal, ChatMessage } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types';\n \n+\n export default function ChatHistoryScreen() {\n-  const [joinedMeals, setJoinedMeals] = useState([]);\n+  const [joinedMeals, setJoinedMeals] = useState<\n+    (Meal & {\n+        lastMessage: ChatMessage | null;\n+        unreadCount: number;\n+    })[]\n+    >([]);\n   const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState(null);\n-  const navigation = useNavigation();\n+  const [error, setError] = useState<string | null>(null);\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n   const userId = auth().currentUser?.uid;\n-  const data = snapshot.val() as Record<string, Meal>;\n+  \n \n \n+\n   useEffect(() => {\n     if (!userId) return;\n \n     const fetchJoinedMeals = async () => {\n       try {\n         const snapshot = await get(ref(db, 'meals'));\n-        const data = snapshot.val();\n+        const data = snapshot.val() as Record<string, Meal>;\n \n         if (!data) return;\n \n         const meals = await Promise.all(\n@@ -41,19 +50,18 @@\n               let lastMessage = null;\n               let unreadCount = 0;\n \n               if (messages) {\n-                const sorted = Object.values(messages).sort(\n-                  (a, b) => b.timestamp - a.timestamp\n-                );\n+                const messages = msgSnap.val() as Record<string, ChatMessage>;\n+                const sorted = Object.values(messages).sort((a, b) => b.timestamp - a.timestamp);\n                 lastMessage = sorted[sorted.length - 1];\n \n                 unreadCount = Object.values(messages).filter(\n                   (msg) => !msg.readBy?.includes(userId) && msg.senderId !== userId\n                 ).length;\n               }\n \n-              return { id, ...meal, lastMessage, unreadCount };\n+              return { ...meal, id, lastMessage, unreadCount };\n             })\n         );\n \n         setJoinedMeals(meals);\n"
                },
                {
                    "date": 1748650450933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n   StyleSheet,\n } from 'react-native';\n import { useEffect, useState } from 'react';\n import { ref, get } from 'firebase/database';\n-import { db } from '../firebase';\n-import auth from '@react-native-firebase/auth';\n+import { db, auth } from '../firebase'; \n+\n import { useNavigation } from '@react-navigation/native';\n import type { Meal, ChatMessage } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RootStackParamList } from '../types';\n@@ -24,9 +24,9 @@\n     >([]);\n   const [loading, setLoading] = useState(true);\n   const [error, setError] = useState<string | null>(null);\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const userId = auth().currentUser?.uid;\n+  const userId = auth.currentUser?.uid;\n   \n \n \n \n"
                },
                {
                    "date": 1749534032696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n         keyExtractor={(item) => item.id}\n         renderItem={({ item }) => (\n           <Pressable\n             style={styles.itemWrapper}\n-            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n+            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id, mealTitle: item.title })}\n           >\n             <View style={styles.item}>\n               <View style={{ flex: 1 }}>\n                 <Text style={styles.mealTitle}>{item.title}</Text>\n"
                },
                {
                    "date": 1749537364229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,53 +30,58 @@\n \n \n \n   useEffect(() => {\n-    if (!userId) return;\n+  if (!userId) return;\n \n-    const fetchJoinedMeals = async () => {\n-      try {\n-        const snapshot = await get(ref(db, 'meals'));\n-        const data = snapshot.val() as Record<string, Meal>;\n+  const fetchMeals = async () => {\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n+      const data = snapshot.val() as Record<string, Meal>;\n \n-        if (!data) return;\n+      if (!data) return;\n \n-        const meals = await Promise.all(\n-          Object.entries(data)\n-            .filter(([_, meal]) => meal.joinedIds?.includes(userId))\n-            .map(async ([id, meal]) => {\n-              const msgSnap = await get(ref(db, `messages/${id}`));\n-              const messages = msgSnap.val();\n+      const meals = await Promise.all(\n+        Object.entries(data)\n+          .filter(([_, meal]) =>\n+            meal.creatorId === userId || meal.joinedIds?.includes(userId)\n+          )\n+          .map(async ([id, meal]) => {\n+            const msgSnap = await get(ref(db, `messages/${id}`));\n+            const messages = msgSnap.val();\n \n-              let lastMessage = null;\n-              let unreadCount = 0;\n+            let lastMessage = null;\n+            let unreadCount = 0;\n \n-              if (messages) {\n-                const messages = msgSnap.val() as Record<string, ChatMessage>;\n-                const sorted = Object.values(messages).sort((a, b) => b.timestamp - a.timestamp);\n-                lastMessage = sorted[sorted.length - 1];\n+            if (messages) {\n+              const sorted = Object.values(messages as Record<string, ChatMessage>)\n+                .sort((a, b) => b.timestamp - a.timestamp);\n \n-                unreadCount = Object.values(messages).filter(\n-                  (msg) => !msg.readBy?.includes(userId) && msg.senderId !== userId\n-                ).length;\n-              }\n+              lastMessage = sorted[sorted.length - 1];\n \n-              return { ...meal, id, lastMessage, unreadCount };\n-            })\n-        );\n+              unreadCount = sorted.filter(\n+                (msg) =>\n+                  !msg.readBy?.includes(userId) &&\n+                  msg.senderId !== userId\n+              ).length;\n+            }\n \n-        setJoinedMeals(meals);\n-      } catch (e) {\n-        console.error('Error loading meals:', e);\n-        setError('Failed to load meals.');\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n+            return { ...meal, id, lastMessage, unreadCount };\n+          })\n+      );\n \n-    fetchJoinedMeals();\n-  }, [userId]);\n+      setJoinedMeals(meals);\n+    } catch (e) {\n+      console.error('Error loading meals:', e);\n+      setError('Failed to load meals.');\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n \n+  fetchMeals();\n+}, [userId]);\n+\n   if (!userId) return null;\n \n   return (\n     <View style={styles.container}>\n"
                }
            ],
            "date": 1748644549760,
            "name": "Commit-0",
            "content": "import {\n  View,\n  Text,\n  FlatList,\n  Pressable,\n  StyleSheet,\n} from 'react-native';\nimport { useEffect, useState } from 'react';\nimport { ref, get } from 'firebase/database';\nimport { db } from '../firebase';\nimport auth from '@react-native-firebase/auth';\nimport { useNavigation } from '@react-navigation/native';\n\nexport default function ChatHistoryScreen() {\n  const [joinedMeals, setJoinedMeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigation = useNavigation();\n  const userId = auth().currentUser?.uid;\n\n  useEffect(() => {\n    if (!userId) return;\n\n    const fetchJoinedMeals = async () => {\n      try {\n        const snapshot = await get(ref(db, 'meals'));\n        const data = snapshot.val();\n\n        if (!data) return;\n\n        const meals = await Promise.all(\n          Object.entries(data)\n            .filter(([_, meal]) => meal.joinedIds?.includes(userId))\n            .map(async ([id, meal]) => {\n              const msgSnap = await get(ref(db, `messages/${id}`));\n              const messages = msgSnap.val();\n\n              let lastMessage = null;\n              let unreadCount = 0;\n\n              if (messages) {\n                const sorted = Object.values(messages).sort(\n                  (a, b) => b.timestamp - a.timestamp\n                );\n                lastMessage = sorted[sorted.length - 1];\n\n                unreadCount = Object.values(messages).filter(\n                  (msg) => !msg.readBy?.includes(userId) && msg.senderId !== userId\n                ).length;\n              }\n\n              return { id, ...meal, lastMessage, unreadCount };\n            })\n        );\n\n        setJoinedMeals(meals);\n      } catch (e) {\n        console.error('Error loading meals:', e);\n        setError('Failed to load meals.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchJoinedMeals();\n  }, [userId]);\n\n  if (!userId) return null;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>💬 Chat History</Text>\n      {loading && <Text>Loading...</Text>}\n      {error && <Text style={styles.error}>{error}</Text>}\n      {!loading && joinedMeals.length === 0 && (\n        <Text style={styles.empty}>You haven't joined any meals yet.</Text>\n      )}\n      <FlatList\n        data={joinedMeals}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Pressable\n            style={styles.itemWrapper}\n            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n          >\n            <View style={styles.item}>\n              <View style={{ flex: 1 }}>\n                <Text style={styles.mealTitle}>{item.title}</Text>\n                <Text style={styles.meta}>📍 {item.location} · {item.time}</Text>\n                <Text style={styles.preview} numberOfLines={1}>\n                  {item.lastMessage\n                    ? `${item.lastMessage.senderName || 'Someone'}: ${item.lastMessage.text || '[No text]'}`\n                    : 'No messages yet'}\n                </Text>\n              </View>\n\n              {item.unreadCount > 0 && (\n                <View style={styles.unreadBubble}>\n                  <Text style={styles.unreadText}>{item.unreadCount}</Text>\n                </View>\n              )}\n            </View>\n          </Pressable>\n        )}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n  itemWrapper: { marginBottom: 12 },\n  item: {\n    padding: 14,\n    borderWidth: 1,\n    borderColor: '#eee',\n    borderRadius: 8,\n    backgroundColor: '#fafafa',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  mealTitle: { fontSize: 16, fontWeight: '600' },\n  meta: { color: '#555', marginTop: 4, fontSize: 13 },\n  preview: { color: '#333', marginTop: 6, fontSize: 14 },\n  error: { color: 'red', marginBottom: 12 },\n  empty: { textAlign: 'center', marginTop: 20, color: '#888' },\n  unreadBubble: {\n    backgroundColor: 'red',\n    borderRadius: 12,\n    minWidth: 24,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  unreadText: {\n    color: 'white',\n    fontWeight: 'bold',\n    fontSize: 12,\n  },\n});\n"
        }
    ]
}