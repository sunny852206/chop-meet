{
    "sourceFile": "screens/ChatRoomScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1748638244923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748639787743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,94 +1,153 @@\n-// screens/ChatRoomScreen.tsx\n-import React, { useState, useEffect } from 'react';\n import {\n   View,\n+  Text,\n   TextInput,\n+  Pressable,\n   FlatList,\n-  Text,\n-  Button,\n   StyleSheet,\n   KeyboardAvoidingView,\n   Platform,\n-} from 'react-native';\n-import { useRoute } from '@react-navigation/native';\n-import AsyncStorage from '@react-native-async-storage/async-storage';\n+} from \"react-native\";\n+import { useState, useEffect } from \"react\";\n+import AsyncStorage from \"@react-native-async-storage/async-storage\";\n+import { useRoute } from \"@react-navigation/native\";\n+import type { ChatMessage } from \"../types\";\n \n export default function ChatRoomScreen() {\n-  const route = useRoute<any>();\n-  const { mealId } = route.params;\n+  const route = useRoute();\n+  const { mealId } = route.params || {};\n \n-  const [messages, setMessages] = useState<{ id: string; sender: string; content: string }[]>([]);\n-  const [text, setText] = useState('');\n+  const [userId, setUserId] = useState(\"\");\n+  const [messages, setMessages] = useState<ChatMessage[]>([]);\n+  const [input, setInput] = useState(\"\");\n \n-  const storageKey = `chat_${mealId}`;\n+  useEffect(() => {\n+    const getUser = async () => {\n+      const id = await AsyncStorage.getItem(\"userId\");\n+      if (id) setUserId(id);\n+    };\n+    getUser();\n+  }, []);\n \n   useEffect(() => {\n-    // 讀取本地聊天紀錄\n     const loadMessages = async () => {\n-      const stored = await AsyncStorage.getItem(storageKey);\n-      if (stored) setMessages(JSON.parse(stored));\n+      const stored = await AsyncStorage.getItem(\"messages\");\n+      if (stored) {\n+        const all = JSON.parse(stored) as ChatMessage[];\n+        const filtered = all.filter((m) => m.mealId === mealId);\n+        setMessages(filtered);\n+      }\n     };\n     loadMessages();\n-  }, []);\n+  }, [mealId]);\n \n-  const sendMessage = async () => {\n-    if (!text.trim()) return;\n+  const handleSend = async () => {\n+    if (!input.trim()) return;\n \n-    const newMessage = {\n-      id: Date.now().toString(),\n-      sender: 'You',\n-      content: text.trim(),\n+    const newMessage: ChatMessage = {\n+      mealId,\n+      sender: userId,\n+      message: input.trim(),\n+      timestamp: new Date().toISOString(),\n     };\n \n-    const updatedMessages = [...messages, newMessage];\n-    setMessages(updatedMessages);\n-    setText('');\n+    const updated = [...messages, newMessage];\n+    setMessages(updated);\n+    setInput(\"\");\n \n-    await AsyncStorage.setItem(storageKey, JSON.stringify(updatedMessages));\n+    // Save to AsyncStorage\n+    const stored = await AsyncStorage.getItem(\"messages\");\n+    const all = stored ? JSON.parse(stored) : [];\n+    all.push(newMessage);\n+    await AsyncStorage.setItem(\"messages\", JSON.stringify(all));\n   };\n \n   return (\n     <KeyboardAvoidingView\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\n       style={styles.container}\n-      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n     >\n       <FlatList\n         data={messages}\n-        keyExtractor={(item) => item.id}\n+        keyExtractor={(item, index) => index.toString()}\n         renderItem={({ item }) => (\n-          <Text style={styles.message}>\n-            <Text style={styles.sender}>{item.sender}: </Text>\n-            {item.content}\n-          </Text>\n+          <View\n+            style={[\n+              styles.messageBubble,\n+              item.sender === userId ? styles.mine : styles.theirs,\n+            ]}\n+          >\n+            <Text style={styles.messageText}>{item.message}</Text>\n+            <Text style={styles.timestamp}>\n+              {new Date(item.timestamp).toLocaleTimeString()}\n+            </Text>\n+          </View>\n         )}\n+        contentContainerStyle={{ paddingBottom: 80 }}\n       />\n \n-      <TextInput\n-        style={styles.input}\n-        value={text}\n-        onChangeText={setText}\n-        placeholder=\"Type a message...\"\n-      />\n-      <Button title=\"Send\" onPress={sendMessage} />\n+      <View style={styles.inputRow}>\n+        <TextInput\n+          style={styles.input}\n+          placeholder=\"Type a message...\"\n+          value={input}\n+          onChangeText={setInput}\n+        />\n+        <Pressable style={styles.sendButton} onPress={handleSend}>\n+          <Text style={{ color: \"#fff\" }}>Send</Text>\n+        </Pressable>\n+      </View>\n     </KeyboardAvoidingView>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { padding: 16, flex: 1 },\n+  container: { flex: 1, backgroundColor: \"#fff\", padding: 10 },\n+  inputRow: {\n+    position: \"absolute\",\n+    bottom: 0,\n+    left: 0,\n+    right: 0,\n+    flexDirection: \"row\",\n+    padding: 10,\n+    backgroundColor: \"#f0f0f0\",\n+    borderTopWidth: 1,\n+    borderColor: \"#ccc\",\n+  },\n   input: {\n+    flex: 1,\n+    backgroundColor: \"#fff\",\n+    padding: 10,\n+    borderRadius: 8,\n     borderWidth: 1,\n-    borderColor: '#ccc',\n+    borderColor: \"#ccc\",\n+    marginRight: 8,\n+  },\n+  sendButton: {\n+    backgroundColor: \"#007aff\",\n+    paddingVertical: 10,\n+    paddingHorizontal: 16,\n+    borderRadius: 8,\n+  },\n+  messageBubble: {\n     padding: 10,\n-    marginTop: 10,\n-    marginBottom: 5,\n-    borderRadius: 6,\n+    borderRadius: 8,\n+    marginBottom: 10,\n+    maxWidth: \"70%\",\n   },\n-  message: {\n-    marginVertical: 4,\n-    fontSize: 16,\n+  mine: {\n+    backgroundColor: \"#dcf8c6\",\n+    alignSelf: \"flex-end\",\n   },\n-  sender: {\n-    fontWeight: 'bold',\n+  theirs: {\n+    backgroundColor: \"#eee\",\n+    alignSelf: \"flex-start\",\n   },\n+  messageText: { fontSize: 16 },\n+  timestamp: {\n+    fontSize: 10,\n+    color: \"#666\",\n+    marginTop: 4,\n+    textAlign: \"right\",\n+  },\n });\n"
                },
                {
                    "date": 1748640178381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,26 +10,29 @@\n } from \"react-native\";\n import { useState, useEffect } from \"react\";\n import AsyncStorage from \"@react-native-async-storage/async-storage\";\n import { useRoute } from \"@react-navigation/native\";\n-import type { ChatMessage } from \"../types\";\n+import type { ChatMessage, Meal } from \"../types\";\n \n export default function ChatRoomScreen() {\n   const route = useRoute();\n   const { mealId } = route.params || {};\n \n   const [userId, setUserId] = useState(\"\");\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\n   const [input, setInput] = useState(\"\");\n+  const [mealTitle, setMealTitle] = useState(\"\");\n \n+  // 取得 userId\n   useEffect(() => {\n     const getUser = async () => {\n       const id = await AsyncStorage.getItem(\"userId\");\n       if (id) setUserId(id);\n     };\n     getUser();\n   }, []);\n \n+  // 取得聊天訊息\n   useEffect(() => {\n     const loadMessages = async () => {\n       const stored = await AsyncStorage.getItem(\"messages\");\n       if (stored) {\n@@ -40,8 +43,21 @@\n     };\n     loadMessages();\n   }, [mealId]);\n \n+  // 顯示 meal title\n+  useEffect(() => {\n+    const loadMealTitle = async () => {\n+      const stored = await AsyncStorage.getItem(\"meals\");\n+      if (stored) {\n+        const meals = JSON.parse(stored) as Meal[];\n+        const target = meals.find((m) => m.id === mealId);\n+        if (target) setMealTitle(target.title);\n+      }\n+    };\n+    loadMealTitle();\n+  }, [mealId]);\n+\n   const handleSend = async () => {\n     if (!input.trim()) return;\n \n     const newMessage: ChatMessage = {\n@@ -54,9 +70,8 @@\n     const updated = [...messages, newMessage];\n     setMessages(updated);\n     setInput(\"\");\n \n-    // Save to AsyncStorage\n     const stored = await AsyncStorage.getItem(\"messages\");\n     const all = stored ? JSON.parse(stored) : [];\n     all.push(newMessage);\n     await AsyncStorage.setItem(\"messages\", JSON.stringify(all));\n@@ -66,8 +81,10 @@\n     <KeyboardAvoidingView\n       behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\n       style={styles.container}\n     >\n+      <Text style={styles.chatTitle}>{mealTitle || \"Chat Room\"}</Text>\n+\n       <FlatList\n         data={messages}\n         keyExtractor={(item, index) => index.toString()}\n         renderItem={({ item }) => (\n@@ -102,8 +119,15 @@\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, backgroundColor: \"#fff\", padding: 10 },\n+  chatTitle: {\n+    fontSize: 20,\n+    fontWeight: \"bold\",\n+    textAlign: \"center\",\n+    marginBottom: 10,\n+    color: \"#333\",\n+  },\n   inputRow: {\n     position: \"absolute\",\n     bottom: 0,\n     left: 0,\n"
                },
                {
                    "date": 1748641361115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  FlatList,\n+  StyleSheet,\n+  KeyboardAvoidingView,\n+  Platform,\n+} from \"react-native\";\n+import { useEffect, useState } from \"react\";\n+import { useRoute } from \"@react-navigation/native\";\n+import AsyncStorage from \"@react-native-async-storage/async-storage\";\n+import { db } from \"../firebase\";\n+import { ref, onValue, push, set, get } from \"firebase/database\";\n+import type { ChatMessage, Meal } from \"../types\";\n+\n+export default function ChatRoomScreen() {\n+  const route = useRoute();\n+  const { mealId } = route.params || {};\n+\n+  const [userId, setUserId] = useState(\"\");\n+  const [messages, setMessages] = useState<ChatMessage[]>([]);\n+  const [input, setInput] = useState(\"\");\n+  const [mealTitle, setMealTitle] = useState(\"Chat Room\");\n+\n+  // Get userId\n+  useEffect(() => {\n+    const loadUser = async () => {\n+      const uid = await AsyncStorage.getItem(\"userId\");\n+      if (uid) setUserId(uid);\n+    };\n+    loadUser();\n+  }, []);\n+\n+  // Get meal title\n+  useEffect(() => {\n+    const mealRef = ref(db, `meals/${mealId}`);\n+    get(mealRef).then((snapshot) => {\n+      if (snapshot.exists()) {\n+        const meal = snapshot.val() as Meal;\n+        setMealTitle(meal.title);\n+      }\n+    });\n+  }, [mealId]);\n+\n+  // Load messages\n+  useEffect(() => {\n+    const msgRef = ref(db, `messages/${mealId}`);\n+    const unsubscribe = onValue(msgRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const msgArray = Object.values(data) as ChatMessage[];\n+        setMessages(msgArray);\n+      } else {\n+        setMessages([]);\n+      }\n+    });\n+    return () => unsubscribe();\n+  }, [mealId]);\n+\n+  const handleSend = async () => {\n+    if (!input.trim()) return;\n+\n+    const newMsg: ChatMessage = {\n+      sender: userId,\n+      message: input.trim(),\n+      timestamp: new Date().toISOString(),\n+    };\n+\n+    const msgRef = push(ref(db, `messages/${mealId}`));\n+    await set(msgRef, newMsg);\n+\n+    setInput(\"\");\n+  };\n+\n+  return (\n+    <KeyboardAvoidingView\n+      style={styles.container}\n+      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\n+    >\n+      <Text style={styles.title}>{mealTitle}</Text>\n+\n+      <FlatList\n+        data={messages}\n+        keyExtractor={(_, idx) => idx.toString()}\n+        renderItem={({ item }) => (\n+          <View\n+            style={[\n+              styles.bubble,\n+              item.sender === userId ? styles.mine : styles.theirs,\n+            ]}\n+          >\n+            <Text style={styles.messageText}>{item.message}</Text>\n+            <Text style={styles.timestamp}>\n+              {new Date(item.timestamp).toLocaleTimeString()}\n+            </Text>\n+          </View>\n+        )}\n+        contentContainerStyle={{ padding: 10, paddingBottom: 100 }}\n+      />\n+\n+      <View style={styles.inputRow}>\n+        <TextInput\n+          style={styles.input}\n+          placeholder=\"Type a message...\"\n+          value={input}\n+          onChangeText={setInput}\n+        />\n+        <Pressable style={styles.sendButton} onPress={handleSend}>\n+          <Text style={{ color: \"#fff\" }}>Send</Text>\n+        </Pressable>\n+      </View>\n+    </KeyboardAvoidingView>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: \"#fff\" },\n+  title: {\n+    fontSize: 18,\n+    fontWeight: \"bold\",\n+    textAlign: \"center\",\n+    paddingVertical: 12,\n+    borderBottomWidth: 1,\n+    borderColor: \"#eee\",\n+    backgroundColor: \"#f9f9f9\",\n+  },\n+  bubble: {\n+    padding: 10,\n+    borderRadius: 8,\n+    marginBottom: 10,\n+    maxWidth: \"75%\",\n+  },\n+  mine: {\n+    alignSelf: \"flex-end\",\n+    backgroundColor: \"#dcf8c6\",\n+  },\n+  theirs: {\n+    alignSelf: \"flex-start\",\n+    backgroundColor: \"#eee\",\n+  },\n+  messageText: { fontSize: 16 },\n+  timestamp: {\n+    fontSize: 10,\n+    color: \"#666\",\n+    marginTop: 4,\n+    textAlign: \"right\",\n+  },\n+  inputRow: {\n+    position: \"absolute\",\n+    bottom: 0,\n+    left: 0,\n+    right: 0,\n+    flexDirection: \"row\",\n+    padding: 10,\n+    backgroundColor: \"#f0f0f0\",\n+    borderTopWidth: 1,\n+    borderColor: \"#ccc\",\n+  },\n+  input: {\n+    flex: 1,\n+    backgroundColor: \"#fff\",\n+    padding: 10,\n+    borderRadius: 8,\n+    borderWidth: 1,\n+    borderColor: \"#ccc\",\n+    marginRight: 8,\n+  },\n+  sendButton: {\n+    backgroundColor: \"#007aff\",\n+    paddingVertical: 10,\n+    paddingHorizontal: 16,\n+    borderRadius: 8,\n+  },\n+});\n"
                },
                {
                    "date": 1748643094769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,353 +1,128 @@\n import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  FlatList,\n-  StyleSheet,\n-  KeyboardAvoidingView,\n-  Platform,\n-} from \"react-native\";\n-import { useEffect, useState } from \"react\";\n-import { useRoute } from \"@react-navigation/native\";\n-import AsyncStorage from \"@react-native-async-storage/async-storage\";\n-import { db } from \"../firebase\";\n-import { ref, onValue, push, set, get } from \"firebase/database\";\n-import type { ChatMessage, Meal } from \"../types\";\n+  View, Text, TextInput, Pressable, FlatList, Image,\n+} from 'react-native';\n+import { useEffect, useState } from 'react';\n+import { ref, onValue, push, set, get, update } from 'firebase/database';\n+import { uploadBytes, getDownloadURL, ref as storageRef } from 'firebase/storage';\n+import { db, storage } from '../firebase';\n+import * as ImagePicker from 'react-native-image-picker';\n+import EmojiSelector from 'react-native-emoji-selector';\n+import auth from '@react-native-firebase/auth';\n \n-export default function ChatRoomScreen() {\n-  const route = useRoute();\n-  const { mealId } = route.params || {};\n+export default function ChatRoomScreen({ route }) {\n+  const { mealId } = route.params;\n+  const [userId, setUserId] = useState('');\n+  const [displayName, setDisplayName] = useState('');\n+  const [messages, setMessages] = useState([]);\n+  const [input, setInput] = useState('');\n+  const [showEmoji, setShowEmoji] = useState(false);\n \n-  const [userId, setUserId] = useState(\"\");\n-  const [messages, setMessages] = useState<ChatMessage[]>([]);\n-  const [input, setInput] = useState(\"\");\n-  const [mealTitle, setMealTitle] = useState(\"Chat Room\");\n-\n-  // Get userId\n   useEffect(() => {\n-    const loadUser = async () => {\n-      const uid = await AsyncStorage.getItem(\"userId\");\n-      if (uid) setUserId(uid);\n-    };\n-    loadUser();\n+    const uid = auth().currentUser.uid;\n+    setUserId(uid);\n+    get(ref(db, `users/${uid}`)).then(snapshot => {\n+      if (snapshot.exists()) setDisplayName(snapshot.val().name);\n+    });\n   }, []);\n \n-  // Get meal title\n   useEffect(() => {\n-    const mealRef = ref(db, `meals/${mealId}`);\n-    get(mealRef).then((snapshot) => {\n-      if (snapshot.exists()) {\n-        const meal = snapshot.val() as Meal;\n-        setMealTitle(meal.title);\n-      }\n-    });\n-  }, [mealId]);\n-\n-  // Load messages\n-  useEffect(() => {\n     const msgRef = ref(db, `messages/${mealId}`);\n-    const unsubscribe = onValue(msgRef, (snapshot) => {\n+    onValue(msgRef, snapshot => {\n       const data = snapshot.val();\n       if (data) {\n-        const msgArray = Object.values(data) as ChatMessage[];\n-        setMessages(msgArray);\n+        const messageKeys = Object.keys(data);\n+        const messageArray = Object.values(data);\n+        setMessages(messageArray);\n+\n+        const updates = {};\n+        messageArray.forEach((msg, index) => {\n+          if (!msg.readBy?.includes(userId)) {\n+            const msgKey = messageKeys[index];\n+            updates[`messages/${mealId}/${msgKey}/readBy`] = [...(msg.readBy || []), userId];\n+          }\n+        });\n+        if (Object.keys(updates).length > 0) {\n+          update(ref(db), updates);\n+        }\n       } else {\n         setMessages([]);\n       }\n     });\n-    return () => unsubscribe();\n-  }, [mealId]);\n+  }, [mealId, userId]);\n \n-  const handleSend = async () => {\n-    if (!input.trim()) return;\n-\n-    const newMsg: ChatMessage = {\n+  const handleSend = async (msg) => {\n+    const newMsg = {\n       sender: userId,\n-      message: input.trim(),\n+      senderName: displayName,\n+      message: msg,\n       timestamp: new Date().toISOString(),\n+      readBy: [userId],\n     };\n+    const newRef = push(ref(db, `messages/${mealId}`));\n+    await set(newRef, newMsg);\n+    setInput('');\n+  };\n \n-    const msgRef = push(ref(db, `messages/${mealId}`));\n-    await set(msgRef, newMsg);\n-\n-    setInput(\"\");\n+  const sendImage = async () => {\n+    ImagePicker.launchImageLibrary({ mediaType: 'photo' }, async (res) => {\n+      if (res.assets && res.assets.length > 0) {\n+        const asset = res.assets[0];\n+        const imgRef = storageRef(storage, `chatImages/${mealId}/${Date.now()}.jpg`);\n+        const blob = await fetch(asset.uri).then(r => r.blob());\n+        await uploadBytes(imgRef, blob);\n+        const url = await getDownloadURL(imgRef);\n+        const newMsg = {\n+          sender: userId,\n+          senderName: displayName,\n+          imageUrl: url,\n+          timestamp: new Date().toISOString(),\n+          readBy: [userId],\n+        };\n+        const newRef = push(ref(db, `messages/${mealId}`));\n+        await set(newRef, newMsg);\n+      }\n+    });\n   };\n \n   return (\n-    <KeyboardAvoidingView\n-      style={styles.container}\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\n-    >\n-      <Text style={styles.title}>{mealTitle}</Text>\n-\n+    <View style={{ flex: 1 }}>\n       <FlatList\n         data={messages}\n-        keyExtractor={(_, idx) => idx.toString()}\n+        keyExtractor={(_, i) => i.toString()}\n         renderItem={({ item }) => (\n-          <View\n-            style={[\n-              styles.bubble,\n-              item.sender === userId ? styles.mine : styles.theirs,\n-            ]}\n-          >\n-            <Text style={styles.messageText}>{item.message}</Text>\n-            <Text style={styles.timestamp}>\n-              {new Date(item.timestamp).toLocaleTimeString()}\n+          <View style={{ margin: 8 }}>\n+            <Text style={{ fontWeight: 'bold' }}>{item.senderName}</Text>\n+            {item.message && <Text>{item.message}</Text>}\n+            {item.imageUrl && (\n+              <Image source={{ uri: item.imageUrl }} style={{ width: 200, height: 200 }} />\n+            )}\n+            <Text style={{ fontSize: 12, color: '#888' }}>\n+              👁 Seen by {item.readBy?.length || 0}\n             </Text>\n           </View>\n         )}\n-        contentContainerStyle={{ padding: 10, paddingBottom: 100 }}\n       />\n \n-      <View style={styles.inputRow}>\n-        <TextInput\n-          style={styles.input}\n-          placeholder=\"Type a message...\"\n-          value={input}\n-          onChangeText={setInput}\n+      {showEmoji && (\n+        <EmojiSelector\n+          onEmojiSelected={(emoji) => {\n+            setInput((prev) => prev + emoji);\n+            setShowEmoji(false);\n+          }}\n+          showSearchBar={false}\n         />\n-        <Pressable style={styles.sendButton} onPress={handleSend}>\n-          <Text style={{ color: \"#fff\" }}>Send</Text>\n-        </Pressable>\n-      </View>\n-    </KeyboardAvoidingView>\n-  );\n-}\n+      )}\n \n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: \"#fff\" },\n-  title: {\n-    fontSize: 18,\n-    fontWeight: \"bold\",\n-    textAlign: \"center\",\n-    paddingVertical: 12,\n-    borderBottomWidth: 1,\n-    borderColor: \"#eee\",\n-    backgroundColor: \"#f9f9f9\",\n-  },\n-  bubble: {\n-    padding: 10,\n-    borderRadius: 8,\n-    marginBottom: 10,\n-    maxWidth: \"75%\",\n-  },\n-  mine: {\n-    alignSelf: \"flex-end\",\n-    backgroundColor: \"#dcf8c6\",\n-  },\n-  theirs: {\n-    alignSelf: \"flex-start\",\n-    backgroundColor: \"#eee\",\n-  },\n-  messageText: { fontSize: 16 },\n-  timestamp: {\n-    fontSize: 10,\n-    color: \"#666\",\n-    marginTop: 4,\n-    textAlign: \"right\",\n-  },\n-  inputRow: {\n-    position: \"absolute\",\n-    bottom: 0,\n-    left: 0,\n-    right: 0,\n-    flexDirection: \"row\",\n-    padding: 10,\n-    backgroundColor: \"#f0f0f0\",\n-    borderTopWidth: 1,\n-    borderColor: \"#ccc\",\n-  },\n-  input: {\n-    flex: 1,\n-    backgroundColor: \"#fff\",\n-    padding: 10,\n-    borderRadius: 8,\n-    borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    marginRight: 8,\n-  },\n-  sendButton: {\n-    backgroundColor: \"#007aff\",\n-    paddingVertical: 10,\n-    paddingHorizontal: 16,\n-    borderRadius: 8,\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  FlatList,\n-  StyleSheet,\n-  KeyboardAvoidingView,\n-  Platform,\n-} from \"react-native\";\n-import { useState, useEffect } from \"react\";\n-import AsyncStorage from \"@react-native-async-storage/async-storage\";\n-import { useRoute } from \"@react-navigation/native\";\n-import type { ChatMessage, Meal } from \"../types\";\n-\n-export default function ChatRoomScreen() {\n-  const route = useRoute();\n-  const { mealId } = route.params || {};\n-\n-  const [userId, setUserId] = useState(\"\");\n-  const [messages, setMessages] = useState<ChatMessage[]>([]);\n-  const [input, setInput] = useState(\"\");\n-  const [mealTitle, setMealTitle] = useState(\"\");\n-\n-  // 取得 userId\n-  useEffect(() => {\n-    const getUser = async () => {\n-      const id = await AsyncStorage.getItem(\"userId\");\n-      if (id) setUserId(id);\n-    };\n-    getUser();\n-  }, []);\n-\n-  // 取得聊天訊息\n-  useEffect(() => {\n-    const loadMessages = async () => {\n-      const stored = await AsyncStorage.getItem(\"messages\");\n-      if (stored) {\n-        const all = JSON.parse(stored) as ChatMessage[];\n-        const filtered = all.filter((m) => m.mealId === mealId);\n-        setMessages(filtered);\n-      }\n-    };\n-    loadMessages();\n-  }, [mealId]);\n-\n-  // 顯示 meal title\n-  useEffect(() => {\n-    const loadMealTitle = async () => {\n-      const stored = await AsyncStorage.getItem(\"meals\");\n-      if (stored) {\n-        const meals = JSON.parse(stored) as Meal[];\n-        const target = meals.find((m) => m.id === mealId);\n-        if (target) setMealTitle(target.title);\n-      }\n-    };\n-    loadMealTitle();\n-  }, [mealId]);\n-\n-  const handleSend = async () => {\n-    if (!input.trim()) return;\n-\n-    const newMessage: ChatMessage = {\n-      mealId,\n-      sender: userId,\n-      message: input.trim(),\n-      timestamp: new Date().toISOString(),\n-    };\n-\n-    const updated = [...messages, newMessage];\n-    setMessages(updated);\n-    setInput(\"\");\n-\n-    const stored = await AsyncStorage.getItem(\"messages\");\n-    const all = stored ? JSON.parse(stored) : [];\n-    all.push(newMessage);\n-    await AsyncStorage.setItem(\"messages\", JSON.stringify(all));\n-  };\n-\n-  return (\n-    <KeyboardAvoidingView\n-      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\n-      style={styles.container}\n-    >\n-      <Text style={styles.chatTitle}>{mealTitle || \"Chat Room\"}</Text>\n-\n-      <FlatList\n-        data={messages}\n-        keyExtractor={(item, index) => index.toString()}\n-        renderItem={({ item }) => (\n-          <View\n-            style={[\n-              styles.messageBubble,\n-              item.sender === userId ? styles.mine : styles.theirs,\n-            ]}\n-          >\n-            <Text style={styles.messageText}>{item.message}</Text>\n-            <Text style={styles.timestamp}>\n-              {new Date(item.timestamp).toLocaleTimeString()}\n-            </Text>\n-          </View>\n-        )}\n-        contentContainerStyle={{ paddingBottom: 80 }}\n-      />\n-\n-      <View style={styles.inputRow}>\n+      <View style={{ flexDirection: 'row', padding: 10 }}>\n         <TextInput\n-          style={styles.input}\n-          placeholder=\"Type a message...\"\n           value={input}\n           onChangeText={setInput}\n+          style={{ flex: 1, borderWidth: 1, borderColor: '#ccc', borderRadius: 8, padding: 10 }}\n         />\n-        <Pressable style={styles.sendButton} onPress={handleSend}>\n-          <Text style={{ color: \"#fff\" }}>Send</Text>\n-        </Pressable>\n+        <Pressable onPress={() => handleSend(input)}><Text>Send</Text></Pressable>\n+        <Pressable onPress={() => setShowEmoji(true)}><Text>😊</Text></Pressable>\n+        <Pressable onPress={sendImage}><Text>🖼️</Text></Pressable>\n       </View>\n-    </KeyboardAvoidingView>\n+    </View>\n   );\n }\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: \"#fff\", padding: 10 },\n-  chatTitle: {\n-    fontSize: 20,\n-    fontWeight: \"bold\",\n-    textAlign: \"center\",\n-    marginBottom: 10,\n-    color: \"#333\",\n-  },\n-  inputRow: {\n-    position: \"absolute\",\n-    bottom: 0,\n-    left: 0,\n-    right: 0,\n-    flexDirection: \"row\",\n-    padding: 10,\n-    backgroundColor: \"#f0f0f0\",\n-    borderTopWidth: 1,\n-    borderColor: \"#ccc\",\n-  },\n-  input: {\n-    flex: 1,\n-    backgroundColor: \"#fff\",\n-    padding: 10,\n-    borderRadius: 8,\n-    borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    marginRight: 8,\n-  },\n-  sendButton: {\n-    backgroundColor: \"#007aff\",\n-    paddingVertical: 10,\n-    paddingHorizontal: 16,\n-    borderRadius: 8,\n-  },\n-  messageBubble: {\n-    padding: 10,\n-    borderRadius: 8,\n-    marginBottom: 10,\n-    maxWidth: \"70%\",\n-  },\n-  mine: {\n-    backgroundColor: \"#dcf8c6\",\n-    alignSelf: \"flex-end\",\n-  },\n-  theirs: {\n-    backgroundColor: \"#eee\",\n-    alignSelf: \"flex-start\",\n-  },\n-  messageText: { fontSize: 16 },\n-  timestamp: {\n-    fontSize: 10,\n-    color: \"#666\",\n-    marginTop: 4,\n-    textAlign: \"right\",\n-  },\n-});\n"
                },
                {
                    "date": 1748644584475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,128 +1,188 @@\n import {\n-  View, Text, TextInput, Pressable, FlatList, Image,\n+  View,\n+  Text,\n+  TextInput,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  KeyboardAvoidingView,\n+  Platform,\n } from 'react-native';\n-import { useEffect, useState } from 'react';\n-import { ref, onValue, push, set, get, update } from 'firebase/database';\n-import { uploadBytes, getDownloadURL, ref as storageRef } from 'firebase/storage';\n-import { db, storage } from '../firebase';\n-import * as ImagePicker from 'react-native-image-picker';\n-import EmojiSelector from 'react-native-emoji-selector';\n+import { useEffect, useRef, useState } from 'react';\n+import { ref, onValue, push, update, get } from 'firebase/database';\n+import { db } from '../firebase';\n import auth from '@react-native-firebase/auth';\n+import { useRoute } from '@react-navigation/native';\n \n-export default function ChatRoomScreen({ route }) {\n+export default function ChatRoomScreen() {\n+  const route = useRoute();\n   const { mealId } = route.params;\n-  const [userId, setUserId] = useState('');\n-  const [displayName, setDisplayName] = useState('');\n+  const user = auth().currentUser;\n+  const userId = user?.uid;\n+  const senderName = user?.displayName || 'You';\n+\n   const [messages, setMessages] = useState([]);\n   const [input, setInput] = useState('');\n-  const [showEmoji, setShowEmoji] = useState(false);\n \n-  useEffect(() => {\n-    const uid = auth().currentUser.uid;\n-    setUserId(uid);\n-    get(ref(db, `users/${uid}`)).then(snapshot => {\n-      if (snapshot.exists()) setDisplayName(snapshot.val().name);\n-    });\n-  }, []);\n+  const flatListRef = useRef();\n \n+  // 📥 即時抓取訊息\n   useEffect(() => {\n     const msgRef = ref(db, `messages/${mealId}`);\n-    onValue(msgRef, snapshot => {\n+    const unsubscribe = onValue(msgRef, (snapshot) => {\n       const data = snapshot.val();\n-      if (data) {\n-        const messageKeys = Object.keys(data);\n-        const messageArray = Object.values(data);\n-        setMessages(messageArray);\n+      if (!data) return;\n \n+      const sorted = Object.entries(data)\n+        .map(([id, msg]) => ({ id, ...msg }))\n+        .sort((a, b) => a.timestamp - b.timestamp);\n+\n+      setMessages(sorted);\n+    });\n+\n+    return () => unsubscribe(); // 清除監聽器\n+  }, [mealId]);\n+\n+  // ✅ 將所有未讀訊息標記為已讀\n+  useEffect(() => {\n+    const markMessagesAsRead = async () => {\n+      if (!userId || !mealId) return;\n+\n+      try {\n+        const snapshot = await get(ref(db, `messages/${mealId}`));\n+        const data = snapshot.val();\n+        if (!data) return;\n+\n         const updates = {};\n-        messageArray.forEach((msg, index) => {\n+        Object.entries(data).forEach(([msgId, msg]) => {\n           if (!msg.readBy?.includes(userId)) {\n-            const msgKey = messageKeys[index];\n-            updates[`messages/${mealId}/${msgKey}/readBy`] = [...(msg.readBy || []), userId];\n+            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n+            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n           }\n         });\n+\n         if (Object.keys(updates).length > 0) {\n-          update(ref(db), updates);\n+          await update(ref(db), updates);\n         }\n-      } else {\n-        setMessages([]);\n+      } catch (err) {\n+        console.error('Failed to mark messages as read:', err);\n       }\n-    });\n+    };\n+\n+    markMessagesAsRead();\n   }, [mealId, userId]);\n \n-  const handleSend = async (msg) => {\n-    const newMsg = {\n-      sender: userId,\n-      senderName: displayName,\n-      message: msg,\n-      timestamp: new Date().toISOString(),\n+  // ✉️ 發送訊息\n+  const sendMessage = async () => {\n+    if (!input.trim()) return;\n+    const msg = {\n+      text: input.trim(),\n+      senderId: userId,\n+      senderName,\n+      timestamp: Date.now(),\n       readBy: [userId],\n     };\n-    const newRef = push(ref(db, `messages/${mealId}`));\n-    await set(newRef, newMsg);\n-    setInput('');\n-  };\n \n-  const sendImage = async () => {\n-    ImagePicker.launchImageLibrary({ mediaType: 'photo' }, async (res) => {\n-      if (res.assets && res.assets.length > 0) {\n-        const asset = res.assets[0];\n-        const imgRef = storageRef(storage, `chatImages/${mealId}/${Date.now()}.jpg`);\n-        const blob = await fetch(asset.uri).then(r => r.blob());\n-        await uploadBytes(imgRef, blob);\n-        const url = await getDownloadURL(imgRef);\n-        const newMsg = {\n-          sender: userId,\n-          senderName: displayName,\n-          imageUrl: url,\n-          timestamp: new Date().toISOString(),\n-          readBy: [userId],\n-        };\n-        const newRef = push(ref(db, `messages/${mealId}`));\n-        await set(newRef, newMsg);\n-      }\n-    });\n+    try {\n+      await push(ref(db, `messages/${mealId}`), msg);\n+      setInput('');\n+      flatListRef.current?.scrollToEnd({ animated: true });\n+    } catch (err) {\n+      console.error('Failed to send message:', err);\n+    }\n   };\n \n   return (\n-    <View style={{ flex: 1 }}>\n+    <KeyboardAvoidingView\n+      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n+      style={styles.container}\n+    >\n       <FlatList\n+        ref={flatListRef}\n         data={messages}\n-        keyExtractor={(_, i) => i.toString()}\n+        keyExtractor={(item) => item.id}\n         renderItem={({ item }) => (\n-          <View style={{ margin: 8 }}>\n-            <Text style={{ fontWeight: 'bold' }}>{item.senderName}</Text>\n-            {item.message && <Text>{item.message}</Text>}\n-            {item.imageUrl && (\n-              <Image source={{ uri: item.imageUrl }} style={{ width: 200, height: 200 }} />\n-            )}\n-            <Text style={{ fontSize: 12, color: '#888' }}>\n-              👁 Seen by {item.readBy?.length || 0}\n+          <View\n+            style={[\n+              styles.messageBubble,\n+              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n+            ]}\n+          >\n+            <Text style={styles.sender}>\n+              {item.senderId === userId ? 'You' : item.senderName}\n             </Text>\n+            <Text style={styles.text}>{item.text}</Text>\n           </View>\n         )}\n+        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n       />\n \n-      {showEmoji && (\n-        <EmojiSelector\n-          onEmojiSelected={(emoji) => {\n-            setInput((prev) => prev + emoji);\n-            setShowEmoji(false);\n-          }}\n-          showSearchBar={false}\n-        />\n-      )}\n-\n-      <View style={{ flexDirection: 'row', padding: 10 }}>\n+      <View style={styles.inputRow}>\n         <TextInput\n           value={input}\n           onChangeText={setInput}\n-          style={{ flex: 1, borderWidth: 1, borderColor: '#ccc', borderRadius: 8, padding: 10 }}\n+          placeholder=\"Type a message...\"\n+          style={styles.input}\n         />\n-        <Pressable onPress={() => handleSend(input)}><Text>Send</Text></Pressable>\n-        <Pressable onPress={() => setShowEmoji(true)}><Text>😊</Text></Pressable>\n-        <Pressable onPress={sendImage}><Text>🖼️</Text></Pressable>\n+        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n+          <Text style={styles.sendText}>Send</Text>\n+        </Pressable>\n       </View>\n-    </View>\n+    </KeyboardAvoidingView>\n   );\n }\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff' },\n+  messageBubble: {\n+    marginVertical: 6,\n+    padding: 10,\n+    marginHorizontal: 12,\n+    borderRadius: 8,\n+    maxWidth: '75%',\n+  },\n+  myMessage: {\n+    backgroundColor: '#dcf8c6',\n+    alignSelf: 'flex-end',\n+  },\n+  theirMessage: {\n+    backgroundColor: '#f1f1f1',\n+    alignSelf: 'flex-start',\n+  },\n+  sender: {\n+    fontSize: 12,\n+    color: '#555',\n+    marginBottom: 2,\n+  },\n+  text: {\n+    fontSize: 16,\n+  },\n+  inputRow: {\n+    flexDirection: 'row',\n+    padding: 10,\n+    borderTopWidth: 1,\n+    borderColor: '#eee',\n+    backgroundColor: '#fafafa',\n+  },\n+  input: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 20,\n+    paddingHorizontal: 16,\n+    height: 40,\n+    backgroundColor: '#fff',\n+  },\n+  sendBtn: {\n+    marginLeft: 10,\n+    justifyContent: 'center',\n+    paddingHorizontal: 12,\n+    backgroundColor: '#007aff',\n+    borderRadius: 20,\n+  },\n+  sendText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                },
                {
                    "date": 1748645704573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,22 +12,22 @@\n import { ref, onValue, push, update, get } from 'firebase/database';\n import { db } from '../firebase';\n import auth from '@react-native-firebase/auth';\n import { useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, ChatMessage } from '../types';\n \n export default function ChatRoomScreen() {\n-  const route = useRoute();\n+  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n   const { mealId } = route.params;\n   const user = auth().currentUser;\n   const userId = user?.uid;\n   const senderName = user?.displayName || 'You';\n-\n-  const [messages, setMessages] = useState([]);\n+  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n   const [input, setInput] = useState('');\n \n   const flatListRef = useRef();\n \n-  // 📥 即時抓取訊息\n   useEffect(() => {\n     const msgRef = ref(db, `messages/${mealId}`);\n     const unsubscribe = onValue(msgRef, (snapshot) => {\n       const data = snapshot.val();\n"
                },
                {
                    "date": 1748645717267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,10 @@\n   const userId = user?.uid;\n   const senderName = user?.displayName || 'You';\n   const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n   const [input, setInput] = useState('');\n+  const flatListRef = useRef<FlatList>(null);\n \n-  const flatListRef = useRef();\n-\n   useEffect(() => {\n     const msgRef = ref(db, `messages/${mealId}`);\n     const unsubscribe = onValue(msgRef, (snapshot) => {\n       const data = snapshot.val();\n"
                },
                {
                    "date": 1748645847497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,18 +32,21 @@\n       const data = snapshot.val();\n       if (!data) return;\n \n       const sorted = Object.entries(data)\n-        .map(([id, msg]) => ({ id, ...msg }))\n+        .map(([id, msg]) => {\n+        const message = msg as ChatMessage;\n+        return { id, ...message };\n+})\n         .sort((a, b) => a.timestamp - b.timestamp);\n \n       setMessages(sorted);\n     });\n \n-    return () => unsubscribe(); // 清除監聽器\n+    return () => unsubscribe();\n   }, [mealId]);\n \n-  // ✅ 將所有未讀訊息標記為已讀\n+  \n   useEffect(() => {\n     const markMessagesAsRead = async () => {\n       if (!userId || !mealId) return;\n \n"
                },
                {
                    "date": 1748645965695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,13 @@\n     const unsubscribe = onValue(msgRef, (snapshot) => {\n       const data = snapshot.val();\n       if (!data) return;\n \n-      const sorted = Object.entries(data)\n-        .map(([id, msg]) => {\n-        const message = msg as ChatMessage;\n-        return { id, ...message };\n-})\n-        .sort((a, b) => a.timestamp - b.timestamp);\n+    const sorted = Object.entries(data as Record<string, ChatMessage>)\n+    .map(([id, msg]) => ({ id, ...msg }))\n+    .sort((a, b) => a.timestamp - b.timestamp);\n \n-      setMessages(sorted);\n+    setMessages(sorted);\n     });\n \n     return () => unsubscribe();\n   }, [mealId]);\n@@ -55,9 +52,9 @@\n         const data = snapshot.val();\n         if (!data) return;\n \n         const updates = {};\n-        Object.entries(data).forEach(([msgId, msg]) => {\n+        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n           if (!msg.readBy?.includes(userId)) {\n             const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n             updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n           }\n"
                },
                {
                    "date": 1748646022911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         const snapshot = await get(ref(db, `messages/${mealId}`));\n         const data = snapshot.val();\n         if (!data) return;\n \n-        const updates = {};\n+        const updates: Record<string, any> = {};\n         Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n           if (!msg.readBy?.includes(userId)) {\n             const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n             updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n@@ -70,9 +70,9 @@\n \n     markMessagesAsRead();\n   }, [mealId, userId]);\n \n-  // ✉️ 發送訊息\n+  \n   const sendMessage = async () => {\n     if (!input.trim()) return;\n     const msg = {\n       text: input.trim(),\n"
                },
                {
                    "date": 1748650494339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  KeyboardAvoidingView,\n+  Platform,\n+} from 'react-native';\n+import { useEffect, useRef, useState } from 'react';\n+import { ref, onValue, push, update, get } from 'firebase/database';\n+import { db } from '../firebase';\n+import { auth } from '../firebase';\n+import { useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, ChatMessage } from '../types';\n+\n+export default function ChatRoomScreen() {\n+  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n+  const { mealId } = route.params;\n+  const user = auth.currentUser;\n+  const userId = user?.uid;\n+  const senderName = user?.displayName || 'You';\n+  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n+  const [input, setInput] = useState('');\n+  const flatListRef = useRef<FlatList>(null);\n+\n+  useEffect(() => {\n+    const msgRef = ref(db, `messages/${mealId}`);\n+    const unsubscribe = onValue(msgRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (!data) return;\n+\n+    const sorted = Object.entries(data as Record<string, ChatMessage>)\n+    .map(([id, msg]) => ({ id, ...msg }))\n+    .sort((a, b) => a.timestamp - b.timestamp);\n+\n+    setMessages(sorted);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [mealId]);\n+\n+  \n+  useEffect(() => {\n+    const markMessagesAsRead = async () => {\n+      if (!userId || !mealId) return;\n+\n+      try {\n+        const snapshot = await get(ref(db, `messages/${mealId}`));\n+        const data = snapshot.val();\n+        if (!data) return;\n+\n+        const updates: Record<string, any> = {};\n+        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n+          if (!msg.readBy?.includes(userId)) {\n+            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n+            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n+          }\n+        });\n+\n+        if (Object.keys(updates).length > 0) {\n+          await update(ref(db), updates);\n+        }\n+      } catch (err) {\n+        console.error('Failed to mark messages as read:', err);\n+      }\n+    };\n+\n+    markMessagesAsRead();\n+  }, [mealId, userId]);\n+\n+  \n+  const sendMessage = async () => {\n+    if (!input.trim()) return;\n+    const msg = {\n+      text: input.trim(),\n+      senderId: userId,\n+      senderName,\n+      timestamp: Date.now(),\n+      readBy: [userId],\n+    };\n+\n+    try {\n+      await push(ref(db, `messages/${mealId}`), msg);\n+      setInput('');\n+      flatListRef.current?.scrollToEnd({ animated: true });\n+    } catch (err) {\n+      console.error('Failed to send message:', err);\n+    }\n+  };\n+\n+  return (\n+    <KeyboardAvoidingView\n+      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n+      style={styles.container}\n+    >\n+      <FlatList\n+        ref={flatListRef}\n+        data={messages}\n+        keyExtractor={(item) => item.id}\n+        renderItem={({ item }) => (\n+          <View\n+            style={[\n+              styles.messageBubble,\n+              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n+            ]}\n+          >\n+            <Text style={styles.sender}>\n+              {item.senderId === userId ? 'You' : item.senderName}\n+            </Text>\n+            <Text style={styles.text}>{item.text}</Text>\n+          </View>\n+        )}\n+        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+      />\n+\n+      <View style={styles.inputRow}>\n+        <TextInput\n+          value={input}\n+          onChangeText={setInput}\n+          placeholder=\"Type a message...\"\n+          style={styles.input}\n+        />\n+        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n+          <Text style={styles.sendText}>Send</Text>\n+        </Pressable>\n+      </View>\n+    </KeyboardAvoidingView>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff' },\n+  messageBubble: {\n+    marginVertical: 6,\n+    padding: 10,\n+    marginHorizontal: 12,\n+    borderRadius: 8,\n+    maxWidth: '75%',\n+  },\n+  myMessage: {\n+    backgroundColor: '#dcf8c6',\n+    alignSelf: 'flex-end',\n+  },\n+  theirMessage: {\n+    backgroundColor: '#f1f1f1',\n+    alignSelf: 'flex-start',\n+  },\n+  sender: {\n+    fontSize: 12,\n+    color: '#555',\n+    marginBottom: 2,\n+  },\n+  text: {\n+    fontSize: 16,\n+  },\n+  inputRow: {\n+    flexDirection: 'row',\n+    padding: 10,\n+    borderTopWidth: 1,\n+    borderColor: '#eee',\n+    backgroundColor: '#fafafa',\n+  },\n+  input: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 20,\n+    paddingHorizontal: 16,\n+    height: 40,\n+    backgroundColor: '#fff',\n+  },\n+  sendBtn: {\n+    marginLeft: 10,\n+    justifyContent: 'center',\n+    paddingHorizontal: 12,\n+    backgroundColor: '#007aff',\n+    borderRadius: 20,\n+  },\n+  sendText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                },
                {
                    "date": 1749532639457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,191 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  KeyboardAvoidingView,\n+  Platform,\n+} from 'react-native';\n+import { useEffect, useRef, useState } from 'react';\n+import { ref, onValue, push, update, get } from 'firebase/database';\n+import { db } from '../firebase';\n+import { auth } from '../firebase';\n+import { useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, ChatMessage } from '../types';\n+\n+export default function ChatRoomScreen() {\n+  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n+  const { mealId } = route.params;\n+  const user = auth.currentUser;\n+  const userId = user?.uid;\n+  const senderName = user?.displayName || 'You';\n+  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n+  const [input, setInput] = useState('');\n+  const flatListRef = useRef<FlatList>(null);\n+\n+  useEffect(() => {\n+    const msgRef = ref(db, `messages/${mealId}`);\n+    const unsubscribe = onValue(msgRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (!data) return;\n+\n+    const sorted = Object.entries(data as Record<string, ChatMessage>)\n+    .map(([id, msg]) => ({ id, ...msg }))\n+    .sort((a, b) => a.timestamp - b.timestamp);\n+\n+    setMessages(sorted);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [mealId]);\n+\n+  \n+  useEffect(() => {\n+    const markMessagesAsRead = async () => {\n+      if (!userId || !mealId) return;\n+\n+      try {\n+        const snapshot = await get(ref(db, `messages/${mealId}`));\n+        const data = snapshot.val();\n+        if (!data) return;\n+\n+        const updates: Record<string, any> = {};\n+        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n+          if (!msg.readBy?.includes(userId)) {\n+            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n+            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n+          }\n+        });\n+\n+        if (Object.keys(updates).length > 0) {\n+          await update(ref(db), updates);\n+        }\n+      } catch (err) {\n+        console.error('Failed to mark messages as read:', err);\n+      }\n+    };\n+\n+    markMessagesAsRead();\n+  }, [mealId, userId]);\n+\n+  \n+  const sendMessage = async () => {\n+    if (!input.trim()) return;\n+    const msg = {\n+      text: input.trim(),\n+      senderId: userId,\n+      senderName,\n+      timestamp: Date.now(),\n+      readBy: [userId],\n+    };\n+\n+    try {\n+      await push(ref(db, `messages/${mealId}`), msg);\n+      setInput('');\n+      flatListRef.current?.scrollToEnd({ animated: true });\n+    } catch (err) {\n+      console.error('Failed to send message:', err);\n+    }\n+  };\n+\n+  return (\n+    <KeyboardAvoidingView\n+      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n+      style={styles.container}\n+    >\n+      <FlatList\n+        ref={flatListRef}\n+        data={messages}\n+        keyExtractor={(item) => item.id}\n+        renderItem={({ item }) => (\n+          <View\n+            style={[\n+              styles.messageBubble,\n+              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n+            ]}\n+          >\n+            <Text style={styles.sender}>\n+              {item.senderId === userId ? 'You' : item.senderName}\n+            </Text>\n+            <Text style={styles.text}>{item.text}</Text>\n+          </View>\n+        )}\n+        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+      />\n+\n+      <View style={styles.inputRow}>\n+        <TextInput\n+          value={input}\n+          onChangeText={setInput}\n+          placeholder=\"Type a message...\"\n+          style={styles.input}\n+        />\n+        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n+          <Text style={styles.sendText}>Send</Text>\n+        </Pressable>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+          <Text style={styles.backButtonText}>← Go Back</Text>\n+        </Pressable>\n+\n+      </View>\n+    </KeyboardAvoidingView>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff' },\n+  messageBubble: {\n+    marginVertical: 6,\n+    padding: 10,\n+    marginHorizontal: 12,\n+    borderRadius: 8,\n+    maxWidth: '75%',\n+  },\n+  myMessage: {\n+    backgroundColor: '#dcf8c6',\n+    alignSelf: 'flex-end',\n+  },\n+  theirMessage: {\n+    backgroundColor: '#f1f1f1',\n+    alignSelf: 'flex-start',\n+  },\n+  sender: {\n+    fontSize: 12,\n+    color: '#555',\n+    marginBottom: 2,\n+  },\n+  text: {\n+    fontSize: 16,\n+  },\n+  inputRow: {\n+    flexDirection: 'row',\n+    padding: 10,\n+    borderTopWidth: 1,\n+    borderColor: '#eee',\n+    backgroundColor: '#fafafa',\n+  },\n+  input: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 20,\n+    paddingHorizontal: 16,\n+    height: 40,\n+    backgroundColor: '#fff',\n+  },\n+  sendBtn: {\n+    marginLeft: 10,\n+    justifyContent: 'center',\n+    paddingHorizontal: 12,\n+    backgroundColor: '#007aff',\n+    borderRadius: 20,\n+  },\n+  sendText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                },
                {
                    "date": 1749532655969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,379 +187,18 @@\n   sendText: {\n     color: '#fff',\n     fontWeight: 'bold',\n   },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  KeyboardAvoidingView,\n-  Platform,\n-} from 'react-native';\n-import { useEffect, useRef, useState } from 'react';\n-import { ref, onValue, push, update, get } from 'firebase/database';\n-import { db } from '../firebase';\n-import { auth } from '../firebase';\n-import { useRoute } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList, ChatMessage } from '../types';\n-\n-export default function ChatRoomScreen() {\n-  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n-  const { mealId } = route.params;\n-  const user = auth.currentUser;\n-  const userId = user?.uid;\n-  const senderName = user?.displayName || 'You';\n-  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n-  const [input, setInput] = useState('');\n-  const flatListRef = useRef<FlatList>(null);\n-\n-  useEffect(() => {\n-    const msgRef = ref(db, `messages/${mealId}`);\n-    const unsubscribe = onValue(msgRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (!data) return;\n-\n-    const sorted = Object.entries(data as Record<string, ChatMessage>)\n-    .map(([id, msg]) => ({ id, ...msg }))\n-    .sort((a, b) => a.timestamp - b.timestamp);\n-\n-    setMessages(sorted);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [mealId]);\n-\n-  \n-  useEffect(() => {\n-    const markMessagesAsRead = async () => {\n-      if (!userId || !mealId) return;\n-\n-      try {\n-        const snapshot = await get(ref(db, `messages/${mealId}`));\n-        const data = snapshot.val();\n-        if (!data) return;\n-\n-        const updates: Record<string, any> = {};\n-        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n-          if (!msg.readBy?.includes(userId)) {\n-            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n-            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n-          }\n-        });\n-\n-        if (Object.keys(updates).length > 0) {\n-          await update(ref(db), updates);\n-        }\n-      } catch (err) {\n-        console.error('Failed to mark messages as read:', err);\n-      }\n-    };\n-\n-    markMessagesAsRead();\n-  }, [mealId, userId]);\n-\n-  \n-  const sendMessage = async () => {\n-    if (!input.trim()) return;\n-    const msg = {\n-      text: input.trim(),\n-      senderId: userId,\n-      senderName,\n-      timestamp: Date.now(),\n-      readBy: [userId],\n-    };\n-\n-    try {\n-      await push(ref(db, `messages/${mealId}`), msg);\n-      setInput('');\n-      flatListRef.current?.scrollToEnd({ animated: true });\n-    } catch (err) {\n-      console.error('Failed to send message:', err);\n-    }\n-  };\n-\n-  return (\n-    <KeyboardAvoidingView\n-      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n-      style={styles.container}\n-    >\n-      <FlatList\n-        ref={flatListRef}\n-        data={messages}\n-        keyExtractor={(item) => item.id}\n-        renderItem={({ item }) => (\n-          <View\n-            style={[\n-              styles.messageBubble,\n-              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n-            ]}\n-          >\n-            <Text style={styles.sender}>\n-              {item.senderId === userId ? 'You' : item.senderName}\n-            </Text>\n-            <Text style={styles.text}>{item.text}</Text>\n-          </View>\n-        )}\n-        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n-        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n-      />\n-\n-      <View style={styles.inputRow}>\n-        <TextInput\n-          value={input}\n-          onChangeText={setInput}\n-          placeholder=\"Type a message...\"\n-          style={styles.input}\n-        />\n-        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n-          <Text style={styles.sendText}>Send</Text>\n-        </Pressable>\n-      </View>\n-    </KeyboardAvoidingView>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff' },\n-  messageBubble: {\n-    marginVertical: 6,\n-    padding: 10,\n-    marginHorizontal: 12,\n-    borderRadius: 8,\n-    maxWidth: '75%',\n+  backButton: {\n+  marginTop: 20,\n+  padding: 10,\n+  alignItems: 'center',\n+  borderRadius: 6,\n+  borderWidth: 1,\n+  borderColor: '#ccc',\n   },\n-  myMessage: {\n-    backgroundColor: '#dcf8c6',\n-    alignSelf: 'flex-end',\n-  },\n-  theirMessage: {\n-    backgroundColor: '#f1f1f1',\n-    alignSelf: 'flex-start',\n-  },\n-  sender: {\n-    fontSize: 12,\n-    color: '#555',\n-    marginBottom: 2,\n-  },\n-  text: {\n-    fontSize: 16,\n-  },\n-  inputRow: {\n-    flexDirection: 'row',\n-    padding: 10,\n-    borderTopWidth: 1,\n-    borderColor: '#eee',\n-    backgroundColor: '#fafafa',\n-  },\n-  input: {\n-    flex: 1,\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 20,\n-    paddingHorizontal: 16,\n-    height: 40,\n-    backgroundColor: '#fff',\n-  },\n-  sendBtn: {\n-    marginLeft: 10,\n-    justifyContent: 'center',\n-    paddingHorizontal: 12,\n-    backgroundColor: '#007aff',\n-    borderRadius: 20,\n-  },\n-  sendText: {\n-    color: '#fff',\n+  backButtonText: {\n+    color: '#007aff',\n     fontWeight: 'bold',\n   },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  KeyboardAvoidingView,\n-  Platform,\n-} from 'react-native';\n-import { useEffect, useRef, useState } from 'react';\n-import { ref, onValue, push, update, get } from 'firebase/database';\n-import { db } from '../firebase';\n-import auth from '@react-native-firebase/auth';\n-import { useRoute } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList, ChatMessage } from '../types';\n \n-export default function ChatRoomScreen() {\n-  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n-  const { mealId } = route.params;\n-  const user = auth().currentUser;\n-  const userId = user?.uid;\n-  const senderName = user?.displayName || 'You';\n-  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n-  const [input, setInput] = useState('');\n-  const flatListRef = useRef<FlatList>(null);\n-\n-  useEffect(() => {\n-    const msgRef = ref(db, `messages/${mealId}`);\n-    const unsubscribe = onValue(msgRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (!data) return;\n-\n-    const sorted = Object.entries(data as Record<string, ChatMessage>)\n-    .map(([id, msg]) => ({ id, ...msg }))\n-    .sort((a, b) => a.timestamp - b.timestamp);\n-\n-    setMessages(sorted);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [mealId]);\n-\n-  \n-  useEffect(() => {\n-    const markMessagesAsRead = async () => {\n-      if (!userId || !mealId) return;\n-\n-      try {\n-        const snapshot = await get(ref(db, `messages/${mealId}`));\n-        const data = snapshot.val();\n-        if (!data) return;\n-\n-        const updates: Record<string, any> = {};\n-        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n-          if (!msg.readBy?.includes(userId)) {\n-            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n-            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n-          }\n-        });\n-\n-        if (Object.keys(updates).length > 0) {\n-          await update(ref(db), updates);\n-        }\n-      } catch (err) {\n-        console.error('Failed to mark messages as read:', err);\n-      }\n-    };\n-\n-    markMessagesAsRead();\n-  }, [mealId, userId]);\n-\n-  \n-  const sendMessage = async () => {\n-    if (!input.trim()) return;\n-    const msg = {\n-      text: input.trim(),\n-      senderId: userId,\n-      senderName,\n-      timestamp: Date.now(),\n-      readBy: [userId],\n-    };\n-\n-    try {\n-      await push(ref(db, `messages/${mealId}`), msg);\n-      setInput('');\n-      flatListRef.current?.scrollToEnd({ animated: true });\n-    } catch (err) {\n-      console.error('Failed to send message:', err);\n-    }\n-  };\n-\n-  return (\n-    <KeyboardAvoidingView\n-      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n-      style={styles.container}\n-    >\n-      <FlatList\n-        ref={flatListRef}\n-        data={messages}\n-        keyExtractor={(item) => item.id}\n-        renderItem={({ item }) => (\n-          <View\n-            style={[\n-              styles.messageBubble,\n-              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n-            ]}\n-          >\n-            <Text style={styles.sender}>\n-              {item.senderId === userId ? 'You' : item.senderName}\n-            </Text>\n-            <Text style={styles.text}>{item.text}</Text>\n-          </View>\n-        )}\n-        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n-        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n-      />\n-\n-      <View style={styles.inputRow}>\n-        <TextInput\n-          value={input}\n-          onChangeText={setInput}\n-          placeholder=\"Type a message...\"\n-          style={styles.input}\n-        />\n-        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n-          <Text style={styles.sendText}>Send</Text>\n-        </Pressable>\n-      </View>\n-    </KeyboardAvoidingView>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff' },\n-  messageBubble: {\n-    marginVertical: 6,\n-    padding: 10,\n-    marginHorizontal: 12,\n-    borderRadius: 8,\n-    maxWidth: '75%',\n-  },\n-  myMessage: {\n-    backgroundColor: '#dcf8c6',\n-    alignSelf: 'flex-end',\n-  },\n-  theirMessage: {\n-    backgroundColor: '#f1f1f1',\n-    alignSelf: 'flex-start',\n-  },\n-  sender: {\n-    fontSize: 12,\n-    color: '#555',\n-    marginBottom: 2,\n-  },\n-  text: {\n-    fontSize: 16,\n-  },\n-  inputRow: {\n-    flexDirection: 'row',\n-    padding: 10,\n-    borderTopWidth: 1,\n-    borderColor: '#eee',\n-    backgroundColor: '#fafafa',\n-  },\n-  input: {\n-    flex: 1,\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 20,\n-    paddingHorizontal: 16,\n-    height: 40,\n-    backgroundColor: '#fff',\n-  },\n-  sendBtn: {\n-    marginLeft: 10,\n-    justifyContent: 'center',\n-    paddingHorizontal: 12,\n-    backgroundColor: '#007aff',\n-    borderRadius: 20,\n-  },\n-  sendText: {\n-    color: '#fff',\n-    fontWeight: 'bold',\n-  },\n });\n"
                },
                {
                    "date": 1749532675619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  KeyboardAvoidingView,\n+  Platform,\n+} from 'react-native';\n+import { useEffect, useRef, useState } from 'react';\n+import { ref, onValue, push, update, get } from 'firebase/database';\n+import { db } from '../firebase';\n+import { auth } from '../firebase';\n+import { useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, ChatMessage } from '../types';\n+\n+export default function ChatRoomScreen() {\n+  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n+  const { mealId } = route.params;\n+  const user = auth.currentUser;\n+  const userId = user?.uid;\n+  const senderName = user?.displayName || 'You';\n+  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n+  const [input, setInput] = useState('');\n+  const flatListRef = useRef<FlatList>(null);\n+\n+  useEffect(() => {\n+    const msgRef = ref(db, `messages/${mealId}`);\n+    const unsubscribe = onValue(msgRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (!data) return;\n+\n+    const sorted = Object.entries(data as Record<string, ChatMessage>)\n+    .map(([id, msg]) => ({ id, ...msg }))\n+    .sort((a, b) => a.timestamp - b.timestamp);\n+\n+    setMessages(sorted);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [mealId]);\n+\n+  \n+  useEffect(() => {\n+    const markMessagesAsRead = async () => {\n+      if (!userId || !mealId) return;\n+\n+      try {\n+        const snapshot = await get(ref(db, `messages/${mealId}`));\n+        const data = snapshot.val();\n+        if (!data) return;\n+\n+        const updates: Record<string, any> = {};\n+        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n+          if (!msg.readBy?.includes(userId)) {\n+            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n+            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n+          }\n+        });\n+\n+        if (Object.keys(updates).length > 0) {\n+          await update(ref(db), updates);\n+        }\n+      } catch (err) {\n+        console.error('Failed to mark messages as read:', err);\n+      }\n+    };\n+\n+    markMessagesAsRead();\n+  }, [mealId, userId]);\n+\n+  \n+  const sendMessage = async () => {\n+    if (!input.trim()) return;\n+    const msg = {\n+      text: input.trim(),\n+      senderId: userId,\n+      senderName,\n+      timestamp: Date.now(),\n+      readBy: [userId],\n+    };\n+\n+    try {\n+      await push(ref(db, `messages/${mealId}`), msg);\n+      setInput('');\n+      flatListRef.current?.scrollToEnd({ animated: true });\n+    } catch (err) {\n+      console.error('Failed to send message:', err);\n+    }\n+  };\n+\n+  return (\n+    <KeyboardAvoidingView\n+      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n+      style={styles.container}\n+    >\n+      <FlatList\n+        ref={flatListRef}\n+        data={messages}\n+        keyExtractor={(item) => item.id}\n+        renderItem={({ item }) => (\n+          <View\n+            style={[\n+              styles.messageBubble,\n+              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n+            ]}\n+          >\n+            <Text style={styles.sender}>\n+              {item.senderId === userId ? 'You' : item.senderName}\n+            </Text>\n+            <Text style={styles.text}>{item.text}</Text>\n+          </View>\n+        )}\n+        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+      />\n+\n+      <View style={styles.inputRow}>\n+        <TextInput\n+          value={input}\n+          onChangeText={setInput}\n+          placeholder=\"Type a message...\"\n+          style={styles.input}\n+        />\n+        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n+          <Text style={styles.sendText}>Send</Text>\n+        </Pressable>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+          <Text style={styles.backButtonText}>← Go Back</Text>\n+        </Pressable>\n+\n+      </View>\n+    </KeyboardAvoidingView>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff' },\n+  messageBubble: {\n+    marginVertical: 6,\n+    padding: 10,\n+    marginHorizontal: 12,\n+    borderRadius: 8,\n+    maxWidth: '75%',\n+  },\n+  myMessage: {\n+    backgroundColor: '#dcf8c6',\n+    alignSelf: 'flex-end',\n+  },\n+  theirMessage: {\n+    backgroundColor: '#f1f1f1',\n+    alignSelf: 'flex-start',\n+  },\n+  sender: {\n+    fontSize: 12,\n+    color: '#555',\n+    marginBottom: 2,\n+  },\n+  text: {\n+    fontSize: 16,\n+  },\n+  inputRow: {\n+    flexDirection: 'row',\n+    padding: 10,\n+    borderTopWidth: 1,\n+    borderColor: '#eee',\n+    backgroundColor: '#fafafa',\n+  },\n+  input: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 20,\n+    paddingHorizontal: 16,\n+    height: 40,\n+    backgroundColor: '#fff',\n+  },\n+  sendBtn: {\n+    marginLeft: 10,\n+    justifyContent: 'center',\n+    paddingHorizontal: 12,\n+    backgroundColor: '#007aff',\n+    borderRadius: 20,\n+  },\n+  sendText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+  backButton: {\n+  marginTop: 20,\n+  padding: 10,\n+  alignItems: 'center',\n+  borderRadius: 6,\n+  borderWidth: 1,\n+  borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n+\n+});\n"
                },
                {
                    "date": 1749532724055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import { useEffect, useRef, useState } from 'react';\n import { ref, onValue, push, update, get } from 'firebase/database';\n import { db } from '../firebase';\n import { auth } from '../firebase';\n-import { useRoute } from '@react-navigation/native';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n import type { RouteProp } from '@react-navigation/native';\n import type { RootStackParamList, ChatMessage } from '../types';\n \n export default function ChatRoomScreen() {\n@@ -201,208 +201,4 @@\n     fontWeight: 'bold',\n   },\n \n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  KeyboardAvoidingView,\n-  Platform,\n-} from 'react-native';\n-import { useEffect, useRef, useState } from 'react';\n-import { ref, onValue, push, update, get } from 'firebase/database';\n-import { db } from '../firebase';\n-import { auth } from '../firebase';\n-import { useRoute } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList, ChatMessage } from '../types';\n-\n-export default function ChatRoomScreen() {\n-  const route = useRoute<RouteProp<RootStackParamList, 'ChatRoom'>>();\n-  const { mealId } = route.params;\n-  const user = auth.currentUser;\n-  const userId = user?.uid;\n-  const senderName = user?.displayName || 'You';\n-  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n-  const [input, setInput] = useState('');\n-  const flatListRef = useRef<FlatList>(null);\n-\n-  useEffect(() => {\n-    const msgRef = ref(db, `messages/${mealId}`);\n-    const unsubscribe = onValue(msgRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (!data) return;\n-\n-    const sorted = Object.entries(data as Record<string, ChatMessage>)\n-    .map(([id, msg]) => ({ id, ...msg }))\n-    .sort((a, b) => a.timestamp - b.timestamp);\n-\n-    setMessages(sorted);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [mealId]);\n-\n-  \n-  useEffect(() => {\n-    const markMessagesAsRead = async () => {\n-      if (!userId || !mealId) return;\n-\n-      try {\n-        const snapshot = await get(ref(db, `messages/${mealId}`));\n-        const data = snapshot.val();\n-        if (!data) return;\n-\n-        const updates: Record<string, any> = {};\n-        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n-          if (!msg.readBy?.includes(userId)) {\n-            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n-            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n-          }\n-        });\n-\n-        if (Object.keys(updates).length > 0) {\n-          await update(ref(db), updates);\n-        }\n-      } catch (err) {\n-        console.error('Failed to mark messages as read:', err);\n-      }\n-    };\n-\n-    markMessagesAsRead();\n-  }, [mealId, userId]);\n-\n-  \n-  const sendMessage = async () => {\n-    if (!input.trim()) return;\n-    const msg = {\n-      text: input.trim(),\n-      senderId: userId,\n-      senderName,\n-      timestamp: Date.now(),\n-      readBy: [userId],\n-    };\n-\n-    try {\n-      await push(ref(db, `messages/${mealId}`), msg);\n-      setInput('');\n-      flatListRef.current?.scrollToEnd({ animated: true });\n-    } catch (err) {\n-      console.error('Failed to send message:', err);\n-    }\n-  };\n-\n-  return (\n-    <KeyboardAvoidingView\n-      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n-      style={styles.container}\n-    >\n-      <FlatList\n-        ref={flatListRef}\n-        data={messages}\n-        keyExtractor={(item) => item.id}\n-        renderItem={({ item }) => (\n-          <View\n-            style={[\n-              styles.messageBubble,\n-              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n-            ]}\n-          >\n-            <Text style={styles.sender}>\n-              {item.senderId === userId ? 'You' : item.senderName}\n-            </Text>\n-            <Text style={styles.text}>{item.text}</Text>\n-          </View>\n-        )}\n-        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n-        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n-      />\n-\n-      <View style={styles.inputRow}>\n-        <TextInput\n-          value={input}\n-          onChangeText={setInput}\n-          placeholder=\"Type a message...\"\n-          style={styles.input}\n-        />\n-        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n-          <Text style={styles.sendText}>Send</Text>\n-        </Pressable>\n-        <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n-          <Text style={styles.backButtonText}>← Go Back</Text>\n-        </Pressable>\n-\n-      </View>\n-    </KeyboardAvoidingView>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff' },\n-  messageBubble: {\n-    marginVertical: 6,\n-    padding: 10,\n-    marginHorizontal: 12,\n-    borderRadius: 8,\n-    maxWidth: '75%',\n-  },\n-  myMessage: {\n-    backgroundColor: '#dcf8c6',\n-    alignSelf: 'flex-end',\n-  },\n-  theirMessage: {\n-    backgroundColor: '#f1f1f1',\n-    alignSelf: 'flex-start',\n-  },\n-  sender: {\n-    fontSize: 12,\n-    color: '#555',\n-    marginBottom: 2,\n-  },\n-  text: {\n-    fontSize: 16,\n-  },\n-  inputRow: {\n-    flexDirection: 'row',\n-    padding: 10,\n-    borderTopWidth: 1,\n-    borderColor: '#eee',\n-    backgroundColor: '#fafafa',\n-  },\n-  input: {\n-    flex: 1,\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 20,\n-    paddingHorizontal: 16,\n-    height: 40,\n-    backgroundColor: '#fff',\n-  },\n-  sendBtn: {\n-    marginLeft: 10,\n-    justifyContent: 'center',\n-    paddingHorizontal: 12,\n-    backgroundColor: '#007aff',\n-    borderRadius: 20,\n-  },\n-  sendText: {\n-    color: '#fff',\n-    fontWeight: 'bold',\n-  },\n-  backButton: {\n-  marginTop: 20,\n-  padding: 10,\n-  alignItems: 'center',\n-  borderRadius: 6,\n-  borderWidth: 1,\n-  borderColor: '#ccc',\n-  },\n-  backButtonText: {\n-    color: '#007aff',\n-    fontWeight: 'bold',\n-  },\n-\n-});\n"
                },
                {
                    "date": 1749532899267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n import { useEffect, useRef, useState } from 'react';\n import { ref, onValue, push, update, get } from 'firebase/database';\n import { db } from '../firebase';\n import { auth } from '../firebase';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n+import { useRoute } from '@react-navigation/native';\n+import { useNavigation } from '@react-navigation/native';\n import type { RouteProp } from '@react-navigation/native';\n import type { RootStackParamList, ChatMessage } from '../types';\n \n export default function ChatRoomScreen() {\n@@ -24,9 +25,11 @@\n   const senderName = user?.displayName || 'You';\n   const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n   const [input, setInput] = useState('');\n   const flatListRef = useRef<FlatList>(null);\n+  const navigation = useNavigation();\n \n+\n   useEffect(() => {\n     const msgRef = ref(db, `messages/${mealId}`);\n     const unsubscribe = onValue(msgRef, (snapshot) => {\n       const data = snapshot.val();\n"
                },
                {
                    "date": 1749533261586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,12 @@\n     <KeyboardAvoidingView\n       behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n       style={styles.container}\n     >\n+      <Pressable onPress={() => navigation.goBack()} style={styles.topBackButton}>\n+        <Text style={styles.topBackText}>← Go Back</Text>\n+      </Pressable>\n+\n       <FlatList\n         ref={flatListRef}\n         data={messages}\n         keyExtractor={(item) => item.id}\n@@ -129,12 +133,8 @@\n         />\n         <Pressable onPress={sendMessage} style={styles.sendBtn}>\n           <Text style={styles.sendText}>Send</Text>\n         </Pressable>\n-        <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n-          <Text style={styles.backButtonText}>← Go Back</Text>\n-        </Pressable>\n-\n       </View>\n     </KeyboardAvoidingView>\n   );\n }\n@@ -190,17 +190,19 @@\n   sendText: {\n     color: '#fff',\n     fontWeight: 'bold',\n   },\n-  backButton: {\n-  marginTop: 20,\n-  padding: 10,\n-  alignItems: 'center',\n-  borderRadius: 6,\n-  borderWidth: 1,\n-  borderColor: '#ccc',\n+  topBackButton: {\n+    position: 'absolute',\n+    top: 40,\n+    left: 16,\n+    zIndex: 10,\n+    backgroundColor: '#eee',\n+    paddingHorizontal: 12,\n+    paddingVertical: 6,\n+    borderRadius: 6,\n   },\n-  backButtonText: {\n+  topBackText: {\n     color: '#007aff',\n     fontWeight: 'bold',\n   },\n \n"
                },
                {
                    "date": 1749533272935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,6 +204,5 @@\n   topBackText: {\n     color: '#007aff',\n     fontWeight: 'bold',\n   },\n-\n });\n"
                },
                {
                    "date": 1749533797082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  KeyboardAvoidingView,\n+  Platform,\n+} from 'react-native';\n+import { useEffect, useRef, useState } from 'react';\n+import { ref, onValue, push, update, get } from 'firebase/database';\n+import { db } from '../firebase';\n+import { auth } from '../firebase';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, ChatMessage } from '../types';\n+\n+type ChatRoomRouteProp = RouteProp<RootStackParamList, 'ChatRoom'>;\n+\n+export default function ChatRoomScreen() {\n+  const route = useRoute<ChatRoomRouteProp>();\n+  const { mealId, mealTitle } = route.params;\n+  const user = auth.currentUser;\n+  const userId = user?.uid;\n+  const senderName = user?.displayName || 'You';\n+  const [messages, setMessages] = useState<(ChatMessage & { id: string })[]>([]);\n+  const [input, setInput] = useState('');\n+  const flatListRef = useRef<FlatList>(null);\n+  const navigation = useNavigation();\n+\n+  useEffect(() => {\n+    const msgRef = ref(db, `messages/${mealId}`);\n+    const unsubscribe = onValue(msgRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (!data) return;\n+\n+      const sorted = Object.entries(data as Record<string, ChatMessage>)\n+        .map(([id, msg]) => ({ id, ...msg }))\n+        .sort((a, b) => a.timestamp - b.timestamp);\n+\n+      setMessages(sorted);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [mealId]);\n+\n+  useEffect(() => {\n+    const markMessagesAsRead = async () => {\n+      if (!userId || !mealId) return;\n+\n+      try {\n+        const snapshot = await get(ref(db, `messages/${mealId}`));\n+        const data = snapshot.val();\n+        if (!data) return;\n+\n+        const updates: Record<string, any> = {};\n+        Object.entries(data as Record<string, ChatMessage>).forEach(([msgId, msg]) => {\n+          if (!msg.readBy?.includes(userId)) {\n+            const newReadBy = msg.readBy ? [...msg.readBy, userId] : [userId];\n+            updates[`messages/${mealId}/${msgId}/readBy`] = newReadBy;\n+          }\n+        });\n+\n+        if (Object.keys(updates).length > 0) {\n+          await update(ref(db), updates);\n+        }\n+      } catch (err) {\n+        console.error('Failed to mark messages as read:', err);\n+      }\n+    };\n+\n+    markMessagesAsRead();\n+  }, [mealId, userId]);\n+\n+  const sendMessage = async () => {\n+    if (!input.trim()) return;\n+    const msg = {\n+      text: input.trim(),\n+      senderId: userId,\n+      senderName,\n+      timestamp: Date.now(),\n+      readBy: [userId],\n+    };\n+\n+    try {\n+      await push(ref(db, `messages/${mealId}`), msg);\n+      setInput('');\n+      flatListRef.current?.scrollToEnd({ animated: true });\n+    } catch (err) {\n+      console.error('Failed to send message:', err);\n+    }\n+  };\n+\n+  return (\n+    <KeyboardAvoidingView\n+      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n+      style={styles.container}\n+    >\n+      <View style={styles.header}>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.headerLeft}>\n+          <Text style={styles.backText}>← Go Back</Text>\n+        </Pressable>\n+        <Text style={styles.headerTitle}>{mealTitle || 'Chat'}</Text>\n+        <View style={styles.headerRight} />\n+      </View>\n+\n+      <FlatList\n+        ref={flatListRef}\n+        data={messages}\n+        keyExtractor={(item) => item.id}\n+        renderItem={({ item }) => (\n+          <View\n+            style={[\n+              styles.messageBubble,\n+              item.senderId === userId ? styles.myMessage : styles.theirMessage,\n+            ]}\n+          >\n+            <Text style={styles.sender}>\n+              {item.senderId === userId ? 'You' : item.senderName}\n+            </Text>\n+            <Text style={styles.text}>{item.text}</Text>\n+          </View>\n+        )}\n+        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+        onLayout={() => flatListRef.current?.scrollToEnd({ animated: true })}\n+      />\n+\n+      <View style={styles.inputRow}>\n+        <TextInput\n+          value={input}\n+          onChangeText={setInput}\n+          placeholder=\"Type a message...\"\n+          style={styles.input}\n+        />\n+        <Pressable onPress={sendMessage} style={styles.sendBtn}>\n+          <Text style={styles.sendText}>Send</Text>\n+        </Pressable>\n+      </View>\n+    </KeyboardAvoidingView>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff' },\n+  header: {\n+    flexDirection: 'row',\n+    alignItems: 'center',\n+    justifyContent: 'space-between',\n+    paddingHorizontal: 12,\n+    paddingVertical: 10,\n+    borderBottomWidth: 1,\n+    borderBottomColor: '#ddd',\n+    backgroundColor: '#f8f8f8',\n+  },\n+  headerLeft: {\n+    width: 80,\n+  },\n+  headerRight: {\n+    width: 80,\n+  },\n+  headerTitle: {\n+    fontSize: 16,\n+    fontWeight: 'bold',\n+    textAlign: 'center',\n+    flex: 1,\n+  },\n+  backText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n+  messageBubble: {\n+    marginVertical: 6,\n+    padding: 10,\n+    marginHorizontal: 12,\n+    borderRadius: 8,\n+    maxWidth: '75%',\n+  },\n+  myMessage: {\n+    backgroundColor: '#dcf8c6',\n+    alignSelf: 'flex-end',\n+  },\n+  theirMessage: {\n+    backgroundColor: '#f1f1f1',\n+    alignSelf: 'flex-start',\n+  },\n+  sender: {\n+    fontSize: 12,\n+    color: '#555',\n+    marginBottom: 2,\n+  },\n+  text: {\n+    fontSize: 16,\n+  },\n+  inputRow: {\n+    flexDirection: 'row',\n+    padding: 10,\n+    borderTopWidth: 1,\n+    borderColor: '#eee',\n+    backgroundColor: '#fafafa',\n+  },\n+  input: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 20,\n+    paddingHorizontal: 16,\n+    height: 40,\n+    backgroundColor: '#fff',\n+  },\n+  sendBtn: {\n+    marginLeft: 10,\n+    justifyContent: 'center',\n+    paddingHorizontal: 12,\n+    backgroundColor: '#007aff',\n+    borderRadius: 20,\n+  },\n+  sendText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                }
            ],
            "date": 1748638244923,
            "name": "Commit-0",
            "content": "// screens/ChatRoomScreen.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  TextInput,\n  FlatList,\n  Text,\n  Button,\n  StyleSheet,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport { useRoute } from '@react-navigation/native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function ChatRoomScreen() {\n  const route = useRoute<any>();\n  const { mealId } = route.params;\n\n  const [messages, setMessages] = useState<{ id: string; sender: string; content: string }[]>([]);\n  const [text, setText] = useState('');\n\n  const storageKey = `chat_${mealId}`;\n\n  useEffect(() => {\n    // 讀取本地聊天紀錄\n    const loadMessages = async () => {\n      const stored = await AsyncStorage.getItem(storageKey);\n      if (stored) setMessages(JSON.parse(stored));\n    };\n    loadMessages();\n  }, []);\n\n  const sendMessage = async () => {\n    if (!text.trim()) return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      sender: 'You',\n      content: text.trim(),\n    };\n\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setText('');\n\n    await AsyncStorage.setItem(storageKey, JSON.stringify(updatedMessages));\n  };\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n    >\n      <FlatList\n        data={messages}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <Text style={styles.message}>\n            <Text style={styles.sender}>{item.sender}: </Text>\n            {item.content}\n          </Text>\n        )}\n      />\n\n      <TextInput\n        style={styles.input}\n        value={text}\n        onChangeText={setText}\n        placeholder=\"Type a message...\"\n      />\n      <Button title=\"Send\" onPress={sendMessage} />\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: 16, flex: 1 },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 10,\n    marginTop: 10,\n    marginBottom: 5,\n    borderRadius: 6,\n  },\n  message: {\n    marginVertical: 4,\n    fontSize: 16,\n  },\n  sender: {\n    fontWeight: 'bold',\n  },\n});\n"
        }
    ]
}