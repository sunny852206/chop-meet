{
    "sourceFile": "screens/ProfileScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1748642348287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748643703096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n-// ‚úÖ ProfileScreen.tsx\n import { useEffect, useState } from 'react';\n import { View, Text, Button, StyleSheet, Image, TouchableOpacity, ActivityIndicator } from 'react-native';\n import auth from '@react-native-firebase/auth';\n import storage from '@react-native-firebase/storage';\n-import { ref as dbRef, get } from 'firebase/database';\n+import { ref as dbRef, get, set } from 'firebase/database';\n import { db } from '../firebase';\n import * as ImagePicker from 'expo-image-picker';\n import { useNavigation } from '@react-navigation/native';\n \n@@ -33,17 +32,24 @@\n       allowsEditing: true,\n       quality: 0.7,\n     });\n \n-    if (!result.cancelled) {\n+    if (!result.canceled && result.assets?.[0]?.uri) {\n       try {\n         setImageUploading(true);\n-        const response = await fetch(result.uri);\n+        const uri = result.assets[0].uri;\n+        const response = await fetch(uri);\n         const blob = await response.blob();\n         const storageRef = storage().ref(`profile-pics/${user.uid}.jpg`);\n         await storageRef.put(blob);\n         const url = await storageRef.getDownloadURL();\n+\n+        // 1Ô∏è‚É£ Êõ¥Êñ∞Êú¨Âú∞ÁãÄÊÖã\n         setUserData((prev) => ({ ...prev, photoURL: url }));\n+\n+        // 2Ô∏è‚É£ ÂØ´ÂÖ• Firebase Realtime Database\n+        await set(dbRef(db, `users/${user.uid}/photoURL`), url);\n+\n       } catch (err) {\n         console.error('Image upload failed', err);\n       } finally {\n         setImageUploading(false);\n@@ -53,13 +59,15 @@\n \n   return (\n     <View style={styles.container}>\n       <Text style={styles.title}>üë§ Profile</Text>\n+\n       {userData?.photoURL ? (\n         <Image source={{ uri: userData.photoURL }} style={styles.avatar} />\n       ) : (\n         <View style={styles.placeholderAvatar} />\n       )}\n+\n       <TouchableOpacity onPress={handleImageUpload}>\n         <Text style={styles.link}>Change Profile Picture</Text>\n       </TouchableOpacity>\n \n"
                },
                {
                    "date": 1748643757375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,11 @@\n         const storageRef = storage().ref(`profile-pics/${user.uid}.jpg`);\n         await storageRef.put(blob);\n         const url = await storageRef.getDownloadURL();\n \n-        // 1Ô∏è‚É£ Êõ¥Êñ∞Êú¨Âú∞ÁãÄÊÖã\n+        \n         setUserData((prev) => ({ ...prev, photoURL: url }));\n \n-        // 2Ô∏è‚É£ ÂØ´ÂÖ• Firebase Realtime Database\n         await set(dbRef(db, `users/${user.uid}/photoURL`), url);\n \n       } catch (err) {\n         console.error('Image upload failed', err);\n"
                },
                {
                    "date": 1748648162324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,18 @@\n import { ref as dbRef, get, set } from 'firebase/database';\n import { db } from '../firebase';\n import * as ImagePicker from 'expo-image-picker';\n import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n \n+\n export default function ProfileScreen() {\n-  const navigation = useNavigation();\n+  type ProfileNavProp = NativeStackNavigationProp<RootStackParamList>;\n+  const navigation = useNavigation<ProfileNavProp>();\n   const user = auth().currentUser;\n-  const [userData, setUserData] = useState(null);\n+  if (!user) return null;\n+  const [userData, setUserData] = useState<{ photoURL?: string; displayName?: string } | null>(null);\n   const [imageUploading, setImageUploading] = useState(false);\n \n   useEffect(() => {\n     const fetchUserData = async () => {\n"
                },
                {
                    "date": 1748648213044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import { useEffect, useState } from 'react';\n+import { View, Text, Button, StyleSheet, Image, TouchableOpacity, ActivityIndicator } from 'react-native';\n+import auth from '@react-native-firebase/auth';\n+import storage from '@react-native-firebase/storage';\n+import { ref as dbRef, get, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import * as ImagePicker from 'expo-image-picker';\n+import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n+\n+\n+export default function ProfileScreen() {\n+  type ProfileNavProp = NativeStackNavigationProp<RootStackParamList>;\n+  const navigation = useNavigation<ProfileNavProp>();\n+  const user = auth().currentUser;\n+  if (!user) return null;\n+  const [userData, setUserData] = useState<{ photoURL?: string; displayName?: string } | null>(null);\n+  const [imageUploading, setImageUploading] = useState(false);\n+\n+  useEffect(() => {\n+    const fetchUserData = async () => {\n+      const snapshot = await get(dbRef(db, `users/${user.uid}`));\n+      setUserData(snapshot.val());\n+    };\n+    fetchUserData();\n+  }, []);\n+\n+  const handleLogout = async () => {\n+    await auth().signOut();\n+    navigation.reset({ index: 0, routes: [{ name: 'Landing' }] });\n+  };\n+\n+  const handleImageUpload = async () => {\n+    const result = await ImagePicker.launchImageLibraryAsync({\n+      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n+      allowsEditing: true,\n+      quality: 0.7,\n+    });\n+\n+    if (!result.canceled && result.assets?.[0]?.uri) {\n+      try {\n+        setImageUploading(true);\n+        const uri = result.assets[0].uri;\n+        const response = await fetch(uri);\n+        const blob = await response.blob();\n+        const storageRef = storage().ref(`profile-pics/${user.uid}.jpg`);\n+        await storageRef.put(blob);\n+        const url = await storageRef.getDownloadURL();\n+\n+        \n+        setUserData((prev) => ({ ...prev, photoURL: url }));\n+\n+        await set(dbRef(db, `users/${user.uid}/photoURL`), url);\n+\n+      } catch (err) {\n+        console.error('Image upload failed', err);\n+      } finally {\n+        setImageUploading(false);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>üë§ Profile</Text>\n+\n+      {userData?.photoURL ? (\n+        <Image source={{ uri: userData.photoURL }} style={styles.avatar} />\n+      ) : (\n+        <View style={styles.placeholderAvatar} />\n+      )}\n+\n+      <TouchableOpacity onPress={handleImageUpload}>\n+        <Text style={styles.link}>Change Profile Picture</Text>\n+      </TouchableOpacity>\n+\n+      {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n+\n+      <Text style={styles.info}>üë§ {userData?.displayName || user.displayName}</Text>\n+      <Text style={styles.info}>üìß {user.email}</Text>\n+\n+      <Button title=\"Log Out\" onPress={handleLogout} />\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, alignItems: 'center', paddingTop: 60, backgroundColor: '#fff' },\n+  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },\n+  info: { fontSize: 16, marginTop: 8 },\n+  avatar: { width: 100, height: 100, borderRadius: 50, marginBottom: 10 },\n+  placeholderAvatar: {\n+    width: 100,\n+    height: 100,\n+    borderRadius: 50,\n+    backgroundColor: '#ccc',\n+    marginBottom: 10,\n+  },\n+  link: {\n+    color: '#007aff',\n+    textDecorationLine: 'underline',\n+    marginBottom: 20,\n+  },\n+});\n"
                },
                {
                    "date": 1748650714225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useEffect, useState } from 'react';\n import { View, Text, Button, StyleSheet, Image, TouchableOpacity, ActivityIndicator } from 'react-native';\n-import auth from '@react-native-firebase/auth';\n+import { auth } from '../firebase';\n import storage from '@react-native-firebase/storage';\n import { ref as dbRef, get, set } from 'firebase/database';\n import { db } from '../firebase';\n import * as ImagePicker from 'expo-image-picker';\n@@ -12,9 +12,9 @@\n \n export default function ProfileScreen() {\n   type ProfileNavProp = NativeStackNavigationProp<RootStackParamList>;\n   const navigation = useNavigation<ProfileNavProp>();\n-  const user = auth().currentUser;\n+  const user = auth.currentUser;\n   if (!user) return null;\n   const [userData, setUserData] = useState<{ photoURL?: string; displayName?: string } | null>(null);\n   const [imageUploading, setImageUploading] = useState(false);\n \n@@ -26,9 +26,9 @@\n     fetchUserData();\n   }, []);\n \n   const handleLogout = async () => {\n-    await auth().signOut();\n+    await auth.signOut();\n     navigation.reset({ index: 0, routes: [{ name: 'Landing' }] });\n   };\n \n   const handleImageUpload = async () => {\n@@ -102,109 +102,4 @@\n     textDecorationLine: 'underline',\n     marginBottom: 20,\n   },\n });\n-import { useEffect, useState } from 'react';\n-import { View, Text, Button, StyleSheet, Image, TouchableOpacity, ActivityIndicator } from 'react-native';\n-import auth from '@react-native-firebase/auth';\n-import storage from '@react-native-firebase/storage';\n-import { ref as dbRef, get, set } from 'firebase/database';\n-import { db } from '../firebase';\n-import * as ImagePicker from 'expo-image-picker';\n-import { useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList } from '../types/types';\n-\n-\n-export default function ProfileScreen() {\n-  type ProfileNavProp = NativeStackNavigationProp<RootStackParamList>;\n-  const navigation = useNavigation<ProfileNavProp>();\n-  const user = auth().currentUser;\n-  if (!user) return null;\n-  const [userData, setUserData] = useState<{ photoURL?: string; displayName?: string } | null>(null);\n-  const [imageUploading, setImageUploading] = useState(false);\n-\n-  useEffect(() => {\n-    const fetchUserData = async () => {\n-      const snapshot = await get(dbRef(db, `users/${user.uid}`));\n-      setUserData(snapshot.val());\n-    };\n-    fetchUserData();\n-  }, []);\n-\n-  const handleLogout = async () => {\n-    await auth().signOut();\n-    navigation.reset({ index: 0, routes: [{ name: 'Landing' }] });\n-  };\n-\n-  const handleImageUpload = async () => {\n-    const result = await ImagePicker.launchImageLibraryAsync({\n-      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n-      allowsEditing: true,\n-      quality: 0.7,\n-    });\n-\n-    if (!result.canceled && result.assets?.[0]?.uri) {\n-      try {\n-        setImageUploading(true);\n-        const uri = result.assets[0].uri;\n-        const response = await fetch(uri);\n-        const blob = await response.blob();\n-        const storageRef = storage().ref(`profile-pics/${user.uid}.jpg`);\n-        await storageRef.put(blob);\n-        const url = await storageRef.getDownloadURL();\n-\n-        \n-        setUserData((prev) => ({ ...prev, photoURL: url }));\n-\n-        await set(dbRef(db, `users/${user.uid}/photoURL`), url);\n-\n-      } catch (err) {\n-        console.error('Image upload failed', err);\n-      } finally {\n-        setImageUploading(false);\n-      }\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>üë§ Profile</Text>\n-\n-      {userData?.photoURL ? (\n-        <Image source={{ uri: userData.photoURL }} style={styles.avatar} />\n-      ) : (\n-        <View style={styles.placeholderAvatar} />\n-      )}\n-\n-      <TouchableOpacity onPress={handleImageUpload}>\n-        <Text style={styles.link}>Change Profile Picture</Text>\n-      </TouchableOpacity>\n-\n-      {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n-\n-      <Text style={styles.info}>üë§ {userData?.displayName || user.displayName}</Text>\n-      <Text style={styles.info}>üìß {user.email}</Text>\n-\n-      <Button title=\"Log Out\" onPress={handleLogout} />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, alignItems: 'center', paddingTop: 60, backgroundColor: '#fff' },\n-  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },\n-  info: { fontSize: 16, marginTop: 8 },\n-  avatar: { width: 100, height: 100, borderRadius: 50, marginBottom: 10 },\n-  placeholderAvatar: {\n-    width: 100,\n-    height: 100,\n-    borderRadius: 50,\n-    backgroundColor: '#ccc',\n-    marginBottom: 10,\n-  },\n-  link: {\n-    color: '#007aff',\n-    textDecorationLine: 'underline',\n-    marginBottom: 20,\n-  },\n-});\n"
                },
                {
                    "date": 1749529881909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       </TouchableOpacity>\n \n       {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n \n-      <Text style={styles.info}>üë§ {userData?.displayName || user.displayName}</Text>\n+      <Text style={styles.info}>ü•¢ {userData?.displayName || user.displayName}</Text>\n       <Text style={styles.info}>üìß {user.email}</Text>\n \n       <Button title=\"Log Out\" onPress={handleLogout} />\n     </View>\n"
                },
                {
                    "date": 1749529916071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       </TouchableOpacity>\n \n       {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n \n-      <Text style={styles.info}>ü•¢ {userData?.displayName || user.displayName}</Text>\n+      <Text style={styles.info}> {userData?.displayName || user.displayName} ü•¢ </Text>\n       <Text style={styles.info}>üìß {user.email}</Text>\n \n       <Button title=\"Log Out\" onPress={handleLogout} />\n     </View>\n"
                },
                {
                    "date": 1749529946091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       </TouchableOpacity>\n \n       {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n \n-      <Text style={styles.info}> {userData?.displayName || user.displayName} ü•¢ </Text>\n+      <Text style={styles.info}> {userData?.displayName || user.displayName} üç¥ü•¢ </Text>\n       <Text style={styles.info}>üìß {user.email}</Text>\n \n       <Button title=\"Log Out\" onPress={handleLogout} />\n     </View>\n"
                },
                {
                    "date": 1749530010173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       </TouchableOpacity>\n \n       {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n \n-      <Text style={styles.info}> {userData?.displayName || user.displayName} üç¥ü•¢ </Text>\n+      <Text style={styles.info}>üçΩÔ∏è {userData?.displayName || user.displayName} </Text>\n       <Text style={styles.info}>üìß {user.email}</Text>\n \n       <Button title=\"Log Out\" onPress={handleLogout} />\n     </View>\n"
                },
                {
                    "date": 1749533028069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import { useEffect, useState } from 'react';\n+import { View, Text, Button, StyleSheet, Image, TouchableOpacity, ActivityIndicator } from 'react-native';\n+import { auth } from '../firebase';\n+import storage from '@react-native-firebase/storage';\n+import { ref as dbRef, get, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import * as ImagePicker from 'expo-image-picker';\n+import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n+import { Pressable } from 'react-native';\n+\n+\n+\n+export default function ProfileScreen() {\n+  type ProfileNavProp = NativeStackNavigationProp<RootStackParamList>;\n+  const navigation = useNavigation<ProfileNavProp>();\n+  const user = auth.currentUser;\n+  if (!user) return null;\n+  const [userData, setUserData] = useState<{ photoURL?: string; displayName?: string } | null>(null);\n+  const [imageUploading, setImageUploading] = useState(false);\n+\n+  useEffect(() => {\n+    const fetchUserData = async () => {\n+      const snapshot = await get(dbRef(db, `users/${user.uid}`));\n+      setUserData(snapshot.val());\n+    };\n+    fetchUserData();\n+  }, []);\n+\n+  const handleLogout = async () => {\n+    await auth.signOut();\n+    navigation.reset({ index: 0, routes: [{ name: 'Landing' }] });\n+  };\n+\n+  const handleImageUpload = async () => {\n+    const result = await ImagePicker.launchImageLibraryAsync({\n+      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n+      allowsEditing: true,\n+      quality: 0.7,\n+    });\n+\n+    if (!result.canceled && result.assets?.[0]?.uri) {\n+      try {\n+        setImageUploading(true);\n+        const uri = result.assets[0].uri;\n+        const response = await fetch(uri);\n+        const blob = await response.blob();\n+        const storageRef = storage().ref(`profile-pics/${user.uid}.jpg`);\n+        await storageRef.put(blob);\n+        const url = await storageRef.getDownloadURL();\n+\n+        \n+        setUserData((prev) => ({ ...prev, photoURL: url }));\n+\n+        await set(dbRef(db, `users/${user.uid}/photoURL`), url);\n+\n+      } catch (err) {\n+        console.error('Image upload failed', err);\n+      } finally {\n+        setImageUploading(false);\n+      }\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>üë§ Profile</Text>\n+\n+      {userData?.photoURL ? (\n+        <Image source={{ uri: userData.photoURL }} style={styles.avatar} />\n+      ) : (\n+        <View style={styles.placeholderAvatar} />\n+      )}\n+\n+      <TouchableOpacity onPress={handleImageUpload}>\n+        <Text style={styles.link}>Change Profile Picture</Text>\n+      </TouchableOpacity>\n+\n+      {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n+\n+      <Text style={styles.info}>üçΩÔ∏è {userData?.displayName || user.displayName} </Text>\n+      <Text style={styles.info}>üìß {user.email}</Text>\n+\n+      <Button title=\"Log Out\" onPress={handleLogout} />\n+      <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+        <Text style={styles.backButtonText}>‚Üê Go Back</Text>\n+     </Pressable>\n+\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, alignItems: 'center', paddingTop: 60, backgroundColor: '#fff' },\n+  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },\n+  info: { fontSize: 16, marginTop: 8 },\n+  avatar: { width: 100, height: 100, borderRadius: 50, marginBottom: 10 },\n+  placeholderAvatar: {\n+    width: 100,\n+    height: 100,\n+    borderRadius: 50,\n+    backgroundColor: '#ccc',\n+    marginBottom: 10,\n+  },\n+  link: {\n+    color: '#007aff',\n+    textDecorationLine: 'underline',\n+    marginBottom: 20,\n+  },\n+  backButton: {\n+    marginTop: 20,\n+    padding: 10,\n+    alignItems: 'center',\n+    borderRadius: 6,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n+\n+});\n"
                }
            ],
            "date": 1748642348287,
            "name": "Commit-0",
            "content": "// ‚úÖ ProfileScreen.tsx\nimport { useEffect, useState } from 'react';\nimport { View, Text, Button, StyleSheet, Image, TouchableOpacity, ActivityIndicator } from 'react-native';\nimport auth from '@react-native-firebase/auth';\nimport storage from '@react-native-firebase/storage';\nimport { ref as dbRef, get } from 'firebase/database';\nimport { db } from '../firebase';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useNavigation } from '@react-navigation/native';\n\nexport default function ProfileScreen() {\n  const navigation = useNavigation();\n  const user = auth().currentUser;\n  const [userData, setUserData] = useState(null);\n  const [imageUploading, setImageUploading] = useState(false);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      const snapshot = await get(dbRef(db, `users/${user.uid}`));\n      setUserData(snapshot.val());\n    };\n    fetchUserData();\n  }, []);\n\n  const handleLogout = async () => {\n    await auth().signOut();\n    navigation.reset({ index: 0, routes: [{ name: 'Landing' }] });\n  };\n\n  const handleImageUpload = async () => {\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      quality: 0.7,\n    });\n\n    if (!result.cancelled) {\n      try {\n        setImageUploading(true);\n        const response = await fetch(result.uri);\n        const blob = await response.blob();\n        const storageRef = storage().ref(`profile-pics/${user.uid}.jpg`);\n        await storageRef.put(blob);\n        const url = await storageRef.getDownloadURL();\n        setUserData((prev) => ({ ...prev, photoURL: url }));\n      } catch (err) {\n        console.error('Image upload failed', err);\n      } finally {\n        setImageUploading(false);\n      }\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>üë§ Profile</Text>\n      {userData?.photoURL ? (\n        <Image source={{ uri: userData.photoURL }} style={styles.avatar} />\n      ) : (\n        <View style={styles.placeholderAvatar} />\n      )}\n      <TouchableOpacity onPress={handleImageUpload}>\n        <Text style={styles.link}>Change Profile Picture</Text>\n      </TouchableOpacity>\n\n      {imageUploading && <ActivityIndicator style={{ marginTop: 10 }} />}\n\n      <Text style={styles.info}>üë§ {userData?.displayName || user.displayName}</Text>\n      <Text style={styles.info}>üìß {user.email}</Text>\n\n      <Button title=\"Log Out\" onPress={handleLogout} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, alignItems: 'center', paddingTop: 60, backgroundColor: '#fff' },\n  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },\n  info: { fontSize: 16, marginTop: 8 },\n  avatar: { width: 100, height: 100, borderRadius: 50, marginBottom: 10 },\n  placeholderAvatar: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n    backgroundColor: '#ccc',\n    marginBottom: 10,\n  },\n  link: {\n    color: '#007aff',\n    textDecorationLine: 'underline',\n    marginBottom: 20,\n  },\n});\n"
        }
    ]
}