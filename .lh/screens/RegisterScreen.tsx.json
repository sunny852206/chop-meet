{
    "sourceFile": "screens/RegisterScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1748643765902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748643906195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+// ✅ RegisterScreen.tsx\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n+import auth from '@react-native-firebase/auth';\n+import { ref, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import messaging from '@react-native-firebase/messaging';\n+\n+export default function RegisterScreen() {\n+  const [email, setEmail] = useState('');\n+  const [password, setPassword] = useState('');\n+  const [displayName, setDisplayName] = useState('');\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+\n+  const handleRegister = async () => {\n+    if (!displayName || !email || !password) {\n+      Alert.alert('Missing Fields', 'Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const userCredential = await auth().createUserWithEmailAndPassword(email, password);\n+      const user = userCredential.user;\n+\n+      await user.updateProfile({ displayName });\n+\n+      const fcmToken = await messaging().getToken();\n+\n+      await set(ref(db, `users/${user.uid}`), {\n+        email,\n+        displayName,\n+        photoURL: '',\n+        fcmToken: fcmToken || '',\n+      });\n+\n+      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+    } catch (error: any) {\n+      let message = 'Something went wrong.';\n+      if (error.code === 'auth/email-already-in-use') {\n+        message = 'This email address is already in use.';\n+      } else if (error.code === 'auth/invalid-email') {\n+        message = 'The email address is not valid.';\n+      } else if (error.code === 'auth/weak-password') {\n+        message = 'The password is too weak. Try something stronger.';\n+      }\n+      Alert.alert('Registration Failed', message);\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Register</Text>\n+      <TextInput\n+        placeholder=\"Display Name\"\n+        style={styles.input}\n+        value={displayName}\n+        onChangeText={setDisplayName}\n+      />\n+      <TextInput\n+        placeholder=\"Email\"\n+        style={styles.input}\n+        autoCapitalize=\"none\"\n+        value={email}\n+        onChangeText={setEmail}\n+      />\n+      <TextInput\n+        placeholder=\"Password\"\n+        style={styles.input}\n+        secureTextEntry\n+        value={password}\n+        onChangeText={setPassword}\n+      />\n+      <Pressable style={styles.button} onPress={handleRegister}>\n+        <Text style={styles.buttonText}>Sign Up</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, justifyContent: 'center', padding: 20 },\n+  title: {\n+    fontSize: 24,\n+    fontWeight: 'bold',\n+    marginBottom: 20,\n+    textAlign: 'center',\n+  },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 16,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 12,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1748650721455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+// ✅ RegisterScreen.tsx\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n+import { auth } from '../firebase';\n+import { ref, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import messaging from '@react-native-firebase/messaging';\n+\n+export default function RegisterScreen() {\n+  const [email, setEmail] = useState('');\n+  const [password, setPassword] = useState('');\n+  const [displayName, setDisplayName] = useState('');\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+\n+  const handleRegister = async () => {\n+    if (!displayName || !email || !password) {\n+      Alert.alert('Missing Fields', 'Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const userCredential = await auth().createUserWithEmailAndPassword(email, password);\n+      const user = userCredential.user;\n+\n+      await user.updateProfile({ displayName });\n+\n+      const fcmToken = await messaging().getToken();\n+\n+      await set(ref(db, `users/${user.uid}`), {\n+        email,\n+        displayName,\n+        photoURL: '',\n+        fcmToken: fcmToken || '',\n+      });\n+\n+      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+    } catch (error: any) {\n+      let message = 'Something went wrong.';\n+      if (error.code === 'auth/email-already-in-use') {\n+        message = 'This email address is already in use.';\n+      } else if (error.code === 'auth/invalid-email') {\n+        message = 'The email address is not valid.';\n+      } else if (error.code === 'auth/weak-password') {\n+        message = 'The password is too weak. Try something stronger.';\n+      }\n+      Alert.alert('Registration Failed', message);\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Register</Text>\n+      <TextInput\n+        placeholder=\"Display Name\"\n+        style={styles.input}\n+        value={displayName}\n+        onChangeText={setDisplayName}\n+      />\n+      <TextInput\n+        placeholder=\"Email\"\n+        style={styles.input}\n+        autoCapitalize=\"none\"\n+        value={email}\n+        onChangeText={setEmail}\n+      />\n+      <TextInput\n+        placeholder=\"Password\"\n+        style={styles.input}\n+        secureTextEntry\n+        value={password}\n+        onChangeText={setPassword}\n+      />\n+      <Pressable style={styles.button} onPress={handleRegister}>\n+        <Text style={styles.buttonText}>Sign Up</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, justifyContent: 'center', padding: 20 },\n+  title: {\n+    fontSize: 24,\n+    fontWeight: 'bold',\n+    marginBottom: 20,\n+    textAlign: 'center',\n+  },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 16,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 12,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1748650754373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import { useNavigation } from '@react-navigation/native';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RootStackParamList } from '../types/types';\n import { auth } from '../firebase';\n+import { createUserWithEmailAndPassword } from 'firebase/auth';\n import { ref, set } from 'firebase/database';\n import { db } from '../firebase';\n import messaging from '@react-native-firebase/messaging';\n \n@@ -28,9 +29,9 @@\n       return;\n     }\n \n     try {\n-      const userCredential = await auth().createUserWithEmailAndPassword(email, password);\n+      const userCredential = await createUserWithEmailAndPassword(email, password);\n       const user = userCredential.user;\n \n       await user.updateProfile({ displayName });\n \n"
                },
                {
                    "date": 1748650880268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RootStackParamList } from '../types/types';\n import { auth } from '../firebase';\n import { createUserWithEmailAndPassword } from 'firebase/auth';\n+import { updateProfile } from 'firebase/auth';\n import { ref, set } from 'firebase/database';\n import { db } from '../firebase';\n import messaging from '@react-native-firebase/messaging';\n \n@@ -29,12 +30,12 @@\n       return;\n     }\n \n     try {\n-      const userCredential = await createUserWithEmailAndPassword(email, password);\n+      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n       const user = userCredential.user;\n \n-      await user.updateProfile({ displayName });\n+      await updateProfile({ displayName });\n \n       const fcmToken = await messaging().getToken();\n \n       await set(ref(db, `users/${user.uid}`), {\n@@ -110,211 +111,4 @@\n     alignItems: 'center',\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n });\n-// ✅ RegisterScreen.tsx\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList } from '../types/types';\n-import auth from '@react-native-firebase/auth';\n-import { ref, set } from 'firebase/database';\n-import { db } from '../firebase';\n-import messaging from '@react-native-firebase/messaging';\n-\n-export default function RegisterScreen() {\n-  const [email, setEmail] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [displayName, setDisplayName] = useState('');\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-\n-  const handleRegister = async () => {\n-    if (!displayName || !email || !password) {\n-      Alert.alert('Missing Fields', 'Please fill in all fields.');\n-      return;\n-    }\n-\n-    try {\n-      const userCredential = await auth().createUserWithEmailAndPassword(email, password);\n-      const user = userCredential.user;\n-\n-      await user.updateProfile({ displayName });\n-\n-      const fcmToken = await messaging().getToken();\n-\n-      await set(ref(db, `users/${user.uid}`), {\n-        email,\n-        displayName,\n-        photoURL: '',\n-        fcmToken: fcmToken || '',\n-      });\n-\n-      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n-    } catch (error: any) {\n-      let message = 'Something went wrong.';\n-      if (error.code === 'auth/email-already-in-use') {\n-        message = 'This email address is already in use.';\n-      } else if (error.code === 'auth/invalid-email') {\n-        message = 'The email address is not valid.';\n-      } else if (error.code === 'auth/weak-password') {\n-        message = 'The password is too weak. Try something stronger.';\n-      }\n-      Alert.alert('Registration Failed', message);\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>Register</Text>\n-      <TextInput\n-        placeholder=\"Display Name\"\n-        style={styles.input}\n-        value={displayName}\n-        onChangeText={setDisplayName}\n-      />\n-      <TextInput\n-        placeholder=\"Email\"\n-        style={styles.input}\n-        autoCapitalize=\"none\"\n-        value={email}\n-        onChangeText={setEmail}\n-      />\n-      <TextInput\n-        placeholder=\"Password\"\n-        style={styles.input}\n-        secureTextEntry\n-        value={password}\n-        onChangeText={setPassword}\n-      />\n-      <Pressable style={styles.button} onPress={handleRegister}>\n-        <Text style={styles.buttonText}>Sign Up</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, justifyContent: 'center', padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: 'bold',\n-    marginBottom: 20,\n-    textAlign: 'center',\n-  },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 16,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 12,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n-// ✅ RegisterScreen.tsx\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList } from '../types/types';\n-import auth from '@react-native-firebase/auth';\n-import { ref, set } from 'firebase/database';\n-import { db } from '../firebase';\n-\n-export default function RegisterScreen() {\n-  const [email, setEmail] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [displayName, setDisplayName] = useState('');\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-\n-  const handleRegister = async () => {\n-    try {\n-      const userCredential = await auth().createUserWithEmailAndPassword(email, password);\n-      const user = userCredential.user;\n-\n-      await user.updateProfile({ displayName });\n-\n-      await set(ref(db, `users/${user.uid}`), {\n-        email,\n-        displayName,\n-        photoURL: '',\n-      });\n-\n-      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n-    } catch (error) {\n-      Alert.alert('Registration Failed', error.message);\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>Register</Text>\n-      <TextInput\n-        placeholder=\"Display Name\"\n-        style={styles.input}\n-        value={displayName}\n-        onChangeText={setDisplayName}\n-      />\n-      <TextInput\n-        placeholder=\"Email\"\n-        style={styles.input}\n-        autoCapitalize=\"none\"\n-        value={email}\n-        onChangeText={setEmail}\n-      />\n-      <TextInput\n-        placeholder=\"Password\"\n-        style={styles.input}\n-        secureTextEntry\n-        value={password}\n-        onChangeText={setPassword}\n-      />\n-      <Pressable style={styles.button} onPress={handleRegister}>\n-        <Text style={styles.buttonText}>Sign Up</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, justifyContent: 'center', padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: 'bold',\n-    marginBottom: 20,\n-    textAlign: 'center',\n-  },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 16,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 12,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n"
                },
                {
                    "date": 1748650906455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+// ✅ RegisterScreen.tsx\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n+import { auth } from '../firebase';\n+import { createUserWithEmailAndPassword } from 'firebase/auth';\n+import { updateProfile } from 'firebase/auth';\n+import { ref, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import messaging from '@react-native-firebase/messaging';\n+\n+export default function RegisterScreen() {\n+  const [email, setEmail] = useState('');\n+  const [password, setPassword] = useState('');\n+  const [displayName, setDisplayName] = useState('');\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+\n+  const handleRegister = async () => {\n+    if (!displayName || !email || !password) {\n+      Alert.alert('Missing Fields', 'Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n+      const user = userCredential.user;\n+\n+      await updateProfile(user, { displayName });\n+\n+      const fcmToken = await messaging().getToken();\n+\n+      await set(ref(db, `users/${user.uid}`), {\n+        email,\n+        displayName,\n+        photoURL: '',\n+        fcmToken: fcmToken || '',\n+      });\n+\n+      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+    } catch (error: any) {\n+      let message = 'Something went wrong.';\n+      if (error.code === 'auth/email-already-in-use') {\n+        message = 'This email address is already in use.';\n+      } else if (error.code === 'auth/invalid-email') {\n+        message = 'The email address is not valid.';\n+      } else if (error.code === 'auth/weak-password') {\n+        message = 'The password is too weak. Try something stronger.';\n+      }\n+      Alert.alert('Registration Failed', message);\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Register</Text>\n+      <TextInput\n+        placeholder=\"Display Name\"\n+        style={styles.input}\n+        value={displayName}\n+        onChangeText={setDisplayName}\n+      />\n+      <TextInput\n+        placeholder=\"Email\"\n+        style={styles.input}\n+        autoCapitalize=\"none\"\n+        value={email}\n+        onChangeText={setEmail}\n+      />\n+      <TextInput\n+        placeholder=\"Password\"\n+        style={styles.input}\n+        secureTextEntry\n+        value={password}\n+        onChangeText={setPassword}\n+      />\n+      <Pressable style={styles.button} onPress={handleRegister}>\n+        <Text style={styles.buttonText}>Sign Up</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, justifyContent: 'center', padding: 20 },\n+  title: {\n+    fontSize: 24,\n+    fontWeight: 'bold',\n+    marginBottom: 20,\n+    textAlign: 'center',\n+  },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 16,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 12,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1748650913630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,118 +111,4 @@\n     alignItems: 'center',\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n });\n-// ✅ RegisterScreen.tsx\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList } from '../types/types';\n-import { auth } from '../firebase';\n-import { createUserWithEmailAndPassword } from 'firebase/auth';\n-import { updateProfile } from 'firebase/auth';\n-import { ref, set } from 'firebase/database';\n-import { db } from '../firebase';\n-import messaging from '@react-native-firebase/messaging';\n-\n-export default function RegisterScreen() {\n-  const [email, setEmail] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [displayName, setDisplayName] = useState('');\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-\n-  const handleRegister = async () => {\n-    if (!displayName || !email || !password) {\n-      Alert.alert('Missing Fields', 'Please fill in all fields.');\n-      return;\n-    }\n-\n-    try {\n-      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n-      const user = userCredential.user;\n-\n-      await updateProfile({ displayName });\n-\n-      const fcmToken = await messaging().getToken();\n-\n-      await set(ref(db, `users/${user.uid}`), {\n-        email,\n-        displayName,\n-        photoURL: '',\n-        fcmToken: fcmToken || '',\n-      });\n-\n-      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n-    } catch (error: any) {\n-      let message = 'Something went wrong.';\n-      if (error.code === 'auth/email-already-in-use') {\n-        message = 'This email address is already in use.';\n-      } else if (error.code === 'auth/invalid-email') {\n-        message = 'The email address is not valid.';\n-      } else if (error.code === 'auth/weak-password') {\n-        message = 'The password is too weak. Try something stronger.';\n-      }\n-      Alert.alert('Registration Failed', message);\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>Register</Text>\n-      <TextInput\n-        placeholder=\"Display Name\"\n-        style={styles.input}\n-        value={displayName}\n-        onChangeText={setDisplayName}\n-      />\n-      <TextInput\n-        placeholder=\"Email\"\n-        style={styles.input}\n-        autoCapitalize=\"none\"\n-        value={email}\n-        onChangeText={setEmail}\n-      />\n-      <TextInput\n-        placeholder=\"Password\"\n-        style={styles.input}\n-        secureTextEntry\n-        value={password}\n-        onChangeText={setPassword}\n-      />\n-      <Pressable style={styles.button} onPress={handleRegister}>\n-        <Text style={styles.buttonText}>Sign Up</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, justifyContent: 'center', padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: 'bold',\n-    marginBottom: 20,\n-    textAlign: 'center',\n-  },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 16,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 12,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n"
                },
                {
                    "date": 1748651577724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,17 @@\n     }\n \n     try {\n       const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n+      if (!email || !password) {\n+      Alert.alert(\"Missing Fields\", \"Email and password are required.\");\n+      return;\n+    }\n+\n+    if (password.length < 6) {\n+      Alert.alert(\"Weak Password\", \"Password must be at least 6 characters.\");\n+      return;\n+    }\n       const user = userCredential.user;\n \n       await updateProfile(user, { displayName });\n \n"
                },
                {
                    "date": 1748651730116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,38 +10,34 @@\n import { useState } from 'react';\n import { useNavigation } from '@react-navigation/native';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import type { RootStackParamList } from '../types/types';\n-import { auth } from '../firebase';\n-import { createUserWithEmailAndPassword } from 'firebase/auth';\n-import { updateProfile } from 'firebase/auth';\n+import { auth, db } from '../firebase';\n+import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\n import { ref, set } from 'firebase/database';\n-import { db } from '../firebase';\n import messaging from '@react-native-firebase/messaging';\n \n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'Register'>;\n+\n export default function RegisterScreen() {\n   const [email, setEmail] = useState('');\n   const [password, setPassword] = useState('');\n   const [displayName, setDisplayName] = useState('');\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+  const navigation = useNavigation<NavigationProp>();\n \n   const handleRegister = async () => {\n     if (!displayName || !email || !password) {\n       Alert.alert('Missing Fields', 'Please fill in all fields.');\n       return;\n     }\n \n-    try {\n-      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n-      if (!email || !password) {\n-      Alert.alert(\"Missing Fields\", \"Email and password are required.\");\n+    if (password.length < 6) {\n+      Alert.alert('Weak Password', 'Password must be at least 6 characters.');\n       return;\n     }\n \n-    if (password.length < 6) {\n-      Alert.alert(\"Weak Password\", \"Password must be at least 6 characters.\");\n-      return;\n-    }\n+    try {\n+      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n       const user = userCredential.user;\n \n       await updateProfile(user, { displayName });\n \n@@ -53,25 +49,31 @@\n         photoURL: '',\n         fcmToken: fcmToken || '',\n       });\n \n-      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n+      navigation.reset({ index: 0, routes: [{ name: 'MainTabs' }] });\n+\n     } catch (error: any) {\n       let message = 'Something went wrong.';\n-      if (error.code === 'auth/email-already-in-use') {\n-        message = 'This email address is already in use.';\n-      } else if (error.code === 'auth/invalid-email') {\n-        message = 'The email address is not valid.';\n-      } else if (error.code === 'auth/weak-password') {\n-        message = 'The password is too weak. Try something stronger.';\n+      switch (error.code) {\n+        case 'auth/email-already-in-use':\n+          message = 'This email address is already in use.';\n+          break;\n+        case 'auth/invalid-email':\n+          message = 'The email address is not valid.';\n+          break;\n+        case 'auth/weak-password':\n+          message = 'The password is too weak. Try something stronger.';\n+          break;\n       }\n       Alert.alert('Registration Failed', message);\n     }\n   };\n \n   return (\n     <View style={styles.container}>\n       <Text style={styles.title}>Register</Text>\n+\n       <TextInput\n         placeholder=\"Display Name\"\n         style={styles.input}\n         value={displayName}\n@@ -79,19 +81,21 @@\n       />\n       <TextInput\n         placeholder=\"Email\"\n         style={styles.input}\n-        autoCapitalize=\"none\"\n         value={email}\n         onChangeText={setEmail}\n+        autoCapitalize=\"none\"\n+        keyboardType=\"email-address\"\n       />\n       <TextInput\n         placeholder=\"Password\"\n         style={styles.input}\n-        secureTextEntry\n         value={password}\n         onChangeText={setPassword}\n+        secureTextEntry\n       />\n+\n       <Pressable style={styles.button} onPress={handleRegister}>\n         <Text style={styles.buttonText}>Sign Up</Text>\n       </Pressable>\n     </View>\n@@ -99,14 +103,9 @@\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, justifyContent: 'center', padding: 20 },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: 'bold',\n-    marginBottom: 20,\n-    textAlign: 'center',\n-  },\n+  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },\n   input: {\n     borderWidth: 1,\n     borderColor: '#ccc',\n     borderRadius: 8,\n"
                },
                {
                    "date": 1748651809457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// ✅ RegisterScreen.tsx\n import {\n   View,\n   Text,\n   TextInput,\n"
                },
                {
                    "date": 1748652391629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n \n       navigation.reset({ index: 0, routes: [{ name: 'MainTabs' }] });\n \n     } catch (error: any) {\n+      console.log(\"🔥 Registration error:\", error)\n       let message = 'Something went wrong.';\n       switch (error.code) {\n         case 'auth/email-already-in-use':\n           message = 'This email address is already in use.';\n"
                },
                {
                    "date": 1748652730720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n   const [password, setPassword] = useState('');\n   const [displayName, setDisplayName] = useState('');\n   const navigation = useNavigation<NavigationProp>();\n \n+  console.log('🚀 Register button clicked');\n   const handleRegister = async () => {\n     if (!displayName || !email || !password) {\n       Alert.alert('Missing Fields', 'Please fill in all fields.');\n       return;\n"
                },
                {
                    "date": 1748652735882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList } from '../types/types';\n+import { auth, db } from '../firebase';\n+import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\n+import { ref, set } from 'firebase/database';\n+import messaging from '@react-native-firebase/messaging';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'Register'>;\n+\n+export default function RegisterScreen() {\n+  const [email, setEmail] = useState('');\n+  const [password, setPassword] = useState('');\n+  const [displayName, setDisplayName] = useState('');\n+  const navigation = useNavigation<NavigationProp>();\n+\n+  console.log('🚀 Register button clicked');\n+  const handleRegister = async () => {\n+    if (!displayName || !email || !password) {\n+      Alert.alert('Missing Fields', 'Please fill in all fields.');\n+      return;\n+    }\n+\n+    if (password.length < 6) {\n+      Alert.alert('Weak Password', 'Password must be at least 6 characters.');\n+      return;\n+    }\n+\n+    try {\n+      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n+      const user = userCredential.user;\n+\n+      await updateProfile(user, { displayName });\n+\n+      const fcmToken = await messaging().getToken();\n+\n+      await set(ref(db, `users/${user.uid}`), {\n+        email,\n+        displayName,\n+        photoURL: '',\n+        fcmToken: fcmToken || '',\n+      });\n+\n+      navigation.reset({ index: 0, routes: [{ name: 'MainTabs' }] });\n+\n+    } catch (error: any) {\n+      console.log(\"🔥 Registration error:\", error)\n+      let message = 'Something went wrong.';\n+      switch (error.code) {\n+        case 'auth/email-already-in-use':\n+          message = 'This email address is already in use.';\n+          break;\n+        case 'auth/invalid-email':\n+          message = 'The email address is not valid.';\n+          break;\n+        case 'auth/weak-password':\n+          message = 'The password is too weak. Try something stronger.';\n+          break;\n+      }\n+      Alert.alert('Registration Failed', message);\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>Register</Text>\n+\n+      <TextInput\n+        placeholder=\"Display Name\"\n+        style={styles.input}\n+        value={displayName}\n+        onChangeText={setDisplayName}\n+      />\n+      <TextInput\n+        placeholder=\"Email\"\n+        style={styles.input}\n+        value={email}\n+        onChangeText={setEmail}\n+        autoCapitalize=\"none\"\n+        keyboardType=\"email-address\"\n+      />\n+      <TextInput\n+        placeholder=\"Password\"\n+        style={styles.input}\n+        value={password}\n+        onChangeText={setPassword}\n+        secureTextEntry\n+      />\n+\n+      <Pressable style={styles.button} onPress={handleRegister}>\n+        <Text style={styles.buttonText}>Sign Up</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, justifyContent: 'center', padding: 20 },\n+  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 16,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 12,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749521366924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n       await set(ref(db, `users/${user.uid}`), {\n         email,\n         displayName,\n         photoURL: '',\n-        fcmToken: fcmToken || '',\n       });\n \n       navigation.reset({ index: 0, routes: [{ name: 'MainTabs' }] });\n \n@@ -120,127 +119,4 @@\n     alignItems: 'center',\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList } from '../types/types';\n-import { auth, db } from '../firebase';\n-import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\n-import { ref, set } from 'firebase/database';\n-import messaging from '@react-native-firebase/messaging';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'Register'>;\n-\n-export default function RegisterScreen() {\n-  const [email, setEmail] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [displayName, setDisplayName] = useState('');\n-  const navigation = useNavigation<NavigationProp>();\n-\n-  console.log('🚀 Register button clicked');\n-  const handleRegister = async () => {\n-    if (!displayName || !email || !password) {\n-      Alert.alert('Missing Fields', 'Please fill in all fields.');\n-      return;\n-    }\n-\n-    if (password.length < 6) {\n-      Alert.alert('Weak Password', 'Password must be at least 6 characters.');\n-      return;\n-    }\n-\n-    try {\n-      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n-      const user = userCredential.user;\n-\n-      await updateProfile(user, { displayName });\n-\n-      const fcmToken = await messaging().getToken();\n-\n-      await set(ref(db, `users/${user.uid}`), {\n-        email,\n-        displayName,\n-        photoURL: '',\n-        fcmToken: fcmToken || '',\n-      });\n-\n-      navigation.reset({ index: 0, routes: [{ name: 'MainTabs' }] });\n-\n-    } catch (error: any) {\n-      console.log(\"🔥 Registration error:\", error)\n-      let message = 'Something went wrong.';\n-      switch (error.code) {\n-        case 'auth/email-already-in-use':\n-          message = 'This email address is already in use.';\n-          break;\n-        case 'auth/invalid-email':\n-          message = 'The email address is not valid.';\n-          break;\n-        case 'auth/weak-password':\n-          message = 'The password is too weak. Try something stronger.';\n-          break;\n-      }\n-      Alert.alert('Registration Failed', message);\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>Register</Text>\n-\n-      <TextInput\n-        placeholder=\"Display Name\"\n-        style={styles.input}\n-        value={displayName}\n-        onChangeText={setDisplayName}\n-      />\n-      <TextInput\n-        placeholder=\"Email\"\n-        style={styles.input}\n-        value={email}\n-        onChangeText={setEmail}\n-        autoCapitalize=\"none\"\n-        keyboardType=\"email-address\"\n-      />\n-      <TextInput\n-        placeholder=\"Password\"\n-        style={styles.input}\n-        value={password}\n-        onChangeText={setPassword}\n-        secureTextEntry\n-      />\n-\n-      <Pressable style={styles.button} onPress={handleRegister}>\n-        <Text style={styles.buttonText}>Sign Up</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, justifyContent: 'center', padding: 20 },\n-  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 16,\n-  },\n-  button: {\n-    backgroundColor: '#007aff',\n-    padding: 12,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-});\n"
                }
            ],
            "date": 1748643765902,
            "name": "Commit-0",
            "content": "// ✅ RegisterScreen.tsx\nimport {\n  View,\n  Text,\n  TextInput,\n  Pressable,\n  StyleSheet,\n  Alert,\n} from 'react-native';\nimport { useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport type { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport type { RootStackParamList } from '../types/types';\nimport auth from '@react-native-firebase/auth';\nimport { ref, set } from 'firebase/database';\nimport { db } from '../firebase';\n\nexport default function RegisterScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [displayName, setDisplayName] = useState('');\n  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n\n  const handleRegister = async () => {\n    try {\n      const userCredential = await auth().createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      await user.updateProfile({ displayName });\n\n      await set(ref(db, `users/${user.uid}`), {\n        email,\n        displayName,\n        photoURL: '',\n      });\n\n      navigation.reset({ index: 0, routes: [{ name: 'MealList' }] });\n    } catch (error) {\n      Alert.alert('Registration Failed', error.message);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Register</Text>\n      <TextInput\n        placeholder=\"Display Name\"\n        style={styles.input}\n        value={displayName}\n        onChangeText={setDisplayName}\n      />\n      <TextInput\n        placeholder=\"Email\"\n        style={styles.input}\n        autoCapitalize=\"none\"\n        value={email}\n        onChangeText={setEmail}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        style={styles.input}\n        secureTextEntry\n        value={password}\n        onChangeText={setPassword}\n      />\n      <Pressable style={styles.button} onPress={handleRegister}>\n        <Text style={styles.buttonText}>Sign Up</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: 'center', padding: 20 },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  button: {\n    backgroundColor: '#007aff',\n    padding: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  buttonText: { color: '#fff', fontWeight: '600' },\n});\n"
        }
    ]
}