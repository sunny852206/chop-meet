{
    "sourceFile": "screens/CreateMealScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1748638721122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748639725829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,156 +7,166 @@\n   ScrollView,\n   Platform,\n } from \"react-native\";\n import { useState } from \"react\";\n+import DateTimePicker from \"@react-native-community/datetimepicker\";\n import { useNavigation, useRoute } from \"@react-navigation/native\";\n-import DateTimePicker from \"@react-native-community/datetimepicker\";\n-\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n+import type { RootStackParamList } from \"../types\";\n import type { Meal } from \"../types\";\n-import uuid from \"react-native-uuid\";\n \n export default function CreateMealScreen() {\n   const [title, setTitle] = useState(\"\");\n   const [mealType, setMealType] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n   const [location, setLocation] = useState(\"\");\n   const [time, setTime] = useState(\"\");\n+  const [date, setDate] = useState(new Date());\n   const [budget, setBudget] = useState(\"\");\n   const [cuisine, setCuisine] = useState(\"\");\n-  const [date, setDate] = useState<Date>(new Date());\n-  const [showPicker, setShowPicker] = useState(false);\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n \n-  const navigation = useNavigation();\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n   const route = useRoute();\n+  const { addMeal, userId } = route.params || {};\n \n-  // @ts-ignore\n-  const addMeal = route.params?.addMeal as (meal: Meal) => void;\n+  const handleCreate = () => {\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      alert(\"Please fill in all fields.\");\n+      return;\n+    }\n \n-  const handleSubmit = () => {\n-    if (!title.trim()) return;\n-\n     const newMeal: Meal = {\n-      id: uuid.v4().toString(),\n+      id: `${Date.now()}`,\n       title,\n       mealType,\n       location,\n       time,\n+      date: date.toISOString().split(\"T\")[0], // YYYY-MM-DD\n       budget,\n       cuisine,\n       people: 1,\n       max: 4,\n-      createdByMe: true,\n-      date: date.toISOString(),\n+      creatorId: userId,\n+      joinedIds: [userId],\n     };\n \n     addMeal(newMeal);\n     navigation.goBack();\n   };\n \n   return (\n     <ScrollView contentContainerStyle={styles.container}>\n-      <Text style={styles.title}>Create Meal Event</Text>\n+      <Text style={styles.title}>üç¥ Create a Meal Event</Text>\n \n       <TextInput\n-        placeholder=\"Enter title (e.g. Ramen Danbo)\"\n+        style={styles.input}\n+        placeholder=\"Event Title\"\n         value={title}\n         onChangeText={setTitle}\n-        style={styles.input}\n       />\n-      <TextInput placeholder=\"Location\" value={location} onChangeText={setLocation} style={styles.input} />\n-      <TextInput placeholder=\"Time\" value={time} onChangeText={setTime} style={styles.input} />\n-      <TextInput placeholder=\"Budget\" value={budget} onChangeText={setBudget} style={styles.input} />\n-      <TextInput placeholder=\"Cuisine\" value={cuisine} onChangeText={setCuisine} style={styles.input} />\n \n-      <Pressable onPress={() => setShowPicker(true)} style={styles.dateButton}>\n-        <Text style={styles.dateButtonText}>\n-          üìÖ {date.toDateString()}\n-        </Text>\n-      </Pressable>\n-\n-      {showPicker && (\n-        <DateTimePicker\n-          value={date}\n-          mode=\"date\"\n-          display={Platform.OS === \"ios\" ? \"inline\" : \"default\"}\n-          onChange={(_, selectedDate) => {\n-            setShowPicker(false);\n-            if (selectedDate) setDate(selectedDate);\n-          }}\n-        />\n-      )}\n-\n       <View style={styles.toggleContainer}>\n         <Pressable\n-          style={[\n-            styles.toggleButton,\n-            mealType === \"Meal Buddy\" && styles.activeToggle,\n-          ]}\n+          style={[styles.toggleButton, mealType === \"Meal Buddy\" && styles.activeToggle]}\n           onPress={() => setMealType(\"Meal Buddy\")}\n         >\n-          <Text>üçú Just Dinner</Text>\n+          <Text>üçú Meal Buddy</Text>\n         </Pressable>\n         <Pressable\n-          style={[\n-            styles.toggleButton,\n-            mealType === \"Open to More\" && styles.activeToggle,\n-          ]}\n+          style={[styles.toggleButton, mealType === \"Open to More\" && styles.activeToggle]}\n           onPress={() => setMealType(\"Open to More\")}\n         >\n           <Text>‚ù§Ô∏è Open to More</Text>\n         </Pressable>\n       </View>\n \n-      <Pressable style={styles.submitButton} onPress={handleSubmit}>\n-        <Text style={styles.submitText}>Submit</Text>\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Location\"\n+        value={location}\n+        onChangeText={setLocation}\n+      />\n+\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Time (e.g. 6:30 PM)\"\n+        value={time}\n+        onChangeText={setTime}\n+      />\n+\n+      <Pressable onPress={() => setShowDatePicker(true)} style={styles.dateButton}>\n+        <Text style={styles.dateButtonText}>üìÖ {date.toDateString()}</Text>\n       </Pressable>\n+      {showDatePicker && (\n+        <DateTimePicker\n+          value={date}\n+          mode=\"date\"\n+          display={Platform.OS === \"ios\" ? \"spinner\" : \"default\"}\n+          onChange={(event, selectedDate) => {\n+            setShowDatePicker(false);\n+            if (selectedDate) setDate(selectedDate);\n+          }}\n+        />\n+      )}\n+\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Budget (e.g. $20-30)\"\n+        value={budget}\n+        onChangeText={setBudget}\n+      />\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Cuisine Type\"\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+      />\n+\n+      <Pressable style={styles.createButton} onPress={handleCreate}>\n+        <Text style={styles.createButtonText}>‚úîÔ∏è Submit Meal</Text>\n+      </Pressable>\n     </ScrollView>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { padding: 20, paddingBottom: 60 },\n+  container: { padding: 20, backgroundColor: \"#fff\" },\n   title: { fontSize: 22, fontWeight: \"bold\", marginBottom: 16 },\n   input: {\n     borderWidth: 1,\n     borderColor: \"#ccc\",\n     padding: 12,\n-    borderRadius: 10,\n-    marginBottom: 16,\n+    borderRadius: 8,\n+    marginBottom: 12,\n   },\n-  toggleContainer: {\n-    flexDirection: \"row\",\n-    justifyContent: \"center\",\n-    marginBottom: 20,\n-  },\n+  toggleContainer: { flexDirection: \"row\", justifyContent: \"center\", gap: 10, marginBottom: 16 },\n   toggleButton: {\n-    paddingVertical: 8,\n-    paddingHorizontal: 16,\n-    marginHorizontal: 6,\n-    borderRadius: 20,\n-    backgroundColor: \"#eee\",\n+    padding: 10,\n+    borderWidth: 1,\n+    borderColor: \"#ccc\",\n+    borderRadius: 8,\n   },\n-  activeToggle: {\n-    backgroundColor: \"#007aff\",\n-  },\n+  activeToggle: { backgroundColor: \"#d0ebff\" },\n   dateButton: {\n-    backgroundColor: \"#eaeaea\",\n     padding: 12,\n-    borderRadius: 10,\n-    alignItems: \"center\",\n-    marginBottom: 16,\n+    borderWidth: 1,\n+    borderColor: \"#aaa\",\n+    borderRadius: 8,\n+    marginBottom: 12,\n+    backgroundColor: \"#f5f5f5\",\n   },\n   dateButtonText: {\n-    color: \"#333\",\n-    fontWeight: \"600\",\n+    fontSize: 16,\n   },\n-  submitButton: {\n-    backgroundColor: \"#007aff\",\n+  createButton: {\n+    backgroundColor: \"#4caf50\",\n     padding: 14,\n     borderRadius: 10,\n     alignItems: \"center\",\n-    marginTop: 10,\n+    marginTop: 16,\n   },\n-  submitText: {\n+  createButtonText: {\n     color: \"#fff\",\n-    fontWeight: \"bold\",\n+    fontSize: 16,\n+    fontWeight: \"600\",\n   },\n });\n"
                },
                {
                    "date": 1748640091580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,11 +120,20 @@\n         value={cuisine}\n         onChangeText={setCuisine}\n       />\n \n-      <Pressable style={styles.createButton} onPress={handleCreate}>\n-        <Text style={styles.createButtonText}>‚úîÔ∏è Submit Meal</Text>\n-      </Pressable>\n+      <Pressable\n+        style={styles.createButton}\n+        onPress={() => {\n+          navigation.navigate(\"CreateMeal\", {\n+            addMeal: handleAddMeal,\n+            userId, // ‚úÖ ÂÇ≥Áµ¶ CreateMealScreen ‰ΩøÁî®\n+          });\n+  }}\n+>\n+  <Text style={styles.createButtonText}>Ôºã Create Meal Event</Text>\n+</Pressable>\n+\n     </ScrollView>\n   );\n }\n \n"
                },
                {
                    "date": 1748640838006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  ScrollView,\n+  Platform,\n+} from \"react-native\";\n+import { useState } from \"react\";\n+import DateTimePicker from \"@react-native-community/datetimepicker\";\n+import { useNavigation, useRoute } from \"@react-navigation/native\";\n+import { db } from \"../firebase\";\n+import { ref, push, set } from \"firebase/database\";\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n+import type { RootStackParamList } from \"../types\";\n+import type { Meal } from \"../types\";\n+\n+export default function CreateMealScreen() {\n+  const [title, setTitle] = useState(\"\");\n+  const [mealType, setMealType] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n+  const [location, setLocation] = useState(\"\");\n+  const [time, setTime] = useState(\"\");\n+  const [date, setDate] = useState(new Date());\n+  const [budget, setBudget] = useState(\"\");\n+  const [cuisine, setCuisine] = useState(\"\");\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n+\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+  const route = useRoute();\n+  const { addMeal, userId } = route.params || {};\n+\n+  const handleCreate = async () => {\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      alert(\"Please fill in all fields.\");\n+      return;\n+    }\n+\n+    const newMeal: Meal = {\n+      id: `${Date.now()}`,\n+      title,\n+      mealType,\n+      location,\n+      time,\n+      date: date.toISOString().split(\"T\")[0],\n+      budget,\n+      cuisine,\n+      people: 1,\n+      max: 4,\n+      creatorId: userId,\n+      joinedIds: [userId],\n+    };\n+\n+    try {\n+      const newMealRef = push(ref(db, \"meals\"));\n+      await set(newMealRef, newMeal);\n+\n+      addMeal(newMeal);\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error(\"Failed to upload meal to Firebase\", err);\n+      alert(\"Failed to create meal. Please try again.\");\n+    }\n+  };\n+\n+  return (\n+    <ScrollView contentContainerStyle={styles.container}>\n+      <Text style={styles.title}>üç¥ Create a Meal Event</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Event Title\"\n+        value={title}\n+        onChangeText={setTitle}\n+      />\n+\n+      <View style={styles.toggleContainer}>\n+        <Pressable\n+          style={[styles.toggleButton, mealType === \"Meal Buddy\" && styles.activeToggle]}\n+          onPress={() => setMealType(\"Meal Buddy\")}\n+        >\n+          <Text>üçú Meal Buddy</Text>\n+        </Pressable>\n+        <Pressable\n+          style={[styles.toggleButton, mealType === \"Open to More\" && styles.activeToggle]}\n+          onPress={() => setMealType(\"Open to More\")}\n+        >\n+          <Text>‚ù§Ô∏è Open to More</Text>\n+        </Pressable>\n+      </View>\n+\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Location\"\n+        value={location}\n+        onChangeText={setLocation}\n+      />\n+\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Time (e.g. 6:30 PM)\"\n+        value={time}\n+        onChangeText={setTime}\n+      />\n+\n+      <Pressable onPress={() => setShowDatePicker(true)} style={styles.dateButton}>\n+        <Text style={styles.dateButtonText}>üìÖ {date.toDateString()}</Text>\n+      </Pressable>\n+      {showDatePicker && (\n+        <DateTimePicker\n+          value={date}\n+          mode=\"date\"\n+          display={Platform.OS === \"ios\" ? \"spinner\" : \"default\"}\n+          onChange={(event, selectedDate) => {\n+            setShowDatePicker(false);\n+            if (selectedDate) setDate(selectedDate);\n+          }}\n+        />\n+      )}\n+\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Budget (e.g. $20-30)\"\n+        value={budget}\n+        onChangeText={setBudget}\n+      />\n+      <TextInput\n+        style={styles.input}\n+        placeholder=\"Cuisine Type\"\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+      />\n+\n+      <Pressable style={styles.createButton} onPress={handleCreate}>\n+        <Text style={styles.createButtonText}>‚úîÔ∏è Submit Meal</Text>\n+      </Pressable>\n+    </ScrollView>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { padding: 20, backgroundColor: \"#fff\" },\n+  title: { fontSize: 22, fontWeight: \"bold\", marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: \"#ccc\",\n+    padding: 12,\n+    borderRadius: 8,\n+    marginBottom: 12,\n+  },\n+  toggleContainer: {\n+    flexDirection: \"row\",\n+    justifyContent: \"center\",\n+    gap: 10,\n+    marginBottom: 16,\n+  },\n+  toggleButton: {\n+    padding: 10,\n+    borderWidth: 1,\n+    borderColor: \"#ccc\",\n+    borderRadius: 8,\n+  },\n+  activeToggle: { backgroundColor: \"#d0ebff\" },\n+  dateButton: {\n+    padding: 12,\n+    borderWidth: 1,\n+    borderColor: \"#aaa\",\n+    borderRadius: 8,\n+    marginBottom: 12,\n+    backgroundColor: \"#f5f5f5\",\n+  },\n+  dateButtonText: {\n+    fontSize: 16,\n+  },\n+  createButton: {\n+    backgroundColor: \"#4caf50\",\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: \"center\",\n+    marginTop: 16,\n+  },\n+  createButtonText: {\n+    color: \"#fff\",\n+    fontSize: 16,\n+    fontWeight: \"600\",\n+  },\n+});\n"
                },
                {
                    "date": 1748641257329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,32 +35,33 @@\n       alert(\"Please fill in all fields.\");\n       return;\n     }\n \n-    const newMeal: Meal = {\n-      id: `${Date.now()}`,\n-      title,\n-      mealType,\n-      location,\n-      time,\n-      date: date.toISOString().split(\"T\")[0],\n-      budget,\n-      cuisine,\n-      people: 1,\n-      max: 4,\n-      creatorId: userId,\n-      joinedIds: [userId],\n-    };\n-\n     try {\n-      const newMealRef = push(ref(db, \"meals\"));\n-      await set(newMealRef, newMeal);\n+      const newMealRef = push(ref(db, \"meals\")); // ‚úÖ Firebase Áî¢Áîü ID\n+      const newId = newMealRef.key;\n \n-      addMeal(newMeal);\n-      navigation.goBack();\n+      const newMeal: Meal = {\n+        id: newId!,\n+        title,\n+        mealType,\n+        location,\n+        time,\n+        date: date.toISOString().split(\"T\")[0],\n+        budget,\n+        cuisine,\n+        people: 1,\n+        max: 4,\n+        creatorId: userId,\n+        joinedIds: [userId],\n+      };\n+\n+      await set(newMealRef, newMeal); // ‚úÖ ÂØ´ÂÖ• Firebase\n+      addMeal(newMeal);               // ‚úÖ Êú¨Âú∞ UI ÂêåÊ≠•Êõ¥Êñ∞\n+      navigation.goBack();            // ‚úÖ ÂõûÈ¶ñÈ†Å\n     } catch (err) {\n-      console.error(\"Failed to upload meal to Firebase\", err);\n-      alert(\"Failed to create meal. Please try again.\");\n+      console.error(\"Failed to create meal:\", err);\n+      alert(\"Something went wrong. Please try again.\");\n     }\n   };\n \n   return (\n"
                },
                {
                    "date": 1748646276158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,186 +3,113 @@\n   Text,\n   TextInput,\n   Pressable,\n   StyleSheet,\n-  ScrollView,\n   Platform,\n-} from \"react-native\";\n-import { useState } from \"react\";\n-import DateTimePicker from \"@react-native-community/datetimepicker\";\n-import { useNavigation, useRoute } from \"@react-navigation/native\";\n-import { db } from \"../firebase\";\n-import { ref, push, set } from \"firebase/database\";\n-import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n-import type { RootStackParamList } from \"../types\";\n-import type { Meal } from \"../types\";\n+} from 'react-native';\n+import { useState } from 'react';\n+import DateTimePicker from '@react-native-community/datetimepicker';\n+import { useNavigation, useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import { ref, push } from 'firebase/database';\n+import { db } from '../firebase';\n+import type { RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n export default function CreateMealScreen() {\n-  const [title, setTitle] = useState(\"\");\n-  const [mealType, setMealType] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n-  const [location, setLocation] = useState(\"\");\n-  const [time, setTime] = useState(\"\");\n+  const [title, setTitle] = useState('');\n+  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n+  const [location, setLocation] = useState('');\n+  const [time, setTime] = useState('');\n   const [date, setDate] = useState(new Date());\n-  const [budget, setBudget] = useState(\"\");\n-  const [cuisine, setCuisine] = useState(\"\");\n-  const [showDatePicker, setShowDatePicker] = useState(false);\n+  const [budget, setBudget] = useState('');\n+  const [cuisine, setCuisine] = useState('');\n \n+  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const route = useRoute();\n-  const { addMeal, userId } = route.params || {};\n+  const { addMeal, userId } = route.params;\n \n   const handleCreate = async () => {\n     if (!title || !location || !time || !budget || !cuisine || !userId) {\n-      alert(\"Please fill in all fields.\");\n+      alert('Please fill in all fields.');\n       return;\n     }\n \n     try {\n-      const newMealRef = push(ref(db, \"meals\")); // ‚úÖ Firebase Áî¢Áîü ID\n-      const newId = newMealRef.key;\n-\n-      const newMeal: Meal = {\n-        id: newId!,\n+      const newMealRef = push(ref(db, 'meals'));\n+      const newMeal = {\n+        id: newMealRef.key,\n         title,\n         mealType,\n         location,\n         time,\n-        date: date.toISOString().split(\"T\")[0],\n+        date: date.toISOString().split('T')[0],\n         budget,\n         cuisine,\n-        people: 1,\n-        max: 4,\n         creatorId: userId,\n         joinedIds: [userId],\n       };\n \n-      await set(newMealRef, newMeal); // ‚úÖ ÂØ´ÂÖ• Firebase\n-      addMeal(newMeal);               // ‚úÖ Êú¨Âú∞ UI ÂêåÊ≠•Êõ¥Êñ∞\n-      navigation.goBack();            // ‚úÖ ÂõûÈ¶ñÈ†Å\n+      await newMealRef.set(newMeal);\n+      addMeal(newMeal); // Êõ¥Êñ∞ local state if needed\n+      navigation.goBack();\n     } catch (err) {\n-      console.error(\"Failed to create meal:\", err);\n-      alert(\"Something went wrong. Please try again.\");\n+      console.error('Failed to create meal:', err);\n+      alert('Failed to create meal.');\n     }\n   };\n \n   return (\n-    <ScrollView contentContainerStyle={styles.container}>\n-      <Text style={styles.title}>üç¥ Create a Meal Event</Text>\n+    <View style={styles.container}>\n+      <Text style={styles.label}>üç± Title</Text>\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n \n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Event Title\"\n-        value={title}\n-        onChangeText={setTitle}\n-      />\n+      <Text style={styles.label}>üìç Location</Text>\n+      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n \n-      <View style={styles.toggleContainer}>\n-        <Pressable\n-          style={[styles.toggleButton, mealType === \"Meal Buddy\" && styles.activeToggle]}\n-          onPress={() => setMealType(\"Meal Buddy\")}\n-        >\n-          <Text>üçú Meal Buddy</Text>\n-        </Pressable>\n-        <Pressable\n-          style={[styles.toggleButton, mealType === \"Open to More\" && styles.activeToggle]}\n-          onPress={() => setMealType(\"Open to More\")}\n-        >\n-          <Text>‚ù§Ô∏è Open to More</Text>\n-        </Pressable>\n-      </View>\n+      <Text style={styles.label}>üï∞ Time</Text>\n+      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n \n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Location\"\n-        value={location}\n-        onChangeText={setLocation}\n+      <Text style={styles.label}>üìÖ Date</Text>\n+      <DateTimePicker\n+        value={date}\n+        mode=\"date\"\n+        display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n+        onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n       />\n \n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Time (e.g. 6:30 PM)\"\n-        value={time}\n-        onChangeText={setTime}\n-      />\n+      <Text style={styles.label}>üí∞ Budget</Text>\n+      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n \n-      <Pressable onPress={() => setShowDatePicker(true)} style={styles.dateButton}>\n-        <Text style={styles.dateButtonText}>üìÖ {date.toDateString()}</Text>\n-      </Pressable>\n-      {showDatePicker && (\n-        <DateTimePicker\n-          value={date}\n-          mode=\"date\"\n-          display={Platform.OS === \"ios\" ? \"spinner\" : \"default\"}\n-          onChange={(event, selectedDate) => {\n-            setShowDatePicker(false);\n-            if (selectedDate) setDate(selectedDate);\n-          }}\n-        />\n-      )}\n+      <Text style={styles.label}>üçú Cuisine</Text>\n+      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n \n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Budget (e.g. $20-30)\"\n-        value={budget}\n-        onChangeText={setBudget}\n-      />\n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Cuisine Type\"\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-      />\n-\n-      <Pressable style={styles.createButton} onPress={handleCreate}>\n-        <Text style={styles.createButtonText}>‚úîÔ∏è Submit Meal</Text>\n+      <Pressable onPress={handleCreate} style={styles.button}>\n+        <Text style={styles.buttonText}>Create Meal</Text>\n       </Pressable>\n-    </ScrollView>\n+    </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { padding: 20, backgroundColor: \"#fff\" },\n-  title: { fontSize: 22, fontWeight: \"bold\", marginBottom: 16 },\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  label: { fontWeight: 'bold', marginTop: 12 },\n   input: {\n     borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    padding: 12,\n+    borderColor: '#ccc',\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n     borderRadius: 8,\n-    marginBottom: 12,\n+    marginTop: 4,\n   },\n-  toggleContainer: {\n-    flexDirection: \"row\",\n-    justifyContent: \"center\",\n-    gap: 10,\n-    marginBottom: 16,\n-  },\n-  toggleButton: {\n-    padding: 10,\n-    borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    borderRadius: 8,\n-  },\n-  activeToggle: { backgroundColor: \"#d0ebff\" },\n-  dateButton: {\n-    padding: 12,\n-    borderWidth: 1,\n-    borderColor: \"#aaa\",\n-    borderRadius: 8,\n-    marginBottom: 12,\n-    backgroundColor: \"#f5f5f5\",\n-  },\n-  dateButtonText: {\n-    fontSize: 16,\n-  },\n-  createButton: {\n-    backgroundColor: \"#4caf50\",\n+  button: {\n+    marginTop: 20,\n+    backgroundColor: '#007aff',\n     padding: 14,\n     borderRadius: 10,\n-    alignItems: \"center\",\n-    marginTop: 16,\n+    alignItems: 'center',\n   },\n-  createButtonText: {\n-    color: \"#fff\",\n-    fontSize: 16,\n-    fontWeight: \"600\",\n+  buttonText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n   },\n });\n"
                },
                {
                    "date": 1748646472266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n import { useState } from 'react';\n import DateTimePicker from '@react-native-community/datetimepicker';\n import { useNavigation, useRoute } from '@react-navigation/native';\n import type { RouteProp } from '@react-navigation/native';\n-import { ref, push } from 'firebase/database';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { ref, push, set } from 'firebase/database';\n import { db } from '../firebase';\n-import type { RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList, Meal } from '../types';\n \n export default function CreateMealScreen() {\n   const [title, setTitle] = useState('');\n   const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n@@ -35,10 +35,11 @@\n     }\n \n     try {\n       const newMealRef = push(ref(db, 'meals'));\n-      const newMeal = {\n-        id: newMealRef.key,\n+\n+      const newMeal: Meal = {\n+        id: newMealRef.key ?? '',\n         title,\n         mealType,\n         location,\n         time,\n@@ -48,10 +49,10 @@\n         creatorId: userId,\n         joinedIds: [userId],\n       };\n \n-      await newMealRef.set(newMeal);\n-      addMeal(newMeal); // Êõ¥Êñ∞ local state if needed\n+      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n+      addMeal(newMeal);\n       navigation.goBack();\n     } catch (err) {\n       console.error('Failed to create meal:', err);\n       alert('Failed to create meal.');\n@@ -112,185 +113,4 @@\n     color: '#fff',\n     fontWeight: 'bold',\n   },\n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  ScrollView,\n-  Platform,\n-} from \"react-native\";\n-import { useState } from \"react\";\n-import DateTimePicker from \"@react-native-community/datetimepicker\";\n-import { useNavigation, useRoute } from \"@react-navigation/native\";\n-import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n-import type { RootStackParamList } from \"../types\";\n-import type { Meal } from \"../types\";\n-\n-export default function CreateMealScreen() {\n-  const [title, setTitle] = useState(\"\");\n-  const [mealType, setMealType] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n-  const [location, setLocation] = useState(\"\");\n-  const [time, setTime] = useState(\"\");\n-  const [date, setDate] = useState(new Date());\n-  const [budget, setBudget] = useState(\"\");\n-  const [cuisine, setCuisine] = useState(\"\");\n-  const [showDatePicker, setShowDatePicker] = useState(false);\n-\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const route = useRoute();\n-  const { addMeal, userId } = route.params || {};\n-\n-  const handleCreate = () => {\n-    if (!title || !location || !time || !budget || !cuisine || !userId) {\n-      alert(\"Please fill in all fields.\");\n-      return;\n-    }\n-\n-    const newMeal: Meal = {\n-      id: `${Date.now()}`,\n-      title,\n-      mealType,\n-      location,\n-      time,\n-      date: date.toISOString().split(\"T\")[0], // YYYY-MM-DD\n-      budget,\n-      cuisine,\n-      people: 1,\n-      max: 4,\n-      creatorId: userId,\n-      joinedIds: [userId],\n-    };\n-\n-    addMeal(newMeal);\n-    navigation.goBack();\n-  };\n-\n-  return (\n-    <ScrollView contentContainerStyle={styles.container}>\n-      <Text style={styles.title}>üç¥ Create a Meal Event</Text>\n-\n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Event Title\"\n-        value={title}\n-        onChangeText={setTitle}\n-      />\n-\n-      <View style={styles.toggleContainer}>\n-        <Pressable\n-          style={[styles.toggleButton, mealType === \"Meal Buddy\" && styles.activeToggle]}\n-          onPress={() => setMealType(\"Meal Buddy\")}\n-        >\n-          <Text>üçú Meal Buddy</Text>\n-        </Pressable>\n-        <Pressable\n-          style={[styles.toggleButton, mealType === \"Open to More\" && styles.activeToggle]}\n-          onPress={() => setMealType(\"Open to More\")}\n-        >\n-          <Text>‚ù§Ô∏è Open to More</Text>\n-        </Pressable>\n-      </View>\n-\n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Location\"\n-        value={location}\n-        onChangeText={setLocation}\n-      />\n-\n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Time (e.g. 6:30 PM)\"\n-        value={time}\n-        onChangeText={setTime}\n-      />\n-\n-      <Pressable onPress={() => setShowDatePicker(true)} style={styles.dateButton}>\n-        <Text style={styles.dateButtonText}>üìÖ {date.toDateString()}</Text>\n-      </Pressable>\n-      {showDatePicker && (\n-        <DateTimePicker\n-          value={date}\n-          mode=\"date\"\n-          display={Platform.OS === \"ios\" ? \"spinner\" : \"default\"}\n-          onChange={(event, selectedDate) => {\n-            setShowDatePicker(false);\n-            if (selectedDate) setDate(selectedDate);\n-          }}\n-        />\n-      )}\n-\n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Budget (e.g. $20-30)\"\n-        value={budget}\n-        onChangeText={setBudget}\n-      />\n-      <TextInput\n-        style={styles.input}\n-        placeholder=\"Cuisine Type\"\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-      />\n-\n-      <Pressable\n-        style={styles.createButton}\n-        onPress={() => {\n-          navigation.navigate(\"CreateMeal\", {\n-            addMeal: handleAddMeal,\n-            userId, // ‚úÖ ÂÇ≥Áµ¶ CreateMealScreen ‰ΩøÁî®\n-          });\n-  }}\n->\n-  <Text style={styles.createButtonText}>Ôºã Create Meal Event</Text>\n-</Pressable>\n-\n-    </ScrollView>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { padding: 20, backgroundColor: \"#fff\" },\n-  title: { fontSize: 22, fontWeight: \"bold\", marginBottom: 16 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    padding: 12,\n-    borderRadius: 8,\n-    marginBottom: 12,\n-  },\n-  toggleContainer: { flexDirection: \"row\", justifyContent: \"center\", gap: 10, marginBottom: 16 },\n-  toggleButton: {\n-    padding: 10,\n-    borderWidth: 1,\n-    borderColor: \"#ccc\",\n-    borderRadius: 8,\n-  },\n-  activeToggle: { backgroundColor: \"#d0ebff\" },\n-  dateButton: {\n-    padding: 12,\n-    borderWidth: 1,\n-    borderColor: \"#aaa\",\n-    borderRadius: 8,\n-    marginBottom: 12,\n-    backgroundColor: \"#f5f5f5\",\n-  },\n-  dateButtonText: {\n-    fontSize: 16,\n-  },\n-  createButton: {\n-    backgroundColor: \"#4caf50\",\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: \"center\",\n-    marginTop: 16,\n-  },\n-  createButtonText: {\n-    color: \"#fff\",\n-    fontSize: 16,\n-    fontWeight: \"600\",\n-  },\n-});\n"
                },
                {
                    "date": 1748648706428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,12 @@\n   const [time, setTime] = useState('');\n   const [date, setDate] = useState(new Date());\n   const [budget, setBudget] = useState('');\n   const [cuisine, setCuisine] = useState('');\n+  const [people, setPeople] = useState('');\n+  const [max, setMax] = useState('');\n \n+\n   const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n   const { addMeal, userId } = route.params;\n \n@@ -47,8 +50,10 @@\n         budget,\n         cuisine,\n         creatorId: userId,\n         joinedIds: [userId],\n+        people: Number(people),\n+        max: Number(max),\n       };\n \n       await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n       addMeal(newMeal);\n"
                },
                {
                    "date": 1749529711903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Platform,\n+} from 'react-native';\n+import { useState } from 'react';\n+import DateTimePicker from '@react-native-community/datetimepicker';\n+import { useNavigation, useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { ref, push, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import type { RootStackParamList, Meal } from '../types';\n+\n+export default function CreateMealScreen() {\n+  const [title, setTitle] = useState('');\n+  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n+  const [location, setLocation] = useState('');\n+  const [time, setTime] = useState('');\n+  const [date, setDate] = useState(new Date());\n+  const [budget, setBudget] = useState('');\n+  const [cuisine, setCuisine] = useState('');\n+  const [people, setPeople] = useState('');\n+  const [max, setMax] = useState('');\n+\n+\n+  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+  const { addMeal, userId } = route.params;\n+\n+  const handleCreate = async () => {\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      alert('Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const newMealRef = push(ref(db, 'meals'));\n+\n+      const newMeal: Meal = {\n+        id: newMealRef.key ?? '',\n+        title,\n+        mealType,\n+        location,\n+        time,\n+        date: date.toISOString().split('T')[0],\n+        budget,\n+        cuisine,\n+        creatorId: userId,\n+        joinedIds: [userId],\n+        people: Number(people),\n+        max: Number(max),\n+      };\n+\n+      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n+      addMeal(newMeal);\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('Failed to create meal:', err);\n+      alert('Failed to create meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.label}>üç± Title</Text>\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n+\n+      <Text style={styles.label}>üìç Location</Text>\n+      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n+\n+      <Text style={styles.label}>üï∞ Time</Text>\n+      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n+\n+      <Text style={styles.label}>üìÖ Date</Text>\n+      <DateTimePicker\n+        value={date}\n+        mode=\"date\"\n+        display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n+        onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n+      />\n+\n+      <Text style={styles.label}>üí∞ Budget</Text>\n+      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n+\n+      <Text style={styles.label}>üçú Cuisine</Text>\n+      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n+\n+      <Pressable onPress={handleCreate} style={styles.button}>\n+        <Text style={styles.buttonText}>Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  label: { fontWeight: 'bold', marginTop: 12 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    marginTop: 4,\n+  },\n+  button: {\n+    marginTop: 20,\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  buttonText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                },
                {
                    "date": 1749530283966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n \n \n   const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const { addMeal, userId } = route.params;\n+  const addMeal = route.params?.addMeal;\n+  const userId = route.params?.userId;\n \n   const handleCreate = async () => {\n     if (!title || !location || !time || !budget || !cuisine || !userId) {\n       alert('Please fill in all fields.');\n@@ -118,125 +119,4 @@\n     color: '#fff',\n     fontWeight: 'bold',\n   },\n });\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Platform,\n-} from 'react-native';\n-import { useState } from 'react';\n-import DateTimePicker from '@react-native-community/datetimepicker';\n-import { useNavigation, useRoute } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { ref, push, set } from 'firebase/database';\n-import { db } from '../firebase';\n-import type { RootStackParamList, Meal } from '../types';\n-\n-export default function CreateMealScreen() {\n-  const [title, setTitle] = useState('');\n-  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n-  const [location, setLocation] = useState('');\n-  const [time, setTime] = useState('');\n-  const [date, setDate] = useState(new Date());\n-  const [budget, setBudget] = useState('');\n-  const [cuisine, setCuisine] = useState('');\n-  const [people, setPeople] = useState('');\n-  const [max, setMax] = useState('');\n-\n-\n-  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const { addMeal, userId } = route.params;\n-\n-  const handleCreate = async () => {\n-    if (!title || !location || !time || !budget || !cuisine || !userId) {\n-      alert('Please fill in all fields.');\n-      return;\n-    }\n-\n-    try {\n-      const newMealRef = push(ref(db, 'meals'));\n-\n-      const newMeal: Meal = {\n-        id: newMealRef.key ?? '',\n-        title,\n-        mealType,\n-        location,\n-        time,\n-        date: date.toISOString().split('T')[0],\n-        budget,\n-        cuisine,\n-        creatorId: userId,\n-        joinedIds: [userId],\n-        people: Number(people),\n-        max: Number(max),\n-      };\n-\n-      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n-      addMeal(newMeal);\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('Failed to create meal:', err);\n-      alert('Failed to create meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.label}>üç± Title</Text>\n-      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n-\n-      <Text style={styles.label}>üìç Location</Text>\n-      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n-\n-      <Text style={styles.label}>üï∞ Time</Text>\n-      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n-\n-      <Text style={styles.label}>üìÖ Date</Text>\n-      <DateTimePicker\n-        value={date}\n-        mode=\"date\"\n-        display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n-        onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n-      />\n-\n-      <Text style={styles.label}>üí∞ Budget</Text>\n-      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n-\n-      <Text style={styles.label}>üçú Cuisine</Text>\n-      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n-\n-      <Pressable onPress={handleCreate} style={styles.button}>\n-        <Text style={styles.buttonText}>Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  label: { fontWeight: 'bold', marginTop: 12 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    paddingHorizontal: 12,\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    marginTop: 4,\n-  },\n-  button: {\n-    marginTop: 20,\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  buttonText: {\n-    color: '#fff',\n-    fontWeight: 'bold',\n-  },\n-});\n"
                },
                {
                    "date": 1749530514680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,17 +24,17 @@\n   const [budget, setBudget] = useState('');\n   const [cuisine, setCuisine] = useState('');\n   const [people, setPeople] = useState('');\n   const [max, setMax] = useState('');\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n \n-\n   const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n   const addMeal = route.params?.addMeal;\n   const userId = route.params?.userId;\n \n   const handleCreate = async () => {\n-    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+    if (!title || !location || !time || !budget || !cuisine || !userId || !addMeal) {\n       alert('Please fill in all fields.');\n       return;\n     }\n \n@@ -76,21 +76,53 @@\n       <Text style={styles.label}>üï∞ Time</Text>\n       <TextInput style={styles.input} value={time} onChangeText={setTime} />\n \n       <Text style={styles.label}>üìÖ Date</Text>\n-      <DateTimePicker\n-        value={date}\n-        mode=\"date\"\n-        display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n-        onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n-      />\n \n+      {Platform.OS === 'ios' ? (\n+        <DateTimePicker\n+          value={date}\n+          mode=\"date\"\n+          display=\"spinner\"\n+          onChange={(_, selectedDate) => {\n+            if (selectedDate) setDate(selectedDate);\n+          }}\n+        />\n+      ) : (\n+        <>\n+          <Pressable\n+            onPress={() => setShowDatePicker(true)}\n+            style={[styles.input, { justifyContent: 'center' }]}\n+          >\n+            <Text>{date.toDateString()}</Text>\n+          </Pressable>\n+\n+          {showDatePicker && (\n+            <DateTimePicker\n+              value={date}\n+              mode=\"date\"\n+              display=\"default\"\n+              onChange={(event, selectedDate) => {\n+                setShowDatePicker(false);\n+                if (selectedDate) setDate(selectedDate);\n+              }}\n+            />\n+          )}\n+        </>\n+      )}\n+\n       <Text style={styles.label}>üí∞ Budget</Text>\n       <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n \n       <Text style={styles.label}>üçú Cuisine</Text>\n       <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n \n+      <Text style={styles.label}>üë• People Joined</Text>\n+      <TextInput style={styles.input} value={people} onChangeText={setPeople} keyboardType=\"number-pad\" />\n+\n+      <Text style={styles.label}>üî¢ Max People</Text>\n+      <TextInput style={styles.input} value={max} onChangeText={setMax} keyboardType=\"number-pad\" />\n+\n       <Pressable onPress={handleCreate} style={styles.button}>\n         <Text style={styles.buttonText}>Create Meal</Text>\n       </Pressable>\n     </View>\n"
                },
                {
                    "date": 1749530705210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,18 @@\n     } catch (err) {\n       console.error('Failed to create meal:', err);\n       alert('Failed to create meal.');\n     }\n+\n+    const handleDateChange = (event: any, selectedDate?: Date) => {\n+    if (Platform.OS === 'android') {\n+      setShowDatePicker(false); // ‰∏ÄÂÆöË¶ÅÈóúÊéâ\n+    }\n+\n+    if (selectedDate) {\n+      setDate(selectedDate);\n+    }\n+\n   };\n \n   return (\n     <View style={styles.container}>\n@@ -81,10 +91,10 @@\n       {Platform.OS === 'ios' ? (\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n-          display=\"spinner\"\n-          onChange={(_, selectedDate) => {\n+          display=\"default\"\n+          onChange={handleDateChange) => {\n             if (selectedDate) setDate(selectedDate);\n           }}\n         />\n       ) : (\n"
                },
                {
                    "date": 1749530716958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n           display=\"default\"\n-          onChange={handleDateChange) => {\n+          onChange={handleDateChange} => {\n             if (selectedDate) setDate(selectedDate);\n           }}\n         />\n       ) : (\n"
                },
                {
                    "date": 1749530722789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,11 +92,9 @@\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n           display=\"default\"\n-          onChange={handleDateChange} => {\n-            if (selectedDate) setDate(selectedDate);\n-          }}\n+          onChange={handleDateChange} \n         />\n       ) : (\n         <>\n           <Pressable\n"
                },
                {
                    "date": 1749530818044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,17 @@\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n   const addMeal = route.params?.addMeal;\n   const userId = route.params?.userId;\n \n+  const handleDateChange = (event: any, selectedDate?: Date) => {\n+    if (Platform.OS === 'android') {\n+      setShowDatePicker(false); // ÊâãÂãïÈóúÈñâ modal\n+    }\n+    if (selectedDate) {\n+      setDate(selectedDate);\n+    }\n+  };\n+\n   const handleCreate = async () => {\n     if (!title || !location || !time || !budget || !cuisine || !userId || !addMeal) {\n       alert('Please fill in all fields.');\n       return;\n@@ -59,21 +68,11 @@\n       await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n       addMeal(newMeal);\n       navigation.goBack();\n     } catch (err) {\n-      console.error('Failed to create meal:', err);\n+      console.error('‚ùå Failed to create meal:', err);\n       alert('Failed to create meal.');\n     }\n-\n-    const handleDateChange = (event: any, selectedDate?: Date) => {\n-    if (Platform.OS === 'android') {\n-      setShowDatePicker(false); // ‰∏ÄÂÆöË¶ÅÈóúÊéâ\n-    }\n-\n-    if (selectedDate) {\n-      setDate(selectedDate);\n-    }\n-\n   };\n \n   return (\n     <View style={styles.container}>\n@@ -86,15 +85,14 @@\n       <Text style={styles.label}>üï∞ Time</Text>\n       <TextInput style={styles.input} value={time} onChangeText={setTime} />\n \n       <Text style={styles.label}>üìÖ Date</Text>\n-\n       {Platform.OS === 'ios' ? (\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n-          display=\"default\"\n-          onChange={handleDateChange} \n+          display=\"spinner\"\n+          onChange={handleDateChange}\n         />\n       ) : (\n         <>\n           <Pressable\n@@ -102,18 +100,14 @@\n             style={[styles.input, { justifyContent: 'center' }]}\n           >\n             <Text>{date.toDateString()}</Text>\n           </Pressable>\n-\n           {showDatePicker && (\n             <DateTimePicker\n               value={date}\n               mode=\"date\"\n               display=\"default\"\n-              onChange={(event, selectedDate) => {\n-                setShowDatePicker(false);\n-                if (selectedDate) setDate(selectedDate);\n-              }}\n+              onChange={handleDateChange}\n             />\n           )}\n         </>\n       )}\n"
                },
                {
                    "date": 1749531000502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n   TextInput,\n   Pressable,\n   StyleSheet,\n   Platform,\n+  Alert,\n } from 'react-native';\n import { useState } from 'react';\n import DateTimePicker from '@react-native-community/datetimepicker';\n import { useNavigation, useRoute } from '@react-navigation/native';\n@@ -20,37 +21,26 @@\n   const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n   const [location, setLocation] = useState('');\n   const [time, setTime] = useState('');\n   const [date, setDate] = useState(new Date());\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n   const [budget, setBudget] = useState('');\n   const [cuisine, setCuisine] = useState('');\n   const [people, setPeople] = useState('');\n   const [max, setMax] = useState('');\n-  const [showDatePicker, setShowDatePicker] = useState(false);\n \n   const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const addMeal = route.params?.addMeal;\n-  const userId = route.params?.userId;\n+  const { addMeal, userId } = route.params;\n \n-  const handleDateChange = (event: any, selectedDate?: Date) => {\n-    if (Platform.OS === 'android') {\n-      setShowDatePicker(false); // ÊâãÂãïÈóúÈñâ modal\n-    }\n-    if (selectedDate) {\n-      setDate(selectedDate);\n-    }\n-  };\n-\n   const handleCreate = async () => {\n-    if (!title || !location || !time || !budget || !cuisine || !userId || !addMeal) {\n-      alert('Please fill in all fields.');\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      Alert.alert('Missing fields', 'Please fill in all fields.');\n       return;\n     }\n \n     try {\n       const newMealRef = push(ref(db, 'meals'));\n-\n       const newMeal: Meal = {\n         id: newMealRef.key ?? '',\n         title,\n         mealType,\n@@ -69,60 +59,75 @@\n       addMeal(newMeal);\n       navigation.goBack();\n     } catch (err) {\n       console.error('‚ùå Failed to create meal:', err);\n-      alert('Failed to create meal.');\n+      Alert.alert('Error', 'Failed to create meal.');\n     }\n   };\n \n   return (\n     <View style={styles.container}>\n       <Text style={styles.label}>üç± Title</Text>\n       <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n \n+      <Text style={styles.label}>üç¥ Meal Type</Text>\n+      <View style={styles.toggleContainer}>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Meal Buddy' && styles.toggleSelected,\n+          ]}\n+          onPress={() => setMealType('Meal Buddy')}\n+        >\n+          <Text style={mealType === 'Meal Buddy' ? styles.toggleTextSelected : styles.toggleText}>\n+            Meal Buddy\n+          </Text>\n+        </Pressable>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Open to More' && styles.toggleSelected,\n+          ]}\n+          onPress={() => setMealType('Open to More')}\n+        >\n+          <Text style={mealType === 'Open to More' ? styles.toggleTextSelected : styles.toggleText}>\n+            Open to More\n+          </Text>\n+        </Pressable>\n+      </View>\n+\n       <Text style={styles.label}>üìç Location</Text>\n       <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n \n       <Text style={styles.label}>üï∞ Time</Text>\n       <TextInput style={styles.input} value={time} onChangeText={setTime} />\n \n       <Text style={styles.label}>üìÖ Date</Text>\n-      {Platform.OS === 'ios' ? (\n+      <Pressable onPress={() => setShowDatePicker(true)} style={styles.input}>\n+        <Text>{date.toDateString()}</Text>\n+      </Pressable>\n+      {showDatePicker && (\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n-          display=\"spinner\"\n-          onChange={handleDateChange}\n+          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n+          onChange={(_, selectedDate) => {\n+            setShowDatePicker(false);\n+            if (selectedDate) setDate(selectedDate);\n+          }}\n         />\n-      ) : (\n-        <>\n-          <Pressable\n-            onPress={() => setShowDatePicker(true)}\n-            style={[styles.input, { justifyContent: 'center' }]}\n-          >\n-            <Text>{date.toDateString()}</Text>\n-          </Pressable>\n-          {showDatePicker && (\n-            <DateTimePicker\n-              value={date}\n-              mode=\"date\"\n-              display=\"default\"\n-              onChange={handleDateChange}\n-            />\n-          )}\n-        </>\n       )}\n \n       <Text style={styles.label}>üí∞ Budget</Text>\n       <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n \n       <Text style={styles.label}>üçú Cuisine</Text>\n       <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n \n-      <Text style={styles.label}>üë• People Joined</Text>\n+      <Text style={styles.label}>üë• People</Text>\n       <TextInput style={styles.input} value={people} onChangeText={setPeople} keyboardType=\"number-pad\" />\n \n-      <Text style={styles.label}>üî¢ Max People</Text>\n+      <Text style={styles.label}>üî¢ Max</Text>\n       <TextInput style={styles.input} value={max} onChangeText={setMax} keyboardType=\"number-pad\" />\n \n       <Pressable onPress={handleCreate} style={styles.button}>\n         <Text style={styles.buttonText}>Create Meal</Text>\n@@ -132,25 +137,45 @@\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  label: { fontWeight: 'bold', marginTop: 12 },\n+  label: { fontWeight: 'bold', marginTop: 12, marginBottom: 4 },\n   input: {\n     borderWidth: 1,\n     borderColor: '#ccc',\n-    paddingHorizontal: 12,\n-    paddingVertical: 8,\n+    padding: 12,\n     borderRadius: 8,\n-    marginTop: 4,\n+    marginBottom: 8,\n   },\n   button: {\n     marginTop: 20,\n     backgroundColor: '#007aff',\n     padding: 14,\n     borderRadius: 10,\n     alignItems: 'center',\n   },\n-  buttonText: {\n+  buttonText: { color: '#fff', fontWeight: 'bold' },\n+  toggleContainer: {\n+    flexDirection: 'row',\n+    marginBottom: 8,\n+    gap: 8,\n+  },\n+  toggleButton: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#aaa',\n+    borderRadius: 8,\n+    padding: 10,\n+    alignItems: 'center',\n+  },\n+  toggleSelected: {\n+    backgroundColor: '#007aff',\n+    borderColor: '#007aff',\n+  },\n+  toggleText: {\n+    color: '#333',\n+  },\n+  toggleTextSelected: {\n     color: '#fff',\n     fontWeight: 'bold',\n   },\n });\n"
                },
                {
                    "date": 1749531085037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Platform,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import DateTimePicker from '@react-native-community/datetimepicker';\n+import { useNavigation, useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { ref, push, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import type { RootStackParamList, Meal } from '../types';\n+\n+export default function CreateMealScreen() {\n+  const [title, setTitle] = useState('');\n+  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n+  const [location, setLocation] = useState('');\n+  const [time, setTime] = useState('');\n+  const [date, setDate] = useState(new Date());\n+  const [showDatePicker, setShowDatePicker] = useState(false);\n+  const [budget, setBudget] = useState('');\n+  const [cuisine, setCuisine] = useState('');\n+  const [people, setPeople] = useState('');\n+  const [max, setMax] = useState('');\n+\n+  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+    if (!route.params) {\n+    console.warn('‚ö†Ô∏è Missing params on CreateMealScreen');\n+    return (\n+      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n+        <Text>‚ö†Ô∏è Cannot create meal ‚Äî missing parameters.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n+          <Text style={{ color: 'blue' }}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+  const { addMeal, userId } = route.params;\n+\n+  const handleCreate = async () => {\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      Alert.alert('Missing fields', 'Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const newMealRef = push(ref(db, 'meals'));\n+      const newMeal: Meal = {\n+        id: newMealRef.key ?? '',\n+        title,\n+        mealType,\n+        location,\n+        time,\n+        date: date.toISOString().split('T')[0],\n+        budget,\n+        cuisine,\n+        creatorId: userId,\n+        joinedIds: [userId],\n+        people: Number(people),\n+        max: Number(max),\n+      };\n+\n+      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n+      addMeal(newMeal);\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('‚ùå Failed to create meal:', err);\n+      Alert.alert('Error', 'Failed to create meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.label}>üç± Title</Text>\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n+\n+      <Text style={styles.label}>üç¥ Meal Type</Text>\n+      <View style={styles.toggleContainer}>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Meal Buddy' && styles.toggleSelected,\n+          ]}\n+          onPress={() => setMealType('Meal Buddy')}\n+        >\n+          <Text style={mealType === 'Meal Buddy' ? styles.toggleTextSelected : styles.toggleText}>\n+            Meal Buddy\n+          </Text>\n+        </Pressable>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Open to More' && styles.toggleSelected,\n+          ]}\n+          onPress={() => setMealType('Open to More')}\n+        >\n+          <Text style={mealType === 'Open to More' ? styles.toggleTextSelected : styles.toggleText}>\n+            Open to More\n+          </Text>\n+        </Pressable>\n+      </View>\n+\n+      <Text style={styles.label}>üìç Location</Text>\n+      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n+\n+      <Text style={styles.label}>üï∞ Time</Text>\n+      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n+\n+      <Text style={styles.label}>üìÖ Date</Text>\n+      <Pressable onPress={() => setShowDatePicker(true)} style={styles.input}>\n+        <Text>{date.toDateString()}</Text>\n+      </Pressable>\n+      {showDatePicker && (\n+        <DateTimePicker\n+          value={date}\n+          mode=\"date\"\n+          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n+          onChange={(_, selectedDate) => {\n+            setShowDatePicker(false);\n+            if (selectedDate) setDate(selectedDate);\n+          }}\n+        />\n+      )}\n+\n+      <Text style={styles.label}>üí∞ Budget</Text>\n+      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n+\n+      <Text style={styles.label}>üçú Cuisine</Text>\n+      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n+\n+      <Text style={styles.label}>üë• People</Text>\n+      <TextInput style={styles.input} value={people} onChangeText={setPeople} keyboardType=\"number-pad\" />\n+\n+      <Text style={styles.label}>üî¢ Max</Text>\n+      <TextInput style={styles.input} value={max} onChangeText={setMax} keyboardType=\"number-pad\" />\n+\n+      <Pressable onPress={handleCreate} style={styles.button}>\n+        <Text style={styles.buttonText}>Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  label: { fontWeight: 'bold', marginTop: 12, marginBottom: 4 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    padding: 12,\n+    borderRadius: 8,\n+    marginBottom: 8,\n+  },\n+  button: {\n+    marginTop: 20,\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: 'bold' },\n+  toggleContainer: {\n+    flexDirection: 'row',\n+    marginBottom: 8,\n+    gap: 8,\n+  },\n+  toggleButton: {\n+    flex: 1,\n+    borderWidth: 1,\n+    borderColor: '#aaa',\n+    borderRadius: 8,\n+    padding: 10,\n+    alignItems: 'center',\n+  },\n+  toggleSelected: {\n+    backgroundColor: '#007aff',\n+    borderColor: '#007aff',\n+  },\n+  toggleText: {\n+    color: '#333',\n+  },\n+  toggleTextSelected: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                },
                {
                    "date": 1749531795315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,191 +52,10 @@\n     try {\n       const newMealRef = push(ref(db, 'meals'));\n       const newMeal: Meal = {\n         id: newMealRef.key ?? '',\n-        title,\n         mealType,\n-        location,\n-        time,\n-        date: date.toISOString().split('T')[0],\n-        budget,\n-        cuisine,\n-        creatorId: userId,\n-        joinedIds: [userId],\n-        people: Number(people),\n-        max: Number(max),\n-      };\n-\n-      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n-      addMeal(newMeal);\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('‚ùå Failed to create meal:', err);\n-      Alert.alert('Error', 'Failed to create meal.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.label}>üç± Title</Text>\n-      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n-\n-      <Text style={styles.label}>üç¥ Meal Type</Text>\n-      <View style={styles.toggleContainer}>\n-        <Pressable\n-          style={[\n-            styles.toggleButton,\n-            mealType === 'Meal Buddy' && styles.toggleSelected,\n-          ]}\n-          onPress={() => setMealType('Meal Buddy')}\n-        >\n-          <Text style={mealType === 'Meal Buddy' ? styles.toggleTextSelected : styles.toggleText}>\n-            Meal Buddy\n-          </Text>\n-        </Pressable>\n-        <Pressable\n-          style={[\n-            styles.toggleButton,\n-            mealType === 'Open to More' && styles.toggleSelected,\n-          ]}\n-          onPress={() => setMealType('Open to More')}\n-        >\n-          <Text style={mealType === 'Open to More' ? styles.toggleTextSelected : styles.toggleText}>\n-            Open to More\n-          </Text>\n-        </Pressable>\n-      </View>\n-\n-      <Text style={styles.label}>üìç Location</Text>\n-      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n-\n-      <Text style={styles.label}>üï∞ Time</Text>\n-      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n-\n-      <Text style={styles.label}>üìÖ Date</Text>\n-      <Pressable onPress={() => setShowDatePicker(true)} style={styles.input}>\n-        <Text>{date.toDateString()}</Text>\n-      </Pressable>\n-      {showDatePicker && (\n-        <DateTimePicker\n-          value={date}\n-          mode=\"date\"\n-          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n-          onChange={(_, selectedDate) => {\n-            setShowDatePicker(false);\n-            if (selectedDate) setDate(selectedDate);\n-          }}\n-        />\n-      )}\n-\n-      <Text style={styles.label}>üí∞ Budget</Text>\n-      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n-\n-      <Text style={styles.label}>üçú Cuisine</Text>\n-      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n-\n-      <Text style={styles.label}>üë• People</Text>\n-      <TextInput style={styles.input} value={people} onChangeText={setPeople} keyboardType=\"number-pad\" />\n-\n-      <Text style={styles.label}>üî¢ Max</Text>\n-      <TextInput style={styles.input} value={max} onChangeText={setMax} keyboardType=\"number-pad\" />\n-\n-      <Pressable onPress={handleCreate} style={styles.button}>\n-        <Text style={styles.buttonText}>Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  label: { fontWeight: 'bold', marginTop: 12, marginBottom: 4 },\n-  input: {\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    padding: 12,\n-    borderRadius: 8,\n-    marginBottom: 8,\n-  },\n-  button: {\n-    marginTop: 20,\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: 'bold' },\n-  toggleContainer: {\n-    flexDirection: 'row',\n-    marginBottom: 8,\n-    gap: 8,\n-  },\n-  toggleButton: {\n-    flex: 1,\n-    borderWidth: 1,\n-    borderColor: '#aaa',\n-    borderRadius: 8,\n-    padding: 10,\n-    alignItems: 'center',\n-  },\n-  toggleSelected: {\n-    backgroundColor: '#007aff',\n-    borderColor: '#007aff',\n-  },\n-  toggleText: {\n-    color: '#333',\n-  },\n-  toggleTextSelected: {\n-    color: '#fff',\n-    fontWeight: 'bold',\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  TextInput,\n-  Pressable,\n-  StyleSheet,\n-  Platform,\n-  Alert,\n-} from 'react-native';\n-import { useState } from 'react';\n-import DateTimePicker from '@react-native-community/datetimepicker';\n-import { useNavigation, useRoute } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { ref, push, set } from 'firebase/database';\n-import { db } from '../firebase';\n-import type { RootStackParamList, Meal } from '../types';\n-\n-export default function CreateMealScreen() {\n-  const [title, setTitle] = useState('');\n-  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n-  const [location, setLocation] = useState('');\n-  const [time, setTime] = useState('');\n-  const [date, setDate] = useState(new Date());\n-  const [showDatePicker, setShowDatePicker] = useState(false);\n-  const [budget, setBudget] = useState('');\n-  const [cuisine, setCuisine] = useState('');\n-  const [people, setPeople] = useState('');\n-  const [max, setMax] = useState('');\n-\n-  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const { addMeal, userId } = route.params;\n-\n-  const handleCreate = async () => {\n-    if (!title || !location || !time || !budget || !cuisine || !userId) {\n-      Alert.alert('Missing fields', 'Please fill in all fields.');\n-      return;\n-    }\n-\n-    try {\n-      const newMealRef = push(ref(db, 'meals'));\n-      const newMeal: Meal = {\n-        id: newMealRef.key ?? '',\n         title,\n-        mealType,\n         location,\n         time,\n         date: date.toISOString().split('T')[0],\n         budget,\n"
                },
                {
                    "date": 1749531841301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,8 @@\n   };\n \n   return (\n     <View style={styles.container}>\n-      <Text style={styles.label}>üç± Title</Text>\n-      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n-\n       <Text style={styles.label}>üç¥ Meal Type</Text>\n       <View style={styles.toggleContainer}>\n         <Pressable\n           style={[\n@@ -104,8 +101,10 @@\n             Open to More\n           </Text>\n         </Pressable>\n       </View>\n+      <Text style={styles.label}>üç± Title</Text>\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n \n       <Text style={styles.label}>üìç Location</Text>\n       <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n \n"
                },
                {
                    "date": 1749532069644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,16 @@\n       <Text style={styles.label}>üìÖ Date</Text>\n       <Pressable onPress={() => setShowDatePicker(true)} style={styles.input}>\n         <Text>{date.toDateString()}</Text>\n       </Pressable>\n-      {showDatePicker && (\n+      {showDatePicker && Platform.OS === 'web' ? (\n+          <TextInput\n+            style={styles.input}\n+            value={date.toDateString()}\n+            editable={false}\n+            placeholder=\"Date\"\n+          />\n+        ) : (\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n           display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n"
                },
                {
                    "date": 1749532093877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,16 +114,9 @@\n       <Text style={styles.label}>üìÖ Date</Text>\n       <Pressable onPress={() => setShowDatePicker(true)} style={styles.input}>\n         <Text>{date.toDateString()}</Text>\n       </Pressable>\n-      {showDatePicker && Platform.OS === 'web' ? (\n-          <TextInput\n-            style={styles.input}\n-            value={date.toDateString()}\n-            editable={false}\n-            placeholder=\"Date\"\n-          />\n-        ) : (\n+      {showDatePicker &&  (\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n           display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n"
                },
                {
                    "date": 1749532187986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n   TextInput,\n   Pressable,\n   StyleSheet,\n   Platform,\n-  Alert,\n } from 'react-native';\n import { useState } from 'react';\n import DateTimePicker from '@react-native-community/datetimepicker';\n import { useNavigation, useRoute } from '@react-navigation/native';\n@@ -21,41 +20,41 @@\n   const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n   const [location, setLocation] = useState('');\n   const [time, setTime] = useState('');\n   const [date, setDate] = useState(new Date());\n-  const [showDatePicker, setShowDatePicker] = useState(false);\n   const [budget, setBudget] = useState('');\n   const [cuisine, setCuisine] = useState('');\n   const [people, setPeople] = useState('');\n   const [max, setMax] = useState('');\n \n   const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-    if (!route.params) {\n-    console.warn('‚ö†Ô∏è Missing params on CreateMealScreen');\n+  const { addMeal, userId } = route.params ?? {};\n+\n+  if (!addMeal || !userId) {\n     return (\n-      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n-        <Text>‚ö†Ô∏è Cannot create meal ‚Äî missing parameters.</Text>\n-        <Pressable onPress={() => navigation.goBack()} style={{ marginTop: 12 }}>\n-          <Text style={{ color: 'blue' }}>Go Back</Text>\n+      <View style={styles.container}>\n+        <Text style={{ color: 'red', fontWeight: 'bold' }}>‚ö†Ô∏è Cannot create meal ‚Äî missing parameters.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+          <Text style={styles.backButtonText}>Go Back</Text>\n         </Pressable>\n       </View>\n     );\n   }\n-  const { addMeal, userId } = route.params;\n \n   const handleCreate = async () => {\n     if (!title || !location || !time || !budget || !cuisine || !userId) {\n-      Alert.alert('Missing fields', 'Please fill in all fields.');\n+      alert('Please fill in all fields.');\n       return;\n     }\n \n     try {\n       const newMealRef = push(ref(db, 'meals'));\n+\n       const newMeal: Meal = {\n         id: newMealRef.key ?? '',\n+        title,\n         mealType,\n-        title,\n         location,\n         time,\n         date: date.toISOString().split('T')[0],\n         budget,\n@@ -69,10 +68,10 @@\n       await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n       addMeal(newMeal);\n       navigation.goBack();\n     } catch (err) {\n-      console.error('‚ùå Failed to create meal:', err);\n-      Alert.alert('Error', 'Failed to create meal.');\n+      console.error('Failed to create meal:', err);\n+      alert('Failed to create meal.');\n     }\n   };\n \n   return (\n@@ -81,28 +80,25 @@\n       <View style={styles.toggleContainer}>\n         <Pressable\n           style={[\n             styles.toggleButton,\n-            mealType === 'Meal Buddy' && styles.toggleSelected,\n+            mealType === 'Meal Buddy' && styles.activeToggle,\n           ]}\n           onPress={() => setMealType('Meal Buddy')}\n         >\n-          <Text style={mealType === 'Meal Buddy' ? styles.toggleTextSelected : styles.toggleText}>\n-            Meal Buddy\n-          </Text>\n+          <Text>Meal Buddy</Text>\n         </Pressable>\n         <Pressable\n           style={[\n             styles.toggleButton,\n-            mealType === 'Open to More' && styles.toggleSelected,\n+            mealType === 'Open to More' && styles.activeToggle,\n           ]}\n           onPress={() => setMealType('Open to More')}\n         >\n-          <Text style={mealType === 'Open to More' ? styles.toggleTextSelected : styles.toggleText}>\n-            Open to More\n-          </Text>\n+          <Text>Open to More</Text>\n         </Pressable>\n       </View>\n+\n       <Text style={styles.label}>üç± Title</Text>\n       <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n \n       <Text style={styles.label}>üìç Location</Text>\n@@ -111,20 +107,20 @@\n       <Text style={styles.label}>üï∞ Time</Text>\n       <TextInput style={styles.input} value={time} onChangeText={setTime} />\n \n       <Text style={styles.label}>üìÖ Date</Text>\n-      <Pressable onPress={() => setShowDatePicker(true)} style={styles.input}>\n-        <Text>{date.toDateString()}</Text>\n-      </Pressable>\n-      {showDatePicker &&  (\n+      {Platform.OS === 'web' ? (\n+        <TextInput\n+          style={styles.input}\n+          value={date.toDateString()}\n+          editable={false}\n+        />\n+      ) : (\n         <DateTimePicker\n           value={date}\n           mode=\"date\"\n           display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n-          onChange={(_, selectedDate) => {\n-            setShowDatePicker(false);\n-            if (selectedDate) setDate(selectedDate);\n-          }}\n+          onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n         />\n       )}\n \n       <Text style={styles.label}>üí∞ Budget</Text>\n@@ -141,51 +137,63 @@\n \n       <Pressable onPress={handleCreate} style={styles.button}>\n         <Text style={styles.buttonText}>Create Meal</Text>\n       </Pressable>\n+\n+      <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+        <Text style={styles.backButtonText}>‚Üê Go Back</Text>\n+      </Pressable>\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n   container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  label: { fontWeight: 'bold', marginTop: 12, marginBottom: 4 },\n+  label: { fontWeight: 'bold', marginTop: 12 },\n   input: {\n     borderWidth: 1,\n     borderColor: '#ccc',\n-    padding: 12,\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n     borderRadius: 8,\n-    marginBottom: 8,\n+    marginTop: 4,\n   },\n-  button: {\n-    marginTop: 20,\n-    backgroundColor: '#007aff',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: 'bold' },\n   toggleContainer: {\n     flexDirection: 'row',\n     marginBottom: 8,\n     gap: 8,\n   },\n   toggleButton: {\n     flex: 1,\n+    padding: 10,\n     borderWidth: 1,\n-    borderColor: '#aaa',\n+    borderColor: '#ccc',\n     borderRadius: 8,\n-    padding: 10,\n     alignItems: 'center',\n   },\n-  toggleSelected: {\n+  activeToggle: {\n+    backgroundColor: '#d0ebff',\n+  },\n+  button: {\n+    marginTop: 20,\n     backgroundColor: '#007aff',\n-    borderColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n   },\n-  toggleText: {\n-    color: '#333',\n-  },\n-  toggleTextSelected: {\n+  buttonText: {\n     color: '#fff',\n     fontWeight: 'bold',\n   },\n+  backButton: {\n+    marginTop: 20,\n+    padding: 10,\n+    alignItems: 'center',\n+    borderRadius: 6,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n });\n"
                },
                {
                    "date": 1749534920860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,8 @@\n         max: Number(max),\n       };\n \n       await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n-      addMeal(newMeal);\n       navigation.goBack();\n     } catch (err) {\n       console.error('Failed to create meal:', err);\n       alert('Failed to create meal.');\n"
                },
                {
                    "date": 1749534962289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,198 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Platform,\n+} from 'react-native';\n+import { useState } from 'react';\n+import DateTimePicker from '@react-native-community/datetimepicker';\n+import { useNavigation, useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { ref, push, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import type { RootStackParamList, Meal } from '../types';\n+\n+export default function CreateMealScreen() {\n+  const [title, setTitle] = useState('');\n+  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n+  const [location, setLocation] = useState('');\n+  const [time, setTime] = useState('');\n+  const [date, setDate] = useState(new Date());\n+  const [budget, setBudget] = useState('');\n+  const [cuisine, setCuisine] = useState('');\n+  const [people, setPeople] = useState('');\n+  const [max, setMax] = useState('');\n+\n+  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+  const { addMeal, userId } = route.params ?? {};\n+\n+  if (!addMeal || !userId) {\n+    return (\n+      <View style={styles.container}>\n+        <Text style={{ color: 'red', fontWeight: 'bold' }}>‚ö†Ô∏è Cannot create meal ‚Äî missing parameters.</Text>\n+        <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+          <Text style={styles.backButtonText}>Go Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n+\n+  const handleCreate = async () => {\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      alert('Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const newMealRef = push(ref(db, 'meals'));\n+\n+      const newMeal: Meal = {\n+        id: newMealRef.key ?? '',\n+        title,\n+        mealType,\n+        location,\n+        time,\n+        date: date.toISOString().split('T')[0],\n+        budget,\n+        cuisine,\n+        creatorId: userId,\n+        joinedIds: [userId],\n+        people: Number(people),\n+        max: Number(max),\n+      };\n+\n+      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('Failed to create meal:', err);\n+      alert('Failed to create meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.label}>üç¥ Meal Type</Text>\n+      <View style={styles.toggleContainer}>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Meal Buddy' && styles.activeToggle,\n+          ]}\n+          onPress={() => setMealType('Meal Buddy')}\n+        >\n+          <Text>Meal Buddy</Text>\n+        </Pressable>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Open to More' && styles.activeToggle,\n+          ]}\n+          onPress={() => setMealType('Open to More')}\n+        >\n+          <Text>Open to More</Text>\n+        </Pressable>\n+      </View>\n+\n+      <Text style={styles.label}>üç± Title</Text>\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n+\n+      <Text style={styles.label}>üìç Location</Text>\n+      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n+\n+      <Text style={styles.label}>üï∞ Time</Text>\n+      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n+\n+      <Text style={styles.label}>üìÖ Date</Text>\n+      {Platform.OS === 'web' ? (\n+        <TextInput\n+          style={styles.input}\n+          value={date.toDateString()}\n+          editable={false}\n+        />\n+      ) : (\n+        <DateTimePicker\n+          value={date}\n+          mode=\"date\"\n+          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n+          onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n+        />\n+      )}\n+\n+      <Text style={styles.label}>üí∞ Budget</Text>\n+      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n+\n+      <Text style={styles.label}>üçú Cuisine</Text>\n+      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n+\n+      <Text style={styles.label}>üë• People</Text>\n+      <TextInput style={styles.input} value={people} onChangeText={setPeople} keyboardType=\"number-pad\" />\n+\n+      <Text style={styles.label}>üî¢ Max</Text>\n+      <TextInput style={styles.input} value={max} onChangeText={setMax} keyboardType=\"number-pad\" />\n+\n+      <Pressable onPress={handleCreate} style={styles.button}>\n+        <Text style={styles.buttonText}>Create Meal</Text>\n+      </Pressable>\n+\n+      <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+        <Text style={styles.backButtonText}>‚Üê Go Back</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  label: { fontWeight: 'bold', marginTop: 12 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    marginTop: 4,\n+  },\n+  toggleContainer: {\n+    flexDirection: 'row',\n+    marginBottom: 8,\n+    gap: 8,\n+  },\n+  toggleButton: {\n+    flex: 1,\n+    padding: 10,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  activeToggle: {\n+    backgroundColor: '#d0ebff',\n+  },\n+  button: {\n+    marginTop: 20,\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  buttonText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+  backButton: {\n+    marginTop: 20,\n+    padding: 10,\n+    alignItems: 'center',\n+    borderRadius: 6,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                },
                {
                    "date": 1749535117207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Platform,\n+} from 'react-native';\n+import { useState } from 'react';\n+import DateTimePicker from '@react-native-community/datetimepicker';\n+import { useNavigation, useRoute } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { ref, push, set } from 'firebase/database';\n+import { db } from '../firebase';\n+import type { RootStackParamList, Meal } from '../types';\n+\n+export default function CreateMealScreen() {\n+  const [title, setTitle] = useState('');\n+  const [mealType, setMealType] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n+  const [location, setLocation] = useState('');\n+  const [time, setTime] = useState('');\n+  const [date, setDate] = useState(new Date());\n+  const [budget, setBudget] = useState('');\n+  const [cuisine, setCuisine] = useState('');\n+  const [people, setPeople] = useState('');\n+  const [max, setMax] = useState('');\n+\n+  const route = useRoute<RouteProp<RootStackParamList, 'CreateMeal'>>();\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+  const { userId } = route.params;\n+\n+  const handleCreate = async () => {\n+    if (!title || !location || !time || !budget || !cuisine || !userId) {\n+      alert('Please fill in all fields.');\n+      return;\n+    }\n+\n+    try {\n+      const newMealRef = push(ref(db, 'meals'));\n+\n+      const newMeal: Meal = {\n+        id: newMealRef.key ?? '',\n+        title,\n+        mealType,\n+        location,\n+        time,\n+        date: date.toISOString().split('T')[0],\n+        budget,\n+        cuisine,\n+        creatorId: userId,\n+        joinedIds: [userId],\n+        people: Number(people),\n+        max: Number(max),\n+      };\n+\n+      await set(ref(db, `meals/${newMealRef.key}`), newMeal);\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('Failed to create meal:', err);\n+      alert('Failed to create meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.label}>üç¥ Meal Type</Text>\n+      <View style={styles.toggleContainer}>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Meal Buddy' && styles.activeToggle,\n+          ]}\n+          onPress={() => setMealType('Meal Buddy')}\n+        >\n+          <Text>Meal Buddy</Text>\n+        </Pressable>\n+        <Pressable\n+          style={[\n+            styles.toggleButton,\n+            mealType === 'Open to More' && styles.activeToggle,\n+          ]}\n+          onPress={() => setMealType('Open to More')}\n+        >\n+          <Text>Open to More</Text>\n+        </Pressable>\n+      </View>\n+\n+      <Text style={styles.label}>üç± Title</Text>\n+      <TextInput style={styles.input} value={title} onChangeText={setTitle} />\n+\n+      <Text style={styles.label}>üìç Location</Text>\n+      <TextInput style={styles.input} value={location} onChangeText={setLocation} />\n+\n+      <Text style={styles.label}>üï∞ Time</Text>\n+      <TextInput style={styles.input} value={time} onChangeText={setTime} />\n+\n+      <Text style={styles.label}>üìÖ Date</Text>\n+      {Platform.OS === 'web' ? (\n+        <TextInput\n+          style={styles.input}\n+          value={date.toDateString()}\n+          editable={false}\n+        />\n+      ) : (\n+        <DateTimePicker\n+          value={date}\n+          mode=\"date\"\n+          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n+          onChange={(_, selectedDate) => selectedDate && setDate(selectedDate)}\n+        />\n+      )}\n+\n+      <Text style={styles.label}>üí∞ Budget</Text>\n+      <TextInput style={styles.input} value={budget} onChangeText={setBudget} />\n+\n+      <Text style={styles.label}>üçú Cuisine</Text>\n+      <TextInput style={styles.input} value={cuisine} onChangeText={setCuisine} />\n+\n+      <Text style={styles.label}>üë• People</Text>\n+      <TextInput style={styles.input} value={people} onChangeText={setPeople} keyboardType=\"number-pad\" />\n+\n+      <Text style={styles.label}>üî¢ Max</Text>\n+      <TextInput style={styles.input} value={max} onChangeText={setMax} keyboardType=\"number-pad\" />\n+\n+      <Pressable onPress={handleCreate} style={styles.button}>\n+        <Text style={styles.buttonText}>Create Meal</Text>\n+      </Pressable>\n+\n+      <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+        <Text style={styles.backButtonText}>‚Üê Go Back</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  label: { fontWeight: 'bold', marginTop: 12 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    paddingHorizontal: 12,\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    marginTop: 4,\n+  },\n+  toggleContainer: {\n+    flexDirection: 'row',\n+    marginBottom: 8,\n+    gap: 8,\n+  },\n+  toggleButton: {\n+    flex: 1,\n+    padding: 10,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  activeToggle: {\n+    backgroundColor: '#d0ebff',\n+  },\n+  button: {\n+    marginTop: 20,\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  buttonText: {\n+    color: '#fff',\n+    fontWeight: 'bold',\n+  },\n+  backButton: {\n+    marginTop: 20,\n+    padding: 10,\n+    alignItems: 'center',\n+    borderRadius: 6,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n+});\n"
                }
            ],
            "date": 1748638721122,
            "name": "Commit-0",
            "content": "import {\n  View,\n  Text,\n  TextInput,\n  Pressable,\n  StyleSheet,\n  ScrollView,\n  Platform,\n} from \"react-native\";\nimport { useState } from \"react\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\n\nimport type { Meal } from \"../types\";\nimport uuid from \"react-native-uuid\";\n\nexport default function CreateMealScreen() {\n  const [title, setTitle] = useState(\"\");\n  const [mealType, setMealType] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n  const [location, setLocation] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [budget, setBudget] = useState(\"\");\n  const [cuisine, setCuisine] = useState(\"\");\n  const [date, setDate] = useState<Date>(new Date());\n  const [showPicker, setShowPicker] = useState(false);\n\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // @ts-ignore\n  const addMeal = route.params?.addMeal as (meal: Meal) => void;\n\n  const handleSubmit = () => {\n    if (!title.trim()) return;\n\n    const newMeal: Meal = {\n      id: uuid.v4().toString(),\n      title,\n      mealType,\n      location,\n      time,\n      budget,\n      cuisine,\n      people: 1,\n      max: 4,\n      createdByMe: true,\n      date: date.toISOString(),\n    };\n\n    addMeal(newMeal);\n    navigation.goBack();\n  };\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Text style={styles.title}>Create Meal Event</Text>\n\n      <TextInput\n        placeholder=\"Enter title (e.g. Ramen Danbo)\"\n        value={title}\n        onChangeText={setTitle}\n        style={styles.input}\n      />\n      <TextInput placeholder=\"Location\" value={location} onChangeText={setLocation} style={styles.input} />\n      <TextInput placeholder=\"Time\" value={time} onChangeText={setTime} style={styles.input} />\n      <TextInput placeholder=\"Budget\" value={budget} onChangeText={setBudget} style={styles.input} />\n      <TextInput placeholder=\"Cuisine\" value={cuisine} onChangeText={setCuisine} style={styles.input} />\n\n      <Pressable onPress={() => setShowPicker(true)} style={styles.dateButton}>\n        <Text style={styles.dateButtonText}>\n          üìÖ {date.toDateString()}\n        </Text>\n      </Pressable>\n\n      {showPicker && (\n        <DateTimePicker\n          value={date}\n          mode=\"date\"\n          display={Platform.OS === \"ios\" ? \"inline\" : \"default\"}\n          onChange={(_, selectedDate) => {\n            setShowPicker(false);\n            if (selectedDate) setDate(selectedDate);\n          }}\n        />\n      )}\n\n      <View style={styles.toggleContainer}>\n        <Pressable\n          style={[\n            styles.toggleButton,\n            mealType === \"Meal Buddy\" && styles.activeToggle,\n          ]}\n          onPress={() => setMealType(\"Meal Buddy\")}\n        >\n          <Text>üçú Just Dinner</Text>\n        </Pressable>\n        <Pressable\n          style={[\n            styles.toggleButton,\n            mealType === \"Open to More\" && styles.activeToggle,\n          ]}\n          onPress={() => setMealType(\"Open to More\")}\n        >\n          <Text>‚ù§Ô∏è Open to More</Text>\n        </Pressable>\n      </View>\n\n      <Pressable style={styles.submitButton} onPress={handleSubmit}>\n        <Text style={styles.submitText}>Submit</Text>\n      </Pressable>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { padding: 20, paddingBottom: 60 },\n  title: { fontSize: 22, fontWeight: \"bold\", marginBottom: 16 },\n  input: {\n    borderWidth: 1,\n    borderColor: \"#ccc\",\n    padding: 12,\n    borderRadius: 10,\n    marginBottom: 16,\n  },\n  toggleContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginBottom: 20,\n  },\n  toggleButton: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    marginHorizontal: 6,\n    borderRadius: 20,\n    backgroundColor: \"#eee\",\n  },\n  activeToggle: {\n    backgroundColor: \"#007aff\",\n  },\n  dateButton: {\n    backgroundColor: \"#eaeaea\",\n    padding: 12,\n    borderRadius: 10,\n    alignItems: \"center\",\n    marginBottom: 16,\n  },\n  dateButtonText: {\n    color: \"#333\",\n    fontWeight: \"600\",\n  },\n  submitButton: {\n    backgroundColor: \"#007aff\",\n    padding: 14,\n    borderRadius: 10,\n    alignItems: \"center\",\n    marginTop: 10,\n  },\n  submitText: {\n    color: \"#fff\",\n    fontWeight: \"bold\",\n  },\n});\n"
        }
    ]
}