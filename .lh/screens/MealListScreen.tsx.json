{
    "sourceFile": "screens/MealListScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1748564425800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748564665735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n import { View, Text, StyleSheet, FlatList, Pressable } from \"react-native\";\n import { useState } from \"react\";\n import { useNavigation } from \"@react-navigation/native\";\n-import type { Meal } from \"../types\";\n \n-\n type Meal = {\n   id: string;\n   title: string;\n   mealType: \"Meal Buddy\" | \"Open to More\";\n"
                },
                {
                    "date": 1748564692269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,10 @@\n import { View, Text, StyleSheet, FlatList, Pressable } from \"react-native\";\n import { useState } from \"react\";\n import { useNavigation } from \"@react-navigation/native\";\n+import type { Meal } from \"../types\";\n \n-type Meal = {\n-  id: string;\n-  title: string;\n-  mealType: \"Meal Buddy\" | \"Open to More\";\n-  location?: string;\n-  time?: string;\n-  budget?: string;\n-  cuisine?: string;\n-};\n \n-\n export default function MealListScreen() {\n   const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\n     \"Meal Buddy\"\n   );\n"
                },
                {
                    "date": 1748564848438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,37 +8,57 @@\n   const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\n     \"Meal Buddy\"\n   );\n \n-  const [meals, setMeals] = useState([\n-    // Initial dummy meal events\n+  const [meals, setMeals] = useState<Meal[]>([\n     {\n       id: \"1\",\n       title: \"üç≤ Dollar Shop Hotpot @ Bellevue\",\n       mealType: \"Meal Buddy\",\n+      location: \"Bellevue\",\n+      time: \"6:30 PM\",\n+      budget: \"$20-30\",\n+      cuisine: \"Hotpot\",\n+      people: 1,\n+      max: 4,\n     },\n     {\n       id: \"2\",\n       title: \"üç£ Sushi Kashiba Dinner Meetup\",\n       mealType: \"Open to More\",\n+      people: 2,\n+      max: 2,\n     },\n     {\n       id: \"3\",\n       title: \"üçî Dick‚Äôs Drive-In Burger Night\",\n       mealType: \"Meal Buddy\",\n+      people: 1,\n+      max: 3,\n     },\n     {\n       id: \"4\",\n       title: \"ü•ü Din Tai Fung Xiao Long Bao Gathering\",\n       mealType: \"Open to More\",\n+      people: 2,\n+      max: 5,\n     },\n-    { id: \"5\", title: \"üçú Ramen Danbo Lunch\", mealType: \"Meal Buddy\" },\n     {\n+      id: \"5\",\n+      title: \"üçú Ramen Danbo Lunch\",\n+      mealType: \"Meal Buddy\",\n+      people: 1,\n+      max: 2,\n+    },\n+    {\n       id: \"6\",\n       title: \"üåÆ Tacos Chukis Capitol Hill\",\n       mealType: \"Open to More\",\n+      people: 3,\n+      max: 4,\n     },\n   ]);\n+\n   const navigation = useNavigation();\n   const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n \n   return (\n"
                },
                {
                    "date": 1748636775846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,18 @@\n     </View>\n   );\n }\n \n+      <Pressable\n+        style={styles.joinButton}\n+        onPress={() =>\n+          navigation.navigate(\"MealDetail\", { meal: item })\n+        }\n+      >\n+        <Text style={styles.joinButtonText}>Join</Text>\n+      </Pressable>\n+\n+\n const styles = StyleSheet.create({\n   container: {\n     flex: 1,\n     padding: 16,\n"
                },
                {
                    "date": 1748637380568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,18 @@\n-import { View, Text, StyleSheet, FlatList, Pressable } from \"react-native\";\n+import {\n+  View,\n+  Text,\n+  StyleSheet,\n+  FlatList,\n+  Pressable,\n+  Alert,\n+} from \"react-native\";\n import { useState } from \"react\";\n import { useNavigation } from \"@react-navigation/native\";\n import type { Meal } from \"../types\";\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n+import type { RootStackParamList } from \"../types\";\n \n-\n export default function MealListScreen() {\n   const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\n     \"Meal Buddy\"\n   );\n@@ -24,42 +32,31 @@\n     {\n       id: \"2\",\n       title: \"üç£ Sushi Kashiba Dinner Meetup\",\n       mealType: \"Open to More\",\n+      location: \"Seattle\",\n+      time: \"7:00 PM\",\n+      budget: \"$50+\",\n+      cuisine: \"Sushi\",\n       people: 2,\n       max: 2,\n     },\n     {\n       id: \"3\",\n       title: \"üçî Dick‚Äôs Drive-In Burger Night\",\n       mealType: \"Meal Buddy\",\n+      location: \"Seattle\",\n+      time: \"5:30 PM\",\n+      budget: \"$10\",\n+      cuisine: \"Burgers\",\n       people: 1,\n       max: 3,\n     },\n-    {\n-      id: \"4\",\n-      title: \"ü•ü Din Tai Fung Xiao Long Bao Gathering\",\n-      mealType: \"Open to More\",\n-      people: 2,\n-      max: 5,\n-    },\n-    {\n-      id: \"5\",\n-      title: \"üçú Ramen Danbo Lunch\",\n-      mealType: \"Meal Buddy\",\n-      people: 1,\n-      max: 2,\n-    },\n-    {\n-      id: \"6\",\n-      title: \"üåÆ Tacos Chukis Capitol Hill\",\n-      mealType: \"Open to More\",\n-      people: 3,\n-      max: 4,\n-    },\n   ]);\n \n-  const navigation = useNavigation();\n+  const navigation =\n+    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+\n   const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n \n   return (\n     <View style={styles.container}>\n@@ -90,47 +87,49 @@\n       {/* Filtered list */}\n       <FlatList\n         data={filteredMeals}\n         keyExtractor={(item) => item.id}\n-        renderItem={({ item }: { item: Meal }) => (\n+        renderItem={({ item }) => (\n           <View style={styles.mealCard}>\n             <Text style={styles.mealTitle}>{item.title}</Text>\n             {item.location && <Text>üìç {item.location}</Text>}\n             {item.time && <Text>‚è∞ {item.time}</Text>}\n             {item.budget && <Text>üí∞ {item.budget}</Text>}\n             {item.cuisine && <Text>üçΩÔ∏è {item.cuisine}</Text>}\n+            <Text>\n+              üë• {item.people} / {item.max} people\n+            </Text>\n+\n+            {/* Join Button */}\n+            <Pressable\n+              style={styles.joinButton}\n+              onPress={() => navigation.navigate(\"MealDetail\", { meal: item })}\n+              disabled={item.people >= item.max}\n+            >\n+              <Text style={styles.joinButtonText}>\n+                {item.people >= item.max ? \"Full\" : \"Join\"}\n+              </Text>\n+            </Pressable>\n           </View>\n-      )}\n-    />\n+        )}\n+      />\n \n-\n       {/* Add meal event */}\n       <Pressable\n-        style={styles.button}\n-        onPress={() => {\n-          // Pass meal-adding function to CreateMeal screen\n-          // @ts-ignore\n+        style={styles.createButton}\n+        onPress={() =>\n           navigation.navigate(\"CreateMeal\", {\n-            addMeal: (newMeal: Meal) => setMeals((prev) => [...prev, newMeal]),\n-          });\n-        }}\n+            addMeal: (newMeal: Meal) =>\n+              setMeals((prev) => [...prev, newMeal]),\n+          })\n+        }\n       >\n-        <Text style={styles.buttonText}>Ôºã Create Meal Event</Text>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal Event</Text>\n       </Pressable>\n     </View>\n   );\n }\n \n-      <Pressable\n-        style={styles.joinButton}\n-        onPress={() =>\n-          navigation.navigate(\"MealDetail\", { meal: item })\n-        }\n-      >\n-        <Text style={styles.joinButtonText}>Join</Text>\n-      </Pressable>\n-\n-\n const styles = StyleSheet.create({\n   container: {\n     flex: 1,\n     padding: 16,\n@@ -154,9 +153,9 @@\n     borderColor: \"#ccc\",\n     borderRadius: 8,\n   },\n   activeToggle: {\n-    backgroundColor: \"#e0e0e0\",\n+    backgroundColor: \"#d0ebff\",\n   },\n   mealCard: {\n     backgroundColor: \"#f0f0f0\",\n     padding: 16,\n@@ -164,18 +163,30 @@\n     marginBottom: 12,\n   },\n   mealTitle: {\n     fontSize: 16,\n-    fontWeight: \"500\",\n+    fontWeight: \"600\",\n+    marginBottom: 4,\n   },\n-  button: {\n+  joinButton: {\n+    marginTop: 10,\n+    backgroundColor: \"#007aff\",\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: \"center\",\n+  },\n+  joinButtonText: {\n+    color: \"#fff\",\n+    fontWeight: \"600\",\n+  },\n+  createButton: {\n     backgroundColor: \"#ff7f50\",\n-    padding: 12,\n+    padding: 14,\n     borderRadius: 10,\n     alignItems: \"center\",\n     marginTop: 16,\n   },\n-  buttonText: {\n+  createButtonText: {\n     color: \"#fff\",\n     fontSize: 16,\n     fontWeight: \"600\",\n   },\n"
                },
                {
                    "date": 1748637706521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,87 +5,106 @@\n   FlatList,\n   Pressable,\n   Alert,\n } from \"react-native\";\n-import { useState } from \"react\";\n+import { useState, useEffect } from \"react\";\n+import AsyncStorage from \"@react-native-async-storage/async-storage\";\n import { useNavigation } from \"@react-navigation/native\";\n import type { Meal } from \"../types\";\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n import type { RootStackParamList } from \"../types\";\n \n export default function MealListScreen() {\n-  const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\n-    \"Meal Buddy\"\n-  );\n+  const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n \n-  const [meals, setMeals] = useState<Meal[]>([\n-    {\n-      id: \"1\",\n-      title: \"üç≤ Dollar Shop Hotpot @ Bellevue\",\n-      mealType: \"Meal Buddy\",\n-      location: \"Bellevue\",\n-      time: \"6:30 PM\",\n-      budget: \"$20-30\",\n-      cuisine: \"Hotpot\",\n-      people: 1,\n-      max: 4,\n-    },\n-    {\n-      id: \"2\",\n-      title: \"üç£ Sushi Kashiba Dinner Meetup\",\n-      mealType: \"Open to More\",\n-      location: \"Seattle\",\n-      time: \"7:00 PM\",\n-      budget: \"$50+\",\n-      cuisine: \"Sushi\",\n-      people: 2,\n-      max: 2,\n-    },\n-    {\n-      id: \"3\",\n-      title: \"üçî Dick‚Äôs Drive-In Burger Night\",\n-      mealType: \"Meal Buddy\",\n-      location: \"Seattle\",\n-      time: \"5:30 PM\",\n-      budget: \"$10\",\n-      cuisine: \"Burgers\",\n-      people: 1,\n-      max: 3,\n-    },\n-  ]);\n+  // Load meals from local storage\n+  useEffect(() => {\n+    const loadMeals = async () => {\n+      try {\n+        const stored = await AsyncStorage.getItem(\"meals\");\n+        if (stored) {\n+          setMeals(JSON.parse(stored));\n+        } else {\n+          const defaultMeals: Meal[] = [\n+            {\n+              id: \"1\",\n+              title: \"üç≤ Dollar Shop Hotpot @ Bellevue\",\n+              mealType: \"Meal Buddy\",\n+              location: \"Bellevue\",\n+              time: \"6:30 PM\",\n+              budget: \"$20-30\",\n+              cuisine: \"Hotpot\",\n+              people: 1,\n+              max: 4,\n+            },\n+            {\n+              id: \"2\",\n+              title: \"üç£ Sushi Kashiba Dinner Meetup\",\n+              mealType: \"Open to More\",\n+              location: \"Seattle\",\n+              time: \"7:00 PM\",\n+              budget: \"$50+\",\n+              cuisine: \"Sushi\",\n+              people: 2,\n+              max: 2,\n+            },\n+          ];\n+          setMeals(defaultMeals);\n+          await AsyncStorage.setItem(\"meals\", JSON.stringify(defaultMeals));\n+        }\n+      } catch (err) {\n+        console.error(\"Failed to load meals\", err);\n+      }\n+    };\n \n-  const navigation =\n-    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+    loadMeals();\n+  }, []);\n \n+  // Update storage when meals change\n+  useEffect(() => {\n+    AsyncStorage.setItem(\"meals\", JSON.stringify(meals));\n+  }, [meals]);\n+\n   const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n \n+  const handleJoin = (meal: Meal) => {\n+    if (meal.people >= meal.max) {\n+      Alert.alert(\"Sorry\", \"This event is full!\");\n+      return;\n+    }\n+\n+    const updated = meals.map((m) =>\n+      m.id === meal.id ? { ...m, people: m.people + 1 } : m\n+    );\n+    setMeals(updated);\n+    Alert.alert(\"Joined!\", \"You‚Äôve joined this meal event üéâ\");\n+  };\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n   return (\n     <View style={styles.container}>\n       <Text style={styles.title}>üçΩÔ∏è Explore Meal Events</Text>\n \n-      {/* Toggle filter */}\n       <View style={styles.toggleContainer}>\n         <Pressable\n-          style={[\n-            styles.toggleButton,\n-            filter === \"Meal Buddy\" && styles.activeToggle,\n-          ]}\n+          style={[styles.toggleButton, filter === \"Meal Buddy\" && styles.activeToggle]}\n           onPress={() => setFilter(\"Meal Buddy\")}\n         >\n           <Text>üçú Meal Buddy</Text>\n         </Pressable>\n         <Pressable\n-          style={[\n-            styles.toggleButton,\n-            filter === \"Open to More\" && styles.activeToggle,\n-          ]}\n+          style={[styles.toggleButton, filter === \"Open to More\" && styles.activeToggle]}\n           onPress={() => setFilter(\"Open to More\")}\n         >\n           <Text>‚ù§Ô∏è Open to More</Text>\n         </Pressable>\n       </View>\n \n-      {/* Filtered list */}\n       <FlatList\n         data={filteredMeals}\n         keyExtractor={(item) => item.id}\n         renderItem={({ item }) => (\n@@ -98,13 +117,15 @@\n             <Text>\n               üë• {item.people} / {item.max} people\n             </Text>\n \n-            {/* Join Button */}\n             <Pressable\n-              style={styles.joinButton}\n-              onPress={() => navigation.navigate(\"MealDetail\", { meal: item })}\n+              style={[\n+                styles.joinButton,\n+                item.people >= item.max && { backgroundColor: \"#ccc\" },\n+              ]}\n               disabled={item.people >= item.max}\n+              onPress={() => handleJoin(item)}\n             >\n               <Text style={styles.joinButtonText}>\n                 {item.people >= item.max ? \"Full\" : \"Join\"}\n               </Text>\n@@ -112,15 +133,13 @@\n           </View>\n         )}\n       />\n \n-      {/* Add meal event */}\n       <Pressable\n         style={styles.createButton}\n         onPress={() =>\n           navigation.navigate(\"CreateMeal\", {\n-            addMeal: (newMeal: Meal) =>\n-              setMeals((prev) => [...prev, newMeal]),\n+            addMeal: handleAddMeal,\n           })\n         }\n       >\n         <Text style={styles.createButtonText}>Ôºã Create Meal Event</Text>\n@@ -129,56 +148,33 @@\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: {\n-    flex: 1,\n-    padding: 16,\n-    paddingTop: 40,\n-    backgroundColor: \"#fff\",\n-  },\n-  title: {\n-    fontSize: 24,\n-    fontWeight: \"bold\",\n-    marginBottom: 16,\n-  },\n-  toggleContainer: {\n-    flexDirection: \"row\",\n-    justifyContent: \"center\",\n-    marginBottom: 16,\n-    gap: 10,\n-  },\n+  container: { flex: 1, padding: 16, paddingTop: 40, backgroundColor: \"#fff\" },\n+  title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 16 },\n+  toggleContainer: { flexDirection: \"row\", justifyContent: \"center\", gap: 10, marginBottom: 16 },\n   toggleButton: {\n     padding: 10,\n     borderWidth: 1,\n     borderColor: \"#ccc\",\n     borderRadius: 8,\n   },\n-  activeToggle: {\n-    backgroundColor: \"#d0ebff\",\n-  },\n+  activeToggle: { backgroundColor: \"#d0ebff\" },\n   mealCard: {\n     backgroundColor: \"#f0f0f0\",\n     padding: 16,\n     borderRadius: 10,\n     marginBottom: 12,\n   },\n-  mealTitle: {\n-    fontSize: 16,\n-    fontWeight: \"600\",\n-    marginBottom: 4,\n-  },\n+  mealTitle: { fontSize: 16, fontWeight: \"600\", marginBottom: 4 },\n   joinButton: {\n     marginTop: 10,\n     backgroundColor: \"#007aff\",\n     paddingVertical: 8,\n     borderRadius: 8,\n     alignItems: \"center\",\n   },\n-  joinButtonText: {\n-    color: \"#fff\",\n-    fontWeight: \"600\",\n-  },\n+  joinButtonText: { color: \"#fff\", fontWeight: \"600\" },\n   createButton: {\n     backgroundColor: \"#ff7f50\",\n     padding: 14,\n     borderRadius: 10,\n"
                },
                {
                    "date": 1748640002694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,11 @@\n       m.id === meal.id ? { ...m, people: m.people + 1 } : m\n     );\n     setMeals(updated);\n     Alert.alert(\"Joined!\", \"You‚Äôve joined this meal event üéâ\");\n+    \n+    navigation.navigate(\"ChatRoom\", { mealId: meal.id });\n+\n   };\n \n   const handleAddMeal = (newMeal: Meal) => {\n     setMeals((prev) => [...prev, newMeal]);\n"
                },
                {
                    "date": 1748642439431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,192 +1,163 @@\n+// ‚úÖ ÂÆåÊï¥ Firebase Êé•ÂÖ•Áâà MealListScreen.tsx\n import {\n   View,\n   Text,\n   StyleSheet,\n   FlatList,\n   Pressable,\n   Alert,\n-} from \"react-native\";\n-import { useState, useEffect } from \"react\";\n-import AsyncStorage from \"@react-native-async-storage/async-storage\";\n-import { useNavigation } from \"@react-navigation/native\";\n-import type { Meal } from \"../types\";\n-import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n-import type { RootStackParamList } from \"../types\";\n+  RefreshControl,\n+} from 'react-native';\n+import { useState, useEffect } from 'react';\n+import { ref as dbRef, onValue, update, get } from 'firebase/database';\n+import { db } from '../firebase';\n+import { useNavigation } from '@react-navigation/native';\n+import auth from '@react-native-firebase/auth';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import type { RootStackParamList, Meal } from '../types';\n \n export default function MealListScreen() {\n-  const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\"Meal Buddy\");\n+  const [filter, setFilter] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n   const [meals, setMeals] = useState<Meal[]>([]);\n+  const [refreshing, setRefreshing] = useState(false);\n   const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n+  const user = auth().currentUser;\n \n-  // Load meals from local storage\n   useEffect(() => {\n-    const loadMeals = async () => {\n-      try {\n-        const stored = await AsyncStorage.getItem(\"meals\");\n-        if (stored) {\n-          setMeals(JSON.parse(stored));\n-        } else {\n-          const defaultMeals: Meal[] = [\n-            {\n-              id: \"1\",\n-              title: \"üç≤ Dollar Shop Hotpot @ Bellevue\",\n-              mealType: \"Meal Buddy\",\n-              location: \"Bellevue\",\n-              time: \"6:30 PM\",\n-              budget: \"$20-30\",\n-              cuisine: \"Hotpot\",\n-              people: 1,\n-              max: 4,\n-            },\n-            {\n-              id: \"2\",\n-              title: \"üç£ Sushi Kashiba Dinner Meetup\",\n-              mealType: \"Open to More\",\n-              location: \"Seattle\",\n-              time: \"7:00 PM\",\n-              budget: \"$50+\",\n-              cuisine: \"Sushi\",\n-              people: 2,\n-              max: 2,\n-            },\n-          ];\n-          setMeals(defaultMeals);\n-          await AsyncStorage.setItem(\"meals\", JSON.stringify(defaultMeals));\n-        }\n-      } catch (err) {\n-        console.error(\"Failed to load meals\", err);\n-      }\n-    };\n-\n-    loadMeals();\n+    const mealsRef = dbRef(db, 'meals');\n+    const unsubscribe = onValue(mealsRef, (snapshot) => {\n+      const data = snapshot.val() || {};\n+      const allMeals = Object.values(data);\n+      setMeals(allMeals);\n+    });\n+    return () => unsubscribe();\n   }, []);\n \n-  // Update storage when meals change\n-  useEffect(() => {\n-    AsyncStorage.setItem(\"meals\", JSON.stringify(meals));\n-  }, [meals]);\n+  const onRefresh = async () => {\n+    setRefreshing(true);\n+    const snapshot = await get(dbRef(db, 'meals'));\n+    const data = snapshot.val() || {};\n+    setMeals(Object.values(data));\n+    setRefreshing(false);\n+    Alert.alert('Refreshed ‚úÖ', 'Meal list updated!');\n+  };\n \n-  const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n-\n-  const handleJoin = (meal: Meal) => {\n+  const handleJoin = async (meal: Meal) => {\n     if (meal.people >= meal.max) {\n-      Alert.alert(\"Sorry\", \"This event is full!\");\n+      Alert.alert('Sorry', 'This event is full!');\n       return;\n     }\n+    if (meal.joinedIds?.includes(user.uid)) {\n+      Alert.alert('Already joined', 'You‚Äôre already in this meal');\n+      navigation.navigate('ChatRoom', { mealId: meal.id });\n+      return;\n+    }\n \n-    const updated = meals.map((m) =>\n-      m.id === meal.id ? { ...m, people: m.people + 1 } : m\n-    );\n-    setMeals(updated);\n-    Alert.alert(\"Joined!\", \"You‚Äôve joined this meal event üéâ\");\n-    \n-    navigation.navigate(\"ChatRoom\", { mealId: meal.id });\n+    const updatedPeople = meal.people + 1;\n+    const updatedJoined = meal.joinedIds ? [...meal.joinedIds, user.uid] : [user.uid];\n \n-  };\n+    await update(dbRef(db, `meals/${meal.id}`), {\n+      people: updatedPeople,\n+      joinedIds: updatedJoined,\n+    });\n \n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n+    Alert.alert('Joined!', 'You‚Äôve joined this meal event üéâ');\n+    navigation.navigate('ChatRoom', { mealId: meal.id });\n   };\n \n+  const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n+\n   return (\n     <View style={styles.container}>\n       <Text style={styles.title}>üçΩÔ∏è Explore Meal Events</Text>\n \n       <View style={styles.toggleContainer}>\n         <Pressable\n-          style={[styles.toggleButton, filter === \"Meal Buddy\" && styles.activeToggle]}\n-          onPress={() => setFilter(\"Meal Buddy\")}\n+          style={[styles.toggleButton, filter === 'Meal Buddy' && styles.activeToggle]}\n+          onPress={() => setFilter('Meal Buddy')}\n         >\n           <Text>üçú Meal Buddy</Text>\n         </Pressable>\n         <Pressable\n-          style={[styles.toggleButton, filter === \"Open to More\" && styles.activeToggle]}\n-          onPress={() => setFilter(\"Open to More\")}\n+          style={[styles.toggleButton, filter === 'Open to More' && styles.activeToggle]}\n+          onPress={() => setFilter('Open to More')}\n         >\n           <Text>‚ù§Ô∏è Open to More</Text>\n         </Pressable>\n       </View>\n \n       <FlatList\n         data={filteredMeals}\n+        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n         keyExtractor={(item) => item.id}\n         renderItem={({ item }) => (\n           <View style={styles.mealCard}>\n             <Text style={styles.mealTitle}>{item.title}</Text>\n             {item.location && <Text>üìç {item.location}</Text>}\n             {item.time && <Text>‚è∞ {item.time}</Text>}\n             {item.budget && <Text>üí∞ {item.budget}</Text>}\n             {item.cuisine && <Text>üçΩÔ∏è {item.cuisine}</Text>}\n-            <Text>\n-              üë• {item.people} / {item.max} people\n-            </Text>\n+            <Text>üë• {item.people} / {item.max} people</Text>\n \n             <Pressable\n-              style={[\n-                styles.joinButton,\n-                item.people >= item.max && { backgroundColor: \"#ccc\" },\n-              ]}\n+              style={[styles.joinButton, item.people >= item.max && { backgroundColor: '#ccc' }]}\n               disabled={item.people >= item.max}\n               onPress={() => handleJoin(item)}\n             >\n               <Text style={styles.joinButtonText}>\n-                {item.people >= item.max ? \"Full\" : \"Join\"}\n+                {item.people >= item.max ? 'Full' : 'Join'}\n               </Text>\n             </Pressable>\n           </View>\n         )}\n       />\n \n       <Pressable\n         style={styles.createButton}\n-        onPress={() =>\n-          navigation.navigate(\"CreateMeal\", {\n-            addMeal: handleAddMeal,\n-          })\n-        }\n+        onPress={() => navigation.navigate('CreateMeal')}\n       >\n         <Text style={styles.createButtonText}>Ôºã Create Meal Event</Text>\n       </Pressable>\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, paddingTop: 40, backgroundColor: \"#fff\" },\n-  title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 16 },\n-  toggleContainer: { flexDirection: \"row\", justifyContent: \"center\", gap: 10, marginBottom: 16 },\n+  container: { flex: 1, padding: 16, paddingTop: 40, backgroundColor: '#fff' },\n+  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  toggleContainer: { flexDirection: 'row', justifyContent: 'center', gap: 10, marginBottom: 16 },\n   toggleButton: {\n     padding: 10,\n     borderWidth: 1,\n-    borderColor: \"#ccc\",\n+    borderColor: '#ccc',\n     borderRadius: 8,\n   },\n-  activeToggle: { backgroundColor: \"#d0ebff\" },\n+  activeToggle: { backgroundColor: '#d0ebff' },\n   mealCard: {\n-    backgroundColor: \"#f0f0f0\",\n+    backgroundColor: '#f0f0f0',\n     padding: 16,\n     borderRadius: 10,\n     marginBottom: 12,\n   },\n-  mealTitle: { fontSize: 16, fontWeight: \"600\", marginBottom: 4 },\n+  mealTitle: { fontSize: 16, fontWeight: '600', marginBottom: 4 },\n   joinButton: {\n     marginTop: 10,\n-    backgroundColor: \"#007aff\",\n+    backgroundColor: '#007aff',\n     paddingVertical: 8,\n     borderRadius: 8,\n-    alignItems: \"center\",\n+    alignItems: 'center',\n   },\n-  joinButtonText: { color: \"#fff\", fontWeight: \"600\" },\n+  joinButtonText: { color: '#fff', fontWeight: '600' },\n   createButton: {\n-    backgroundColor: \"#ff7f50\",\n+    backgroundColor: '#ff7f50',\n     padding: 14,\n     borderRadius: 10,\n-    alignItems: \"center\",\n+    alignItems: 'center',\n     marginTop: 16,\n   },\n   createButtonText: {\n-    color: \"#fff\",\n+    color: '#fff',\n     fontSize: 16,\n-    fontWeight: \"600\",\n+    fontWeight: '600',\n   },\n });\n"
                },
                {
                    "date": 1748643375385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// ‚úÖ ÂÆåÊï¥ Firebase Êé•ÂÖ•Áâà MealListScreen.tsx\n import {\n   View,\n   Text,\n   StyleSheet,\n@@ -98,66 +97,33 @@\n             {item.budget && <Text>üí∞ {item.budget}</Text>}\n             {item.cuisine && <Text>üçΩÔ∏è {item.cuisine}</Text>}\n             <Text>üë• {item.people} / {item.max} people</Text>\n \n-            <Pressable\n-              style={[styles.joinButton, item.people >= item.max && { backgroundColor: '#ccc' }]}\n-              disabled={item.people >= item.max}\n-              onPress={() => handleJoin(item)}\n-            >\n-              <Text style={styles.joinButtonText}>\n-                {item.people >= item.max ? 'Full' : 'Join'}\n-              </Text>\n-            </Pressable>\n+            {item.creatorId === user.uid && (\n+              <Text style={{ color: '#ff6600', fontWeight: 'bold' }}>üõ† You created this meal</Text>\n+            )}\n+\n+            {item.joinedIds?.includes(user.uid) ? (\n+              <Pressable\n+                style={[styles.joinButton, { backgroundColor: '#28a745' }]}\n+                onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n+              >\n+                <Text style={styles.joinButtonText}>Enter Chat</Text>\n+              </Pressable>\n+            ) : (\n+              <Pressable\n+                style={[styles.joinButton, item.people >= item.max && { backgroundColor: '#ccc' }]}\n+                disabled={item.people >= item.max}\n+                onPress={() => handleJoin(item)}\n+              >\n+                <Text style={styles.joinButtonText}>\n+                  {item.people >= item.max ? 'Full' : 'Join'}\n+                </Text>\n+              </Pressable>\n+            )}\n           </View>\n         )}\n       />\n \n       <Pressable\n         style={styles.createButton}\n-        onPress={() => navigation.navigate('CreateMeal')}\n-      >\n-        <Text style={styles.createButtonText}>Ôºã Create Meal Event</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, paddingTop: 40, backgroundColor: '#fff' },\n-  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  toggleContainer: { flexDirection: 'row', justifyContent: 'center', gap: 10, marginBottom: 16 },\n-  toggleButton: {\n-    padding: 10,\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-  },\n-  activeToggle: { backgroundColor: '#d0ebff' },\n-  mealCard: {\n-    backgroundColor: '#f0f0f0',\n-    padding: 16,\n-    borderRadius: 10,\n-    marginBottom: 12,\n-  },\n-  mealTitle: { fontSize: 16, fontWeight: '600', marginBottom: 4 },\n-  joinButton: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  joinButtonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-    marginTop: 16,\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n+        onPress={() =\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748648612113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+import {\n+  View,\n+  Text,\n+  TextInput,\n+  Pressable,\n+  StyleSheet,\n+  Alert,\n+} from 'react-native';\n+import { useState } from 'react';\n+import { useRoute, useNavigation } from '@react-navigation/native';\n+import type { RouteProp } from '@react-navigation/native';\n+import type { RootStackParamList, Meal } from '../types';\n+import { ref, update } from 'firebase/database';\n+import { db } from '../firebase';\n+\n+type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+\n+export default function EditMealScreen() {\n+  const { params } = useRoute<EditMealRouteProp>();\n+  const navigation = useNavigation();\n+  const meal = params.meal;\n+\n+  const [title, setTitle] = useState(meal.title);\n+  const [location, setLocation] = useState(meal.location);\n+  const [time, setTime] = useState(meal.time);\n+  const [budget, setBudget] = useState(meal.budget);\n+  const [cuisine, setCuisine] = useState(meal.cuisine);\n+\n+  const handleUpdate = async () => {\n+    try {\n+      const updates = {\n+        title,\n+        location,\n+        time,\n+        budget,\n+        cuisine,\n+      };\n+\n+      await update(ref(db, `meals/${meal.id}`), updates);\n+      Alert.alert('Success', 'Meal updated!');\n+      navigation.goBack();\n+    } catch (err) {\n+      console.error('Update failed:', err);\n+      Alert.alert('Error', 'Failed to update meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.title}>‚úè Edit Meal</Text>\n+\n+      <TextInput\n+        style={styles.input}\n+        value={title}\n+        onChangeText={setTitle}\n+        placeholder=\"Title\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={location}\n+        onChangeText={setLocation}\n+        placeholder=\"Location\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={time}\n+        onChangeText={setTime}\n+        placeholder=\"Time\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={budget}\n+        onChangeText={setBudget}\n+        placeholder=\"Budget\"\n+      />\n+      <TextInput\n+        style={styles.input}\n+        value={cuisine}\n+        onChangeText={setCuisine}\n+        placeholder=\"Cuisine\"\n+      />\n+\n+      <Pressable onPress={handleUpdate} style={styles.button}>\n+        <Text style={styles.buttonText}>Save Changes</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n+  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n+  input: {\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+    borderRadius: 8,\n+    padding: 12,\n+    marginBottom: 12,\n+  },\n+  button: {\n+    backgroundColor: '#007aff',\n+    padding: 14,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+    marginTop: 12,\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+});\n"
                },
                {
                    "date": 1749529678309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,237 +1,107 @@\n import {\n   View,\n   Text,\n-  TextInput,\n+  FlatList,\n   Pressable,\n   StyleSheet,\n-  Alert,\n+  ActivityIndicator,\n+  RefreshControl,\n } from 'react-native';\n-import { useState } from 'react';\n-import { useRoute, useNavigation } from '@react-navigation/native';\n-import type { RouteProp } from '@react-navigation/native';\n-import type { RootStackParamList, Meal } from '../types';\n-import { ref, update } from 'firebase/database';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue } from 'firebase/database';\n import { db } from '../firebase';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n-type EditMealRouteProp = RouteProp<RootStackParamList, 'EditMeal'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n \n-export default function EditMealScreen() {\n-  const { params } = useRoute<EditMealRouteProp>();\n-  const navigation = useNavigation();\n-  const meal = params.meal;\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n \n-  const [title, setTitle] = useState(meal.title);\n-  const [location, setLocation] = useState(meal.location);\n-  const [time, setTime] = useState(meal.time);\n-  const [budget, setBudget] = useState(meal.budget);\n-  const [cuisine, setCuisine] = useState(meal.cuisine);\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const mealArray = Object.values(data) as Meal[];\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n \n-  const handleUpdate = async () => {\n-    try {\n-      const updates = {\n-        title,\n-        location,\n-        time,\n-        budget,\n-        cuisine,\n-      };\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n \n-      await update(ref(db, `meals/${meal.id}`), updates);\n-      Alert.alert('Success', 'Meal updated!');\n-      navigation.goBack();\n-    } catch (err) {\n-      console.error('Update failed:', err);\n-      Alert.alert('Error', 'Failed to update meal.');\n-    }\n-  };\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n \n   return (\n     <View style={styles.container}>\n-      <Text style={styles.title}>‚úè Edit Meal</Text>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n \n-      <TextInput\n-        style={styles.input}\n-        value={title}\n-        onChangeText={setTitle}\n-        placeholder=\"Title\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={location}\n-        onChangeText={setLocation}\n-        placeholder=\"Location\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={time}\n-        onChangeText={setTime}\n-        placeholder=\"Time\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={budget}\n-        onChangeText={setBudget}\n-        placeholder=\"Budget\"\n-      />\n-      <TextInput\n-        style={styles.input}\n-        value={cuisine}\n-        onChangeText={setCuisine}\n-        placeholder=\"Cuisine\"\n-      />\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => (\n+            <View style={styles.card}>\n+              <Text style={styles.title}>{item.title}</Text>\n+              <Text>üìç {item.location}</Text>\n+              <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+              <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+              <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n \n-      <Pressable onPress={handleUpdate} style={styles.button}>\n-        <Text style={styles.buttonText}>Save Changes</Text>\n-      </Pressable>\n+              <Pressable\n+                style={styles.button}\n+                onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n+              >\n+                <Text style={styles.buttonText}>Join</Text>\n+              </Pressable>\n+            </View>\n+          )}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No meal events found near you.\n+            </Text>\n+          }\n+        />\n+      )}\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 20, backgroundColor: '#fff' },\n-  title: { fontSize: 22, fontWeight: 'bold', marginBottom: 16 },\n-  input: {\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n     borderWidth: 1,\n-    borderColor: '#ccc',\n-    borderRadius: 8,\n-    padding: 12,\n-    marginBottom: 12,\n+    borderColor: '#ddd',\n   },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n   button: {\n+    marginTop: 10,\n     backgroundColor: '#007aff',\n-    padding: 14,\n+    paddingVertical: 8,\n     borderRadius: 8,\n     alignItems: 'center',\n-    marginTop: 12,\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n });\n-import {\n-  View,\n-  Text,\n-  StyleSheet,\n-  FlatList,\n-  Pressable,\n-  Alert,\n-  RefreshControl,\n-} from 'react-native';\n-import { useState, useEffect } from 'react';\n-import { ref as dbRef, onValue, update, get } from 'firebase/database';\n-import { db } from '../firebase';\n-import { useNavigation } from '@react-navigation/native';\n-import auth from '@react-native-firebase/auth';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import type { RootStackParamList, Meal } from '../types';\n-\n-export default function MealListScreen() {\n-  const [filter, setFilter] = useState<'Meal Buddy' | 'Open to More'>('Meal Buddy');\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [refreshing, setRefreshing] = useState(false);\n-  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n-  const user = auth().currentUser;\n-\n-  useEffect(() => {\n-    const mealsRef = dbRef(db, 'meals');\n-    const unsubscribe = onValue(mealsRef, (snapshot) => {\n-      const data = snapshot.val() || {};\n-      const allMeals = Object.values(data);\n-      setMeals(allMeals);\n-    });\n-    return () => unsubscribe();\n-  }, []);\n-\n-  const onRefresh = async () => {\n-    setRefreshing(true);\n-    const snapshot = await get(dbRef(db, 'meals'));\n-    const data = snapshot.val() || {};\n-    setMeals(Object.values(data));\n-    setRefreshing(false);\n-    Alert.alert('Refreshed ‚úÖ', 'Meal list updated!');\n-  };\n-\n-  const handleJoin = async (meal: Meal) => {\n-    if (meal.people >= meal.max) {\n-      Alert.alert('Sorry', 'This event is full!');\n-      return;\n-    }\n-    if (meal.joinedIds?.includes(user.uid)) {\n-      Alert.alert('Already joined', 'You‚Äôre already in this meal');\n-      navigation.navigate('ChatRoom', { mealId: meal.id });\n-      return;\n-    }\n\\ No newline at end of file\n-\n-    const updatedPeople = meal.people + 1;\n-    const updatedJoined = meal.joinedIds ? [...meal.joinedIds, user.uid] : [user.uid];\n-\n-    await update(dbRef(db, `meals/${meal.id}`), {\n-      people: updatedPeople,\n-      joinedIds: updatedJoined,\n-    });\n-\n-    Alert.alert('Joined!', 'You‚Äôve joined this meal event üéâ');\n-    navigation.navigate('ChatRoom', { mealId: meal.id });\n-  };\n-\n-  const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.title}>üçΩÔ∏è Explore Meal Events</Text>\n-\n-      <View style={styles.toggleContainer}>\n-        <Pressable\n-          style={[styles.toggleButton, filter === 'Meal Buddy' && styles.activeToggle]}\n-          onPress={() => setFilter('Meal Buddy')}\n-        >\n-          <Text>üçú Meal Buddy</Text>\n-        </Pressable>\n-        <Pressable\n-          style={[styles.toggleButton, filter === 'Open to More' && styles.activeToggle]}\n-          onPress={() => setFilter('Open to More')}\n-        >\n-          <Text>‚ù§Ô∏è Open to More</Text>\n-        </Pressable>\n-      </View>\n-\n-      <FlatList\n-        data={filteredMeals}\n-        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-        keyExtractor={(item) => item.id}\n-        renderItem={({ item }) => (\n-          <View style={styles.mealCard}>\n-            <Text style={styles.mealTitle}>{item.title}</Text>\n-            {item.location && <Text>üìç {item.location}</Text>}\n-            {item.time && <Text>‚è∞ {item.time}</Text>}\n-            {item.budget && <Text>üí∞ {item.budget}</Text>}\n-            {item.cuisine && <Text>üçΩÔ∏è {item.cuisine}</Text>}\n-            <Text>üë• {item.people} / {item.max} people</Text>\n-\n-            {item.creatorId === user.uid && (\n-              <Text style={{ color: '#ff6600', fontWeight: 'bold' }}>üõ† You created this meal</Text>\n-            )}\n-\n-            {item.joinedIds?.includes(user.uid) ? (\n-              <Pressable\n-                style={[styles.joinButton, { backgroundColor: '#28a745' }]}\n-                onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n-              >\n-                <Text style={styles.joinButtonText}>Enter Chat</Text>\n-              </Pressable>\n-            ) : (\n-              <Pressable\n-                style={[styles.joinButton, item.people >= item.max && { backgroundColor: '#ccc' }]}\n-                disabled={item.people >= item.max}\n-                onPress={() => handleJoin(item)}\n-              >\n-                <Text style={styles.joinButtonText}>\n-                  {item.people >= item.max ? 'Full' : 'Join'}\n-                </Text>\n-              </Pressable>\n-            )}\n-          </View>\n-        )}\n-      />\n-\n-      <Pressable\n-        style={styles.createButton}\n-        onPress={() =\n"
                },
                {
                    "date": 1749531317585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,14 @@\n   Pressable,\n   StyleSheet,\n   ActivityIndicator,\n   RefreshControl,\n+  Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n import { ref, onValue } from 'firebase/database';\n-import { db } from '../firebase';\n+import { db, auth } from '../firebase';\n import type { Meal, RootStackParamList } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n@@ -45,8 +46,25 @@\n     setRefreshing(true);\n     fetchMeals();\n   }, []);\n \n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    const userId = auth().currentUser?.uid;\n+    if (!userId) {\n+      Alert.alert('You must be logged in to create a meal');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n   return (\n     <View style={styles.container}>\n       <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n \n@@ -79,8 +97,12 @@\n             </Text>\n           }\n         />\n       )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n     </View>\n   );\n }\n \n@@ -103,5 +125,17 @@\n     borderRadius: 8,\n     alignItems: 'center',\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n });\n"
                },
                {
                    "date": 1749531463045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,18 +51,18 @@\n     setMeals((prev) => [...prev, newMeal]);\n   };\n \n   const handleCreateMeal = () => {\n-    const userId = auth().currentUser?.uid;\n+    const userId = auth.currentUser?.uid;\n     if (!userId) {\n-      Alert.alert('You must be logged in to create a meal');\n-      return;\n-    }\n+    Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+    return;\n+  }\n \n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n+  navigation.navigate('CreateMeal', {\n+    userId,\n+    addMeal: handleAddMeal,\n+  });\n   };\n \n   return (\n     <View style={styles.container}>\n"
                },
                {
                    "date": 1749532484389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,12 @@\n                 onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n               >\n                 <Text style={styles.buttonText}>Join</Text>\n               </Pressable>\n+\n+              <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n+                <Text style={styles.backButtonText}>‚Üê Go Back</Text>\n+              </Pressable>\n             </View>\n           )}\n           ListEmptyComponent={\n             <Text style={{ textAlign: 'center', marginTop: 24 }}>\n@@ -137,5 +141,17 @@\n     color: '#fff',\n     fontSize: 16,\n     fontWeight: '600',\n   },\n-});\n+  backButton: {\n+    marginTop: 20,\n+    padding: 10,\n+    alignItems: 'center',\n+    borderRadius: 6,\n+    borderWidth: 1,\n+    borderColor: '#ccc',\n+  },\n+  backButtonText: {\n+    color: '#007aff',\n+    fontWeight: 'bold',\n+  },\n+})\n"
                },
                {
                    "date": 1749532527127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue } from 'firebase/database';\n+import { db, auth } from '../firebase';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const mealArray = Object.values(data) as Meal[];\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    const userId = auth.currentUser?.uid;\n+    if (!userId) {\n+    Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+    return;\n+  }\n+\n+  navigation.navigate('CreateMeal', {\n+    userId,\n+    addMeal: handleAddMeal,\n+  });\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => (\n+            <View style={styles.card}>\n+              <Text style={styles.title}>{item.title}</Text>\n+              <Text>üìç {item.location}</Text>\n+              <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+              <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+              <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+\n+              <Pressable\n+                style={styles.button}\n+                onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n+              >\n+                <Text style={styles.buttonText}>Join</Text>\n+              </Pressable>\n+            </View>\n+          )}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No meal events found near you.\n+            </Text>\n+          }\n+        />\n+      )}\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749532544105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,175 +75,30 @@\n           data={meals}\n           keyExtractor={(item) => item.id}\n           refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n           renderItem={({ item }) => (\n-            <View style={styles.card}>\n-              <Text style={styles.title}>{item.title}</Text>\n-              <Text>üìç {item.location}</Text>\n-              <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-              <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-              <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+        <View style={styles.card}>\n+          <Text style={styles.title}>{item.title}</Text>\n+          <Text>üìç {item.location}</Text>\n+          <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+          <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+          <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n \n-              <Pressable\n-                style={styles.button}\n-                onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n-              >\n-                <Text style={styles.buttonText}>Join</Text>\n-              </Pressable>\n-            </View>\n-          )}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No meal events found near you.\n-            </Text>\n-          }\n-        />\n+          <Pressable\n+            style={styles.button}\n+            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n+          >\n+            <Text style={styles.buttonText}>Join</Text>\n+          </Pressable>\n+        </View>\n       )}\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  RefreshControl,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n-\n-export default function MealListScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-\n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (data) {\n-        const mealArray = Object.values(data) as Meal[];\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n+      ListEmptyComponent={\n+        <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+          No meal events found near you.\n+        </Text>\n       }\n-      setLoading(false);\n-      setRefreshing(false);\n-    });\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n-  const handleCreateMeal = () => {\n-    const userId = auth.currentUser?.uid;\n-    if (!userId) {\n-    Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-    return;\n-  }\n-\n-  navigation.navigate('CreateMeal', {\n-    userId,\n-    addMeal: handleAddMeal,\n-  });\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n-\n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => (\n-            <View style={styles.card}>\n-              <Text style={styles.title}>{item.title}</Text>\n-              <Text>üìç {item.location}</Text>\n-              <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-              <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-              <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n-\n-              <Pressable\n-                style={styles.button}\n-                onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n-              >\n-                <Text style={styles.buttonText}>Join</Text>\n-              </Pressable>\n-\n-              <Pressable onPress={() => navigation.goBack()} style={styles.backButton}>\n-                <Text style={styles.backButtonText}>‚Üê Go Back</Text>\n-              </Pressable>\n-            </View>\n-          )}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No meal events found near you.\n-            </Text>\n-          }\n-        />\n+    />\n       )}\n-\n       <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n         <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n       </Pressable>\n     </View>\n@@ -281,17 +136,5 @@\n     color: '#fff',\n     fontSize: 16,\n     fontWeight: '600',\n   },\n-  backButton: {\n-    marginTop: 20,\n-    padding: 10,\n-    alignItems: 'center',\n-    borderRadius: 6,\n-    borderWidth: 1,\n-    borderColor: '#ccc',\n-  },\n-  backButtonText: {\n-    color: '#007aff',\n-    fontWeight: 'bold',\n-  },\n-})\n+});\n"
                },
                {
                    "date": 1749535423366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,42 +3,91 @@\n   Text,\n   FlatList,\n   Pressable,\n   StyleSheet,\n+  RefreshControl,\n   ActivityIndicator,\n-  RefreshControl,\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue } from 'firebase/database';\n+import { ref, get, remove } from 'firebase/database';\n import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n+import type { RootStackParamList, Meal } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n \n-export default function MealListScreen() {\n+export default function MyMealsScreen() {\n   const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n+  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n \n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n+  const fetchMeals = async () => {\n+    try {\n+      const snapshot = await get(ref(db, 'meals'));\n       const data = snapshot.val();\n-      if (data) {\n-        const mealArray = Object.values(data) as Meal[];\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n+\n+      if (!data) {\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n       }\n+\n+      const userId = auth.currentUser?.uid;\n+      if (!userId) {\n+        console.error('‚ùå No user is logged in');\n+        setJoinedMeals([]);\n+        setMyCreatedMeals([]);\n+        return;\n+      }\n+\n+      // Á¢∫‰øùÊØèÂÄã meal ÈÉΩÂ∏∂‰∏ä id\n+      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n+        ...(meal as Meal),\n+        id,\n+      }));\n+\n+      const myJoinedMeals = mealsArray.filter((meal) =>\n+        meal.joinedIds?.includes(userId)\n+      );\n+\n+      const myMeals = mealsArray.filter((meal) =>\n+        meal.creatorId === userId\n+      );\n+\n+      setJoinedMeals(myJoinedMeals);\n+      setMyCreatedMeals(myMeals);\n+    } catch (err) {\n+      console.error('üî• Failed to fetch meals:', err);\n+      Alert.alert('Error', 'Failed to load your meals.');\n+    } finally {\n       setLoading(false);\n       setRefreshing(false);\n-    });\n+    }\n   };\n \n+  const handleDeleteMeal = async (mealId: string) => {\n+    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n+      { text: 'Cancel', style: 'cancel' },\n+      {\n+        text: 'Delete',\n+        style: 'destructive',\n+        onPress: async () => {\n+          try {\n+            await remove(ref(db, `meals/${mealId}`));\n+            fetchMeals(); // refresh list\n+          } catch (error) {\n+            console.error('üî• Failed to delete meal:', error);\n+            Alert.alert('Error', 'Failed to delete meal.');\n+          }\n+        },\n+      },\n+    ]);\n+  };\n+\n   useEffect(() => {\n     fetchMeals();\n   }, []);\n \n@@ -46,95 +95,81 @@\n     setRefreshing(true);\n     fetchMeals();\n   }, []);\n \n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n-  const handleCreateMeal = () => {\n-    const userId = auth.currentUser?.uid;\n-    if (!userId) {\n-    Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-    return;\n+  if (loading) {\n+    return (\n+      <View style={styles.center}>\n+        <ActivityIndicator size=\"large\" />\n+      </View>\n+    );\n   }\n \n-  navigation.navigate('CreateMeal', {\n-    userId,\n-    addMeal: handleAddMeal,\n-  });\n-  };\n-\n   return (\n     <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+      <Text style={styles.header}>üìù Meals You Created</Text>\n+      <FlatList\n+        data={myCreatedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        renderItem={({ item }) => (\n+          <View style={styles.card}>\n+            <Pressable\n+              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            >\n+              <Text style={styles.cardTitle}>{item.title}</Text>\n+              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n+            </Pressable>\n+            <Pressable\n+              onPress={() => handleDeleteMeal(item.id)}\n+              style={{ marginTop: 8 }}\n+            >\n+              <Text style={{ color: 'red' }}>Delete</Text>\n+            </Pressable>\n+          </View>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={{ textAlign: 'center', marginTop: 12 }}>\n+            You haven‚Äôt created any meals yet.\n+          </Text>\n+        }\n+      />\n \n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => (\n-        <View style={styles.card}>\n-          <Text style={styles.title}>{item.title}</Text>\n-          <Text>üìç {item.location}</Text>\n-          <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-          <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-          <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n-\n+      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n+      <FlatList\n+        data={joinedMeals}\n+        keyExtractor={(item, index) => item.id ?? index.toString()}\n+        refreshControl={\n+          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n+        }\n+        renderItem={({ item }) => (\n           <Pressable\n-            style={styles.button}\n-            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id })}\n+            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n+            style={styles.card}\n           >\n-            <Text style={styles.buttonText}>Join</Text>\n+            <Text style={styles.cardTitle}>{item.title}</Text>\n+            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n           </Pressable>\n-        </View>\n-      )}\n-      ListEmptyComponent={\n-        <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-          No meal events found near you.\n-        </Text>\n-      }\n-    />\n-      )}\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n+        )}\n+        ListEmptyComponent={\n+          <Text style={{ textAlign: 'center', marginTop: 12 }}>\n+            You haven't joined any meals yet.\n+          </Text>\n+        }\n+      />\n     </View>\n   );\n }\n \n const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n+  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n   card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n     borderWidth: 1,\n     borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n+    padding: 16,\n     borderRadius: 8,\n-    alignItems: 'center',\n+    marginBottom: 12,\n+    backgroundColor: '#f9f9f9',\n   },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n+  cardTitle: { fontSize: 16, fontWeight: '600' },\n+  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n });\n"
                },
                {
                    "date": 1749536535584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue } from 'firebase/database';\n+import { db, auth } from '../firebase';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const mealArray = Object.values(data) as Meal[];\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    const userId = auth.currentUser?.uid;\n+    if (!userId) {\n+    Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+    return;\n+  }\n+\n+  navigation.navigate('CreateMeal', {\n+    userId,\n+    addMeal: handleAddMeal,\n+  });\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => (\n+        <View style={styles.card}>\n+          <Text style={styles.title}>{item.title}</Text>\n+          <Text>üìç {item.location}</Text>\n+          <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+          <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+          <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+\n+          <Pressable\n+            style={styles.button}\n+            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id, mealTitle: item.title, })}\n+          >\n+            <Text style={styles.buttonText}>Join</Text>\n+          </Pressable>\n+        </View>\n+      )}\n+      ListEmptyComponent={\n+        <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+          No meal events found near you.\n+        </Text>\n+      }\n+    />\n+      )}\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749536778207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n   const navigation = useNavigation<NavigationProp>();\n   const [meals, setMeals] = useState<Meal[]>([]);\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n \n   const fetchMeals = () => {\n     const mealRef = ref(db, 'meals');\n     onValue(mealRef, (snapshot) => {\n@@ -51,18 +52,17 @@\n     setMeals((prev) => [...prev, newMeal]);\n   };\n \n   const handleCreateMeal = () => {\n-    const userId = auth.currentUser?.uid;\n     if (!userId) {\n-    Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-    return;\n-  }\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n \n-  navigation.navigate('CreateMeal', {\n-    userId,\n-    addMeal: handleAddMeal,\n-  });\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n   };\n \n   return (\n     <View style={styles.container}>\n@@ -74,31 +74,45 @@\n         <FlatList\n           data={meals}\n           keyExtractor={(item) => item.id}\n           refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => (\n-        <View style={styles.card}>\n-          <Text style={styles.title}>{item.title}</Text>\n-          <Text>üìç {item.location}</Text>\n-          <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-          <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-          <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+          renderItem={({ item }) => {\n+            const isCreatedByUser = item.creatorId === userId;\n \n-          <Pressable\n-            style={styles.button}\n-            onPress={() => navigation.navigate('ChatRoom', { mealId: item.id, mealTitle: item.title, })}\n-          >\n-            <Text style={styles.buttonText}>Join</Text>\n-          </Pressable>\n-        </View>\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByUser ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={styles.button}\n+                    onPress={() =>\n+                      navigation.navigate('ChatRoom', {\n+                        mealId: item.id,\n+                        mealTitle: item.title,\n+                      })\n+                    }\n+                  >\n+                    <Text style={styles.buttonText}>Join</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No meal events found near you.\n+            </Text>\n+          }\n+        />\n       )}\n-      ListEmptyComponent={\n-        <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-          No meal events found near you.\n-        </Text>\n-      }\n-    />\n-      )}\n+\n       <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n         <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n       </Pressable>\n     </View>\n@@ -116,8 +130,13 @@\n     borderWidth: 1,\n     borderColor: '#ddd',\n   },\n   title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n+  },\n   button: {\n     marginTop: 10,\n     backgroundColor: '#007aff',\n     paddingVertical: 8,\n@@ -137,179 +156,4 @@\n     fontSize: 16,\n     fontWeight: '600',\n   },\n });\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  RefreshControl,\n-  ActivityIndicator,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, get, remove } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import type { RootStackParamList, Meal } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MyMeals'>;\n-\n-export default function MyMealsScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [joinedMeals, setJoinedMeals] = useState<Meal[]>([]);\n-  const [myCreatedMeals, setMyCreatedMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-\n-  const fetchMeals = async () => {\n-    try {\n-      const snapshot = await get(ref(db, 'meals'));\n-      const data = snapshot.val();\n-\n-      if (!data) {\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n-      }\n-\n-      const userId = auth.currentUser?.uid;\n-      if (!userId) {\n-        console.error('‚ùå No user is logged in');\n-        setJoinedMeals([]);\n-        setMyCreatedMeals([]);\n-        return;\n-      }\n-\n-      // Á¢∫‰øùÊØèÂÄã meal ÈÉΩÂ∏∂‰∏ä id\n-      const mealsArray = Object.entries(data).map(([id, meal]) => ({\n-        ...(meal as Meal),\n-        id,\n-      }));\n-\n-      const myJoinedMeals = mealsArray.filter((meal) =>\n-        meal.joinedIds?.includes(userId)\n-      );\n-\n-      const myMeals = mealsArray.filter((meal) =>\n-        meal.creatorId === userId\n-      );\n-\n-      setJoinedMeals(myJoinedMeals);\n-      setMyCreatedMeals(myMeals);\n-    } catch (err) {\n-      console.error('üî• Failed to fetch meals:', err);\n-      Alert.alert('Error', 'Failed to load your meals.');\n-    } finally {\n-      setLoading(false);\n-      setRefreshing(false);\n-    }\n-  };\n-\n-  const handleDeleteMeal = async (mealId: string) => {\n-    Alert.alert('Confirm Delete', 'Are you sure you want to delete this meal?', [\n-      { text: 'Cancel', style: 'cancel' },\n-      {\n-        text: 'Delete',\n-        style: 'destructive',\n-        onPress: async () => {\n-          try {\n-            await remove(ref(db, `meals/${mealId}`));\n-            fetchMeals(); // refresh list\n-          } catch (error) {\n-            console.error('üî• Failed to delete meal:', error);\n-            Alert.alert('Error', 'Failed to delete meal.');\n-          }\n-        },\n-      },\n-    ]);\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  if (loading) {\n-    return (\n-      <View style={styles.center}>\n-        <ActivityIndicator size=\"large\" />\n-      </View>\n-    );\n-  }\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üìù Meals You Created</Text>\n-      <FlatList\n-        data={myCreatedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        renderItem={({ item }) => (\n-          <View style={styles.card}>\n-            <Pressable\n-              onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            >\n-              <Text style={styles.cardTitle}>{item.title}</Text>\n-              <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-            </Pressable>\n-            <Pressable\n-              onPress={() => handleDeleteMeal(item.id)}\n-              style={{ marginTop: 8 }}\n-            >\n-              <Text style={{ color: 'red' }}>Delete</Text>\n-            </Pressable>\n-          </View>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={{ textAlign: 'center', marginTop: 12 }}>\n-            You haven‚Äôt created any meals yet.\n-          </Text>\n-        }\n-      />\n-\n-      <Text style={styles.header}>üçΩ Meals You Joined</Text>\n-      <FlatList\n-        data={joinedMeals}\n-        keyExtractor={(item, index) => item.id ?? index.toString()}\n-        refreshControl={\n-          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n-        }\n-        renderItem={({ item }) => (\n-          <Pressable\n-            onPress={() => navigation.navigate('EditMeal', { meal: item })}\n-            style={styles.card}\n-          >\n-            <Text style={styles.cardTitle}>{item.title}</Text>\n-            <Text>{item.location} ‚Ä¢ {item.time}</Text>\n-          </Pressable>\n-        )}\n-        ListEmptyComponent={\n-          <Text style={{ textAlign: 'center', marginTop: 12 }}>\n-            You haven't joined any meals yet.\n-          </Text>\n-        }\n-      />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n-  header: { fontSize: 20, fontWeight: 'bold', marginVertical: 12 },\n-  card: {\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-    padding: 16,\n-    borderRadius: 8,\n-    marginBottom: 12,\n-    backgroundColor: '#f9f9f9',\n-  },\n-  cardTitle: { fontSize: 16, fontWeight: '600' },\n-  center: { flex: 1, justifyContent: 'center', alignItems: 'center' },\n-});\n"
                },
                {
                    "date": 1749537444575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue } from 'firebase/database';\n+import { db, auth } from '../firebase';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const mealArray = Object.values(data) as Meal[];\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => {\n+            const isCreatedByUser = item.creatorId === userId;\n+\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByUser ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={styles.button}\n+                    onPress={() =>\n+                      navigation.navigate('ChatRoom', {\n+                        mealId: item.id,\n+                        mealTitle: item.title,\n+                      })\n+                    }\n+                  >\n+                    <Text style={styles.buttonText}>Join</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No meal events found near you.\n+            </Text>\n+          }\n+        />\n+      )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n+  },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749586027898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,167 +63,44 @@\n       addMeal: handleAddMeal,\n     });\n   };\n \n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+  const handleJoin = async (meal: Meal) => {\n+  if (!userId) {\n+    Alert.alert('Login Required', 'You must be logged in to join a meal.');\n+    return;\n+  }\n \n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => {\n-            const isCreatedByUser = item.creatorId === userId;\n+  const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n \n-            return (\n-              <View style={styles.card}>\n-                <Text style={styles.title}>{item.title}</Text>\n-                <Text>üìç {item.location}</Text>\n-                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n-\n-                {isCreatedByUser ? (\n-                  <Text style={styles.creatorNote}>You created this meal.</Text>\n-                ) : (\n-                  <Pressable\n-                    style={styles.button}\n-                    onPress={() =>\n-                      navigation.navigate('ChatRoom', {\n-                        mealId: item.id,\n-                        mealTitle: item.title,\n-                      })\n-                    }\n-                  >\n-                    <Text style={styles.buttonText}>Join</Text>\n-                  </Pressable>\n-                )}\n-              </View>\n-            );\n-          }}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No meal events found near you.\n-            </Text>\n-          }\n-        />\n-      )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  creatorNote: {\n-    marginTop: 10,\n-    color: 'gray',\n-    fontStyle: 'italic',\n-  },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  RefreshControl,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n-\n-export default function MealListScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-  const userId = auth.currentUser?.uid;\n-\n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (data) {\n-        const mealArray = Object.values(data) as Meal[];\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n-      }\n-      setLoading(false);\n-      setRefreshing(false);\n+  if (joined.includes(userId)) {\n+    // Already joined, just navigate to chat\n+    navigation.navigate('ChatRoom', {\n+      mealId: meal.id,\n+      mealTitle: meal.title,\n     });\n-  };\n+    return;\n+  }\n \n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n+    const updatedJoinedIds = [...joined, userId];\n \n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n+    try {\n+      await update(ref(db, `meals/${meal.id}`), {\n+        joinedIds: updatedJoinedIds,\n+      });\n \n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n+      Alert.alert('Success', 'You joined the meal!');\n+      navigation.navigate('ChatRoom', {\n+        mealId: meal.id,\n+        mealTitle: meal.title,\n+      });\n+    } catch (err) {\n+      console.error('üî• Failed to join meal:', err);\n+      Alert.alert('Error', 'Failed to join the meal.');\n+    }\n   };\n \n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n \n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n   return (\n     <View style={styles.container}>\n       <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n \n@@ -273,8 +150,16 @@\n \n       <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n         <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n       </Pressable>\n+\n+      <Pressable\n+        style={styles.button}\n+        onPress={() => handleJoin(item)} // üëà ‰ΩøÁî® handleJoin\n+      >\n+        <Text style={styles.buttonText}>Join</Text>\n+      </Pressable>\n+\n     </View>\n   );\n }\n \n"
                },
                {
                    "date": 1749586091108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue } from 'firebase/database';\n+import { ref, onValue, update } from 'firebase/database';\n import { db, auth } from '../firebase';\n import type { Meal, RootStackParamList } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n"
                },
                {
                    "date": 1749586367759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue, update } from 'firebase/database'; // ‚¨Ö Âä†ÂÖ• update\n+import { db, auth } from '../firebase';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        // Á¢∫‰øùÊØèÁ≠Ü meal ÂåÖÂê´ id Ê¨Ñ‰Ωç\n+        const mealArray = Object.entries(data).map(([id, value]) => ({\n+          ...(value as Meal),\n+          id,\n+        }));\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n+  // ‚úÖ Ê†∏ÂøÉÈÇèËºØÔºöÊåâ‰∏ã Join ÊôÇÂØ´ÂÖ• joinedIds\n+  const handleJoin = async (meal: Meal) => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to join a meal.');\n+      return;\n+    }\n+\n+    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n+\n+    if (joined.includes(userId)) {\n+      // Â∑≤Á∂ìÂä†ÂÖ•ÔºöÁõ¥Êé•Ë∑≥ËΩâ\n+      navigation.navigate('ChatRoom', {\n+        mealId: meal.id,\n+        mealTitle: meal.title,\n+      });\n+      return;\n+    }\n+\n+    const updatedJoinedIds = [...joined, userId];\n+\n+    try {\n+      await update(ref(db, `meals/${meal.id}`), {\n+        joinedIds: updatedJoinedIds,\n+      });\n+\n+      Alert.alert('Success', 'You joined the meal!');\n+      navigation.navigate('ChatRoom', {\n+        mealId: meal.id,\n+        mealTitle: meal.title,\n+      });\n+    } catch (err) {\n+      console.error('üî• Failed to join meal:', err);\n+      Alert.alert('Error', 'Failed to join the meal.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => {\n+            const isCreatedByUser = item.creatorId === userId;\n+\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByUser ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={styles.button}\n+                    onPress={() => handleJoin(item)}\n+                  >\n+                    <Text style={styles.buttonText}>Join</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No meal events found near you.\n+            </Text>\n+          }\n+        />\n+      )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n+  },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749586551882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database'; // ‚¨Ö Âä†ÂÖ• update\n+import { ref, onValue, update } from 'firebase/database';\n import { db, auth } from '../firebase';\n import type { Meal, RootStackParamList } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n@@ -28,13 +28,19 @@\n     const mealRef = ref(db, 'meals');\n     onValue(mealRef, (snapshot) => {\n       const data = snapshot.val();\n       if (data) {\n-        // Á¢∫‰øùÊØèÁ≠Ü meal ÂåÖÂê´ id Ê¨Ñ‰Ωç\n-        const mealArray = Object.entries(data).map(([id, value]) => ({\n-          ...(value as Meal),\n-          id,\n-        }));\n+        const now = new Date();\n+        const mealArray = Object.entries(data)\n+          .map(([id, value]) => ({\n+            ...(value as Meal),\n+            id,\n+          }))\n+          .filter((meal) => {\n+            if (!meal.date) return true;\n+            const mealDate = new Date(meal.date);\n+            return mealDate >= now;\n+          });\n         setMeals(mealArray);\n       } else {\n         setMeals([]);\n       }\n@@ -67,41 +73,44 @@\n       addMeal: handleAddMeal,\n     });\n   };\n \n-  // ‚úÖ Ê†∏ÂøÉÈÇèËºØÔºöÊåâ‰∏ã Join ÊôÇÂØ´ÂÖ• joinedIds\n-  const handleJoin = async (meal: Meal) => {\n+  const handleJoinOrLeave = async (meal: Meal) => {\n     if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to join a meal.');\n+      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n       return;\n     }\n \n     const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n+    const alreadyJoined = joined.includes(userId);\n+    const maxReached = meal.max && joined.length >= Number(meal.max);\n \n-    if (joined.includes(userId)) {\n-      // Â∑≤Á∂ìÂä†ÂÖ•ÔºöÁõ¥Êé•Ë∑≥ËΩâ\n-      navigation.navigate('ChatRoom', {\n-        mealId: meal.id,\n-        mealTitle: meal.title,\n-      });\n+    if (!alreadyJoined && maxReached) {\n+      Alert.alert('Full', 'This meal has reached the maximum number of participants.');\n       return;\n     }\n \n-    const updatedJoinedIds = [...joined, userId];\n+    const updatedJoinedIds = alreadyJoined\n+      ? joined.filter((id) => id !== userId) // Leave\n+      : [...joined, userId]; // Join\n \n     try {\n       await update(ref(db, `meals/${meal.id}`), {\n         joinedIds: updatedJoinedIds,\n       });\n \n-      Alert.alert('Success', 'You joined the meal!');\n+      Alert.alert(\n+        alreadyJoined ? 'Left meal' : 'Joined meal',\n+        alreadyJoined ? 'You have left the meal.' : 'You joined the meal!'\n+      );\n+\n       navigation.navigate('ChatRoom', {\n         mealId: meal.id,\n         mealTitle: meal.title,\n       });\n     } catch (err) {\n-      console.error('üî• Failed to join meal:', err);\n-      Alert.alert('Error', 'Failed to join the meal.');\n+      console.error('üî• Failed to join/leave meal:', err);\n+      Alert.alert('Error', 'Action failed. Please try again.');\n     }\n   };\n \n   return (\n@@ -116,33 +125,43 @@\n           keyExtractor={(item) => item.id}\n           refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n           renderItem={({ item }) => {\n             const isCreatedByUser = item.creatorId === userId;\n+            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n+            const hasJoined = joinedIds.includes(userId);\n+            const isFull = item.max && joinedIds.length >= Number(item.max);\n \n             return (\n               <View style={styles.card}>\n                 <Text style={styles.title}>{item.title}</Text>\n                 <Text>üìç {item.location}</Text>\n                 <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n                 <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n+                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n \n                 {isCreatedByUser ? (\n                   <Text style={styles.creatorNote}>You created this meal.</Text>\n                 ) : (\n                   <Pressable\n-                    style={styles.button}\n-                    onPress={() => handleJoin(item)}\n+                    style={[\n+                      styles.button,\n+                      hasJoined ? styles.leaveButton : null,\n+                      isFull && !hasJoined ? { backgroundColor: '#ccc' } : null,\n+                    ]}\n+                    onPress={() => handleJoinOrLeave(item)}\n+                    disabled={isFull && !hasJoined}\n                   >\n-                    <Text style={styles.buttonText}>Join</Text>\n+                    <Text style={styles.buttonText}>\n+                      {hasJoined ? 'Leave' : isFull ? 'Full' : 'Join'}\n+                    </Text>\n                   </Pressable>\n                 )}\n               </View>\n             );\n           }}\n           ListEmptyComponent={\n             <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No meal events found near you.\n+              No upcoming meal events found.\n             </Text>\n           }\n         />\n       )}\n@@ -177,211 +196,11 @@\n     paddingVertical: 8,\n     borderRadius: 8,\n     alignItems: 'center',\n   },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n+  leaveButton: {\n+    backgroundColor: '#ff3b30',\n   },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  RefreshControl,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n-\n-export default function MealListScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-  const userId = auth.currentUser?.uid;\n-\n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (data) {\n-        const mealArray = Object.values(data) as Meal[];\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n-      }\n-      setLoading(false);\n-      setRefreshing(false);\n-    });\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n-\n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n-  const handleJoin = async (meal: Meal) => {\n-  if (!userId) {\n-    Alert.alert('Login Required', 'You must be logged in to join a meal.');\n-    return;\n-  }\n-\n-  const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n-\n-  if (joined.includes(userId)) {\n-    // Already joined, just navigate to chat\n-    navigation.navigate('ChatRoom', {\n-      mealId: meal.id,\n-      mealTitle: meal.title,\n-    });\n-    return;\n-  }\n-\n-    const updatedJoinedIds = [...joined, userId];\n-\n-    try {\n-      await update(ref(db, `meals/${meal.id}`), {\n-        joinedIds: updatedJoinedIds,\n-      });\n-\n-      Alert.alert('Success', 'You joined the meal!');\n-      navigation.navigate('ChatRoom', {\n-        mealId: meal.id,\n-        mealTitle: meal.title,\n-      });\n-    } catch (err) {\n-      console.error('üî• Failed to join meal:', err);\n-      Alert.alert('Error', 'Failed to join the meal.');\n-    }\n-  };\n-\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n-\n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => {\n-            const isCreatedByUser = item.creatorId === userId;\n-\n-            return (\n-              <View style={styles.card}>\n-                <Text style={styles.title}>{item.title}</Text>\n-                <Text>üìç {item.location}</Text>\n-                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {item.people || 0} / {item.max || 'N/A'} joined</Text>\n-\n-                {isCreatedByUser ? (\n-                  <Text style={styles.creatorNote}>You created this meal.</Text>\n-                ) : (\n-                  <Pressable\n-                    style={styles.button}\n-                    onPress={() =>\n-                      navigation.navigate('ChatRoom', {\n-                        mealId: item.id,\n-                        mealTitle: item.title,\n-                      })\n-                    }\n-                  >\n-                    <Text style={styles.buttonText}>Join</Text>\n-                  </Pressable>\n-                )}\n-              </View>\n-            );\n-          }}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No meal events found near you.\n-            </Text>\n-          }\n-        />\n-      )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n-\n-      <Pressable\n-        style={styles.button}\n-        onPress={() => handleJoin(item)} // üëà ‰ΩøÁî® handleJoin\n-      >\n-        <Text style={styles.buttonText}>Join</Text>\n-      </Pressable>\n-\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  creatorNote: {\n-    marginTop: 10,\n-    color: 'gray',\n-    fontStyle: 'italic',\n-  },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n   buttonText: { color: '#fff', fontWeight: '600' },\n   createButton: {\n     marginTop: 12,\n     backgroundColor: '#ff7f50',\n"
                },
                {
                    "date": 1749586743253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,11 @@\n           refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n           renderItem={({ item }) => {\n             const isCreatedByUser = item.creatorId === userId;\n             const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n-            const hasJoined = joinedIds.includes(userId);\n+            const hasJoined = !!userId && joinedIds.includes(userId);\n             const isFull = item.max && joinedIds.length >= Number(item.max);\n+            const isJoinDisabled = !!(isFull && !hasJoined);\n \n             return (\n               <View style={styles.card}>\n                 <Text style={styles.title}>{item.title}</Text>\n@@ -141,21 +142,16 @@\n                 {isCreatedByUser ? (\n                   <Text style={styles.creatorNote}>You created this meal.</Text>\n                 ) : (\n                   <Pressable\n-                    style={[\n-                      styles.button,\n-                      hasJoined ? styles.leaveButton : null,\n-                      isFull && !hasJoined ? { backgroundColor: '#ccc' } : null,\n-                    ]}\n-                    onPress={() => handleJoinOrLeave(item)}\n-                    disabled={isFull && !hasJoined}\n-                  >\n-                    <Text style={styles.buttonText}>\n-                      {hasJoined ? 'Leave' : isFull ? 'Full' : 'Join'}\n-                    </Text>\n-                  </Pressable>\n-                )}\n+                  style={[\n+                    styles.button,\n+                    hasJoined ? styles.leaveButton : null,\n+                    isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n+                  ]}\n+                  onPress={() => handleJoinOrLeave(item)}\n+                  disabled={isJoinDisabled}\n+                /> )}\n               </View>\n             );\n           }}\n           ListEmptyComponent={\n"
                },
                {
                    "date": 1749586778267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,41 +119,41 @@\n \n       {loading ? (\n         <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n       ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => {\n-            const isCreatedByUser = item.creatorId === userId;\n-            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n-            const hasJoined = !!userId && joinedIds.includes(userId);\n-            const isFull = item.max && joinedIds.length >= Number(item.max);\n-            const isJoinDisabled = !!(isFull && !hasJoined);\n+      <FlatList\n+        data={meals}\n+        keyExtractor={(item) => item.id}\n+        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+        renderItem={({ item }) => {\n+          const isCreatedByUser = item.creatorId === userId;\n+          const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n+          const hasJoined = !!userId && joinedIds.includes(userId);\n+          const isFull = item.max && joinedIds.length >= Number(item.max);\n+          const isJoinDisabled = !!(isFull && !hasJoined);\n \n-            return (\n-              <View style={styles.card}>\n-                <Text style={styles.title}>{item.title}</Text>\n-                <Text>üìç {item.location}</Text>\n-                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n+          return (\n+            <View style={styles.card}>\n+              <Text style={styles.title}>{item.title}</Text>\n+              <Text>üìç {item.location}</Text>\n+              <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+              <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+              <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n \n-                {isCreatedByUser ? (\n-                  <Text style={styles.creatorNote}>You created this meal.</Text>\n-                ) : (\n-                  <Pressable\n-                  style={[\n-                    styles.button,\n-                    hasJoined ? styles.leaveButton : null,\n-                    isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n-                  ]}\n-                  onPress={() => handleJoinOrLeave(item)}\n-                  disabled={isJoinDisabled}\n-                /> )}\n-              </View>\n-            );\n+              {isCreatedByUser ? (\n+                <Text style={styles.creatorNote}>You created this meal.</Text>\n+              ) : (\n+                <Pressable\n+                style={[\n+                  styles.button,\n+                  hasJoined ? styles.leaveButton : null,\n+                  isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n+                ]}\n+                onPress={() => handleJoinOrLeave(item)}\n+                disabled={isJoinDisabled}\n+              /> )}\n+            </View>\n+           );\n           }}\n           ListEmptyComponent={\n             <Text style={{ textAlign: 'center', marginTop: 24 }}>\n               No upcoming meal events found.\n"
                },
                {
                    "date": 1749589308405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue, update } from 'firebase/database';\n+import { db, auth } from '../firebase';\n+import Toast from 'react-native-root-toast';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n+\n+  const showToast = (message: string) => {\n+    Toast.show(message, {\n+      duration: Toast.durations.SHORT,\n+      position: Toast.positions.BOTTOM,\n+      shadow: true,\n+      animation: true,\n+      hideOnPress: true,\n+      delay: 0,\n+    });\n+  };\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const now = new Date();\n+        const mealArray = Object.entries(data)\n+          .map(([id, value]) => ({ ...(value as Meal), id }))\n+          .filter((meal) => {\n+            if (!meal.date) return true;\n+            const mealDate = new Date(meal.date);\n+            return mealDate >= now;\n+          });\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n+  const handleJoinOrLeave = async (meal: Meal) => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n+      return;\n+    }\n+\n+    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n+    const alreadyJoined = joined.includes(userId);\n+    const maxReached = meal.max && joined.length >= Number(meal.max);\n+\n+    if (!alreadyJoined && maxReached) {\n+      showToast('üö´ Meal is full!');\n+      return;\n+    }\n+\n+    const updatedJoinedIds = alreadyJoined\n+      ? joined.filter((id) => id !== userId)\n+      : [...joined, userId];\n+\n+    try {\n+      await update(ref(db, `meals/${meal.id}`), {\n+        joinedIds: updatedJoinedIds,\n+      });\n+\n+      showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n+\n+      setTimeout(() => {\n+        navigation.navigate('ChatRoom', {\n+          mealId: meal.id,\n+          mealTitle: meal.title,\n+        });\n+      }, 300);\n+    } catch (err) {\n+      console.error('üî• Failed to join/leave meal:', err);\n+      showToast('‚ö†Ô∏è Failed to update. Try again.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => {\n+            const isCreatedByUser = item.creatorId === userId;\n+            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n+            const hasJoined = !!userId && joinedIds.includes(userId);\n+            const isFull = item.max && joinedIds.length >= Number(item.max);\n+            const isJoinDisabled = !!(isFull && !hasJoined);\n+\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByUser ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={[\n+                      styles.button,\n+                      hasJoined ? styles.leaveButton : null,\n+                      isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n+                    ]}\n+                    onPress={() => handleJoinOrLeave(item)}\n+                    disabled={isJoinDisabled}\n+                  >\n+                    <Text style={styles.buttonText}>{hasJoined ? 'Leave' : 'Join'}</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No upcoming meal events found.\n+            </Text>\n+          }\n+        />\n+      )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n+  },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  leaveButton: {\n+    backgroundColor: '#ff3b30',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749589345760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,216 +219,4 @@\n     fontSize: 16,\n     fontWeight: '600',\n   },\n });\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  RefreshControl,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n-\n-export default function MealListScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-  const userId = auth.currentUser?.uid;\n-\n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (data) {\n-        const now = new Date();\n-        const mealArray = Object.entries(data)\n-          .map(([id, value]) => ({\n-            ...(value as Meal),\n-            id,\n-          }))\n-          .filter((meal) => {\n-            if (!meal.date) return true;\n-            const mealDate = new Date(meal.date);\n-            return mealDate >= now;\n-          });\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n-      }\n-      setLoading(false);\n-      setRefreshing(false);\n-    });\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n-\n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n-  const handleJoinOrLeave = async (meal: Meal) => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n-      return;\n-    }\n-\n-    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n-    const alreadyJoined = joined.includes(userId);\n-    const maxReached = meal.max && joined.length >= Number(meal.max);\n-\n-    if (!alreadyJoined && maxReached) {\n-      Alert.alert('Full', 'This meal has reached the maximum number of participants.');\n-      return;\n-    }\n-\n-    const updatedJoinedIds = alreadyJoined\n-      ? joined.filter((id) => id !== userId) // Leave\n-      : [...joined, userId]; // Join\n-\n-    try {\n-      await update(ref(db, `meals/${meal.id}`), {\n-        joinedIds: updatedJoinedIds,\n-      });\n-\n-      Alert.alert(\n-        alreadyJoined ? 'Left meal' : 'Joined meal',\n-        alreadyJoined ? 'You have left the meal.' : 'You joined the meal!'\n-      );\n-\n-      navigation.navigate('ChatRoom', {\n-        mealId: meal.id,\n-        mealTitle: meal.title,\n-      });\n-    } catch (err) {\n-      console.error('üî• Failed to join/leave meal:', err);\n-      Alert.alert('Error', 'Action failed. Please try again.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n-\n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-      <FlatList\n-        data={meals}\n-        keyExtractor={(item) => item.id}\n-        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-        renderItem={({ item }) => {\n-          const isCreatedByUser = item.creatorId === userId;\n-          const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n-          const hasJoined = !!userId && joinedIds.includes(userId);\n-          const isFull = item.max && joinedIds.length >= Number(item.max);\n-          const isJoinDisabled = !!(isFull && !hasJoined);\n-\n-          return (\n-            <View style={styles.card}>\n-              <Text style={styles.title}>{item.title}</Text>\n-              <Text>üìç {item.location}</Text>\n-              <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-              <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-              <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n-\n-              {isCreatedByUser ? (\n-                <Text style={styles.creatorNote}>You created this meal.</Text>\n-              ) : (\n-                <Pressable\n-                style={[\n-                  styles.button,\n-                  hasJoined ? styles.leaveButton : null,\n-                  isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n-                ]}\n-                onPress={() => handleJoinOrLeave(item)}\n-                disabled={isJoinDisabled}\n-              /> )}\n-            </View>\n-           );\n-          }}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No upcoming meal events found.\n-            </Text>\n-          }\n-        />\n-      )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  creatorNote: {\n-    marginTop: 10,\n-    color: 'gray',\n-    fontStyle: 'italic',\n-  },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  leaveButton: {\n-    backgroundColor: '#ff3b30',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n"
                },
                {
                    "date": 1749589533851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue, update } from 'firebase/database';\n+import { db, auth } from '../firebase';\n+import Toast from 'react-native-root-toast';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n+\n+  const showToast = (message: string) => {\n+    Toast.show(message, {\n+      duration: Toast.durations.SHORT,\n+      position: Toast.positions.BOTTOM,\n+      shadow: true,\n+      animation: true,\n+      hideOnPress: true,\n+      delay: 0,\n+    });\n+  };\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const now = new Date();\n+        const mealArray = Object.entries(data)\n+          .map(([id, value]) => ({ ...(value as Meal), id }))\n+          .filter((meal) => {\n+            if (!meal.date) return true;\n+            const mealDate = new Date(meal.date);\n+            return mealDate >= now;\n+          });\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const handleCreateMeal = () => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n+  const handleJoinOrLeave = async (meal: Meal) => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n+      return;\n+    }\n+\n+    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n+    const alreadyJoined = joined.includes(userId);\n+    const maxReached = meal.max && joined.length >= Number(meal.max);\n+\n+    if (!alreadyJoined && maxReached) {\n+      showToast('üö´ Meal is full!');\n+      return;\n+    }\n+\n+    const updatedJoinedIds = alreadyJoined\n+      ? joined.filter((id) => id !== userId)\n+      : [...joined, userId];\n+\n+    try {\n+      await update(ref(db, `meals/${meal.id}`), {\n+      joinedIds: updatedJoinedIds,\n+    });\n+\n+    showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n+\n+    if (!alreadyJoined) {\n+      setTimeout(() => {\n+        navigation.navigate('ChatRoom', {\n+          mealId: meal.id,\n+          mealTitle: meal.title,\n+        });\n+      }, 300);\n+    }\n+\n+    } catch (err) {\n+      console.error('üî• Failed to join/leave meal:', err);\n+      showToast('‚ö†Ô∏è Failed to update. Try again.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => {\n+            const isCreatedByUser = item.creatorId === userId;\n+            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n+            const hasJoined = !!userId && joinedIds.includes(userId);\n+            const isFull = item.max && joinedIds.length >= Number(item.max);\n+            const isJoinDisabled = !!(isFull && !hasJoined);\n+\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByUser ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={[\n+                      styles.button,\n+                      hasJoined ? styles.leaveButton : null,\n+                      isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n+                    ]}\n+                    onPress={() => handleJoinOrLeave(item)}\n+                    disabled={isJoinDisabled}\n+                  >\n+                    <Text style={styles.buttonText}>{hasJoined ? 'Leave' : 'Join'}</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No upcoming meal events found.\n+            </Text>\n+          }\n+        />\n+      )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n+  },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  leaveButton: {\n+    backgroundColor: '#ff3b30',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749589742935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,15 @@\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n import { ref, onValue, update } from 'firebase/database';\n+import Toast from 'react-native-root-toast';\n import { db, auth } from '../firebase';\n-import Toast from 'react-native-root-toast';\n import type { Meal, RootStackParamList } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n \n+\n+\n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n \n export default function MealListScreen() {\n   const navigation = useNavigation<NavigationProp>();\n@@ -24,27 +26,19 @@\n   const [loading, setLoading] = useState(true);\n   const [refreshing, setRefreshing] = useState(false);\n   const userId = auth.currentUser?.uid;\n \n-  const showToast = (message: string) => {\n-    Toast.show(message, {\n-      duration: Toast.durations.SHORT,\n-      position: Toast.positions.BOTTOM,\n-      shadow: true,\n-      animation: true,\n-      hideOnPress: true,\n-      delay: 0,\n-    });\n-  };\n-\n   const fetchMeals = () => {\n     const mealRef = ref(db, 'meals');\n     onValue(mealRef, (snapshot) => {\n       const data = snapshot.val();\n       if (data) {\n         const now = new Date();\n         const mealArray = Object.entries(data)\n-          .map(([id, value]) => ({ ...(value as Meal), id }))\n+          .map(([id, value]) => ({\n+            ...(value as Meal),\n+            id,\n+          }))\n           .filter((meal) => {\n             if (!meal.date) return true;\n             const mealDate = new Date(meal.date);\n             return mealDate >= now;\n@@ -70,233 +64,17 @@\n   const handleAddMeal = (newMeal: Meal) => {\n     setMeals((prev) => [...prev, newMeal]);\n   };\n \n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n-\n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n-  const handleJoinOrLeave = async (meal: Meal) => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n-      return;\n-    }\n-\n-    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n-    const alreadyJoined = joined.includes(userId);\n-    const maxReached = meal.max && joined.length >= Number(meal.max);\n-\n-    if (!alreadyJoined && maxReached) {\n-      showToast('üö´ Meal is full!');\n-      return;\n-    }\n-\n-    const updatedJoinedIds = alreadyJoined\n-      ? joined.filter((id) => id !== userId)\n-      : [...joined, userId];\n-\n-    try {\n-      await update(ref(db, `meals/${meal.id}`), {\n-      joinedIds: updatedJoinedIds,\n-    });\n-\n-    showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n-\n-    if (!alreadyJoined) {\n-      setTimeout(() => {\n-        navigation.navigate('ChatRoom', {\n-          mealId: meal.id,\n-          mealTitle: meal.title,\n-        });\n-      }, 300);\n-    }\n-\n-    } catch (err) {\n-      console.error('üî• Failed to join/leave meal:', err);\n-      showToast('‚ö†Ô∏è Failed to update. Try again.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => {\n-            const isCreatedByUser = item.creatorId === userId;\n-            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n-            const hasJoined = !!userId && joinedIds.includes(userId);\n-            const isFull = item.max && joinedIds.length >= Number(item.max);\n-            const isJoinDisabled = !!(isFull && !hasJoined);\n-\n-            return (\n-              <View style={styles.card}>\n-                <Text style={styles.title}>{item.title}</Text>\n-                <Text>üìç {item.location}</Text>\n-                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n-\n-                {isCreatedByUser ? (\n-                  <Text style={styles.creatorNote}>You created this meal.</Text>\n-                ) : (\n-                  <Pressable\n-                    style={[\n-                      styles.button,\n-                      hasJoined ? styles.leaveButton : null,\n-                      isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n-                    ]}\n-                    onPress={() => handleJoinOrLeave(item)}\n-                    disabled={isJoinDisabled}\n-                  >\n-                    <Text style={styles.buttonText}>{hasJoined ? 'Leave' : 'Join'}</Text>\n-                  </Pressable>\n-                )}\n-              </View>\n-            );\n-          }}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No upcoming meal events found.\n-            </Text>\n-          }\n-        />\n-      )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  creatorNote: {\n-    marginTop: 10,\n-    color: 'gray',\n-    fontStyle: 'italic',\n-  },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  leaveButton: {\n-    backgroundColor: '#ff3b30',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  RefreshControl,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database';\n-import { db, auth } from '../firebase';\n-import Toast from 'react-native-root-toast';\n-import type { Meal, RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n-\n-export default function MealListScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-  const userId = auth.currentUser?.uid;\n-\n   const showToast = (message: string) => {\n     Toast.show(message, {\n       duration: Toast.durations.SHORT,\n       position: Toast.positions.BOTTOM,\n-      shadow: true,\n-      animation: true,\n-      hideOnPress: true,\n-      delay: 0,\n+      backgroundColor: 'black',\n+      textColor: 'white',\n     });\n   };\n \n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (data) {\n-        const now = new Date();\n-        const mealArray = Object.entries(data)\n-          .map(([id, value]) => ({ ...(value as Meal), id }))\n-          .filter((meal) => {\n-            if (!meal.date) return true;\n-            const mealDate = new Date(meal.date);\n-            return mealDate >= now;\n-          });\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n-      }\n-      setLoading(false);\n-      setRefreshing(false);\n-    });\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n   const handleCreateMeal = () => {\n     if (!userId) {\n       Alert.alert('Login Required', 'You must be logged in to create a meal.');\n       return;\n@@ -318,38 +96,41 @@\n     const alreadyJoined = joined.includes(userId);\n     const maxReached = meal.max && joined.length >= Number(meal.max);\n \n     if (!alreadyJoined && maxReached) {\n-      showToast('üö´ Meal is full!');\n+      Alert.alert('Full', 'This meal has reached the maximum number of participants.');\n       return;\n     }\n \n     const updatedJoinedIds = alreadyJoined\n-      ? joined.filter((id) => id !== userId)\n-      : [...joined, userId];\n+      ? joined.filter((id) => id !== userId) // Leave\n+      : [...joined, userId]; // Join\n \n     try {\n       await update(ref(db, `meals/${meal.id}`), {\n         joinedIds: updatedJoinedIds,\n       });\n \n       showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n \n-      setTimeout(() => {\n-        navigation.navigate('ChatRoom', {\n-          mealId: meal.id,\n-          mealTitle: meal.title,\n-        });\n-      }, 300);\n+      if (!alreadyJoined) {\n+        setTimeout(() => {\n+          navigation.navigate('ChatRoom', {\n+            mealId: meal.id,\n+            mealTitle: meal.title,\n+          });\n+        }, 300);\n+      }\n     } catch (err) {\n       console.error('üî• Failed to join/leave meal:', err);\n-      showToast('‚ö†Ô∏è Failed to update. Try again.');\n+      Alert.alert('Error', 'Action failed. Please try again.');\n     }\n   };\n \n   return (\n     <View style={styles.container}>\n       <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+\n       {loading ? (\n         <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n       ) : (\n         <FlatList\n"
                },
                {
                    "date": 1749591097271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import {\n+  View,\n+  Text,\n+  FlatList,\n+  Pressable,\n+  StyleSheet,\n+  ActivityIndicator,\n+  RefreshControl,\n+  Alert,\n+} from 'react-native';\n+import { useEffect, useState, useCallback } from 'react';\n+import { useNavigation } from '@react-navigation/native';\n+import { ref, onValue, update } from 'firebase/database';\n+import Toast from 'react-native-root-toast';\n+import { db, auth } from '../firebase';\n+import type { Meal, RootStackParamList } from '../types';\n+import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { set } from 'firebase/database';\n+\n+\n+\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n+\n+export default function MealListScreen() {\n+  const navigation = useNavigation<NavigationProp>();\n+  const [meals, setMeals] = useState<Meal[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [refreshing, setRefreshing] = useState(false);\n+  const userId = auth.currentUser?.uid;\n+\n+  const fetchMeals = () => {\n+    const mealRef = ref(db, 'meals');\n+    onValue(mealRef, (snapshot) => {\n+      const data = snapshot.val();\n+      if (data) {\n+        const now = new Date();\n+        const mealArray = Object.entries(data)\n+          .map(([id, value]) => ({\n+            ...(value as Meal),\n+            id,\n+          }))\n+          .filter((meal) => {\n+            if (!meal.date) return true;\n+            const mealDate = new Date(meal.date);\n+            return mealDate >= now;\n+          });\n+        setMeals(mealArray);\n+      } else {\n+        setMeals([]);\n+      }\n+      setLoading(false);\n+      setRefreshing(false);\n+    });\n+  };\n+\n+  useEffect(() => {\n+    fetchMeals();\n+  }, []);\n+\n+  const onRefresh = useCallback(() => {\n+    setRefreshing(true);\n+    fetchMeals();\n+  }, []);\n+\n+  const handleAddMeal = (newMeal: Meal) => {\n+    setMeals((prev) => [...prev, newMeal]);\n+  };\n+\n+  const showToast = (message: string) => {\n+    Toast.show(message, {\n+      duration: Toast.durations.SHORT,\n+      position: Toast.positions.BOTTOM,\n+      backgroundColor: 'black',\n+      textColor: 'white',\n+    });\n+  };\n+\n+  const handleCreateMeal = () => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n+      return;\n+    }\n+\n+    navigation.navigate('CreateMeal', {\n+      userId,\n+      addMeal: handleAddMeal,\n+    });\n+  };\n+\n+  const handleJoinOrLeave = async (meal: Meal) => {\n+    if (!userId) {\n+      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n+      return;\n+    }\n+\n+    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n+    const alreadyJoined = joined.includes(userId);\n+    const maxReached = meal.max && joined.length >= Number(meal.max);\n+\n+    if (!alreadyJoined && maxReached) {\n+      Alert.alert('Full', 'This meal has reached the maximum number of participants.');\n+      return;\n+    }\n+\n+    const updatedJoinedIds = alreadyJoined\n+      ? joined.filter((id) => id !== userId) // Leave\n+      : [...joined, userId]; // Join\n+\n+    try {\n+      await set(ref(db, `meals/${meal.id}/joinedIds`), updatedJoinedIds);\n+\n+      showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n+\n+      if (!alreadyJoined) {\n+        setTimeout(() => {\n+          navigation.navigate('ChatRoom', {\n+            mealId: meal.id,\n+            mealTitle: meal.title,\n+          });\n+        }, 300);\n+      }\n+    } catch (err) {\n+      console.error('üî• Failed to join/leave meal:', err);\n+      Alert.alert('Error', 'Action failed. Please try again.');\n+    }\n+  };\n+\n+  return (\n+    <View style={styles.container}>\n+      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n+\n+      {loading ? (\n+        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n+      ) : (\n+        <FlatList\n+          data={meals}\n+          keyExtractor={(item) => item.id}\n+          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n+          renderItem={({ item }) => {\n+            const isCreatedByUser = item.creatorId === userId;\n+            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n+            const hasJoined = !!userId && joinedIds.includes(userId);\n+            const isFull = item.max && joinedIds.length >= Number(item.max);\n+            const isJoinDisabled = !!(isFull && !hasJoined);\n+\n+            return (\n+              <View style={styles.card}>\n+                <Text style={styles.title}>{item.title}</Text>\n+                <Text>üìç {item.location}</Text>\n+                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n+                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n+                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n+\n+                {isCreatedByUser ? (\n+                  <Text style={styles.creatorNote}>You created this meal.</Text>\n+                ) : (\n+                  <Pressable\n+                    style={[\n+                      styles.button,\n+                      hasJoined ? styles.leaveButton : null,\n+                      isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n+                    ]}\n+                    onPress={() => handleJoinOrLeave(item)}\n+                    disabled={isJoinDisabled}\n+                  >\n+                    <Text style={styles.buttonText}>{hasJoined ? 'Leave' : 'Join'}</Text>\n+                  </Pressable>\n+                )}\n+              </View>\n+            );\n+          }}\n+          ListEmptyComponent={\n+            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n+              No upcoming meal events found.\n+            </Text>\n+          }\n+        />\n+      )}\n+\n+      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n+        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n+      </Pressable>\n+    </View>\n+  );\n+}\n+\n+const styles = StyleSheet.create({\n+  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n+  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n+  card: {\n+    backgroundColor: '#f9f9f9',\n+    borderRadius: 10,\n+    padding: 16,\n+    marginBottom: 12,\n+    borderWidth: 1,\n+    borderColor: '#ddd',\n+  },\n+  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n+  creatorNote: {\n+    marginTop: 10,\n+    color: 'gray',\n+    fontStyle: 'italic',\n+  },\n+  button: {\n+    marginTop: 10,\n+    backgroundColor: '#007aff',\n+    paddingVertical: 8,\n+    borderRadius: 8,\n+    alignItems: 'center',\n+  },\n+  leaveButton: {\n+    backgroundColor: '#ff3b30',\n+  },\n+  buttonText: { color: '#fff', fontWeight: '600' },\n+  createButton: {\n+    marginTop: 12,\n+    backgroundColor: '#ff7f50',\n+    padding: 14,\n+    borderRadius: 10,\n+    alignItems: 'center',\n+  },\n+  createButtonText: {\n+    color: '#fff',\n+    fontSize: 16,\n+    fontWeight: '600',\n+  },\n+});\n"
                },
                {
                    "date": 1749591579041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,232 +224,4 @@\n     fontSize: 16,\n     fontWeight: '600',\n   },\n });\n-import {\n-  View,\n-  Text,\n-  FlatList,\n-  Pressable,\n-  StyleSheet,\n-  ActivityIndicator,\n-  RefreshControl,\n-  Alert,\n-} from 'react-native';\n-import { useEffect, useState, useCallback } from 'react';\n-import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database';\n-import Toast from 'react-native-root-toast';\n-import { db, auth } from '../firebase';\n-import type { Meal, RootStackParamList } from '../types';\n-import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-\n-\n-\n-type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n-\n-export default function MealListScreen() {\n-  const navigation = useNavigation<NavigationProp>();\n-  const [meals, setMeals] = useState<Meal[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [refreshing, setRefreshing] = useState(false);\n-  const userId = auth.currentUser?.uid;\n-\n-  const fetchMeals = () => {\n-    const mealRef = ref(db, 'meals');\n-    onValue(mealRef, (snapshot) => {\n-      const data = snapshot.val();\n-      if (data) {\n-        const now = new Date();\n-        const mealArray = Object.entries(data)\n-          .map(([id, value]) => ({\n-            ...(value as Meal),\n-            id,\n-          }))\n-          .filter((meal) => {\n-            if (!meal.date) return true;\n-            const mealDate = new Date(meal.date);\n-            return mealDate >= now;\n-          });\n-        setMeals(mealArray);\n-      } else {\n-        setMeals([]);\n-      }\n-      setLoading(false);\n-      setRefreshing(false);\n-    });\n-  };\n-\n-  useEffect(() => {\n-    fetchMeals();\n-  }, []);\n-\n-  const onRefresh = useCallback(() => {\n-    setRefreshing(true);\n-    fetchMeals();\n-  }, []);\n-\n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n-  const showToast = (message: string) => {\n-    Toast.show(message, {\n-      duration: Toast.durations.SHORT,\n-      position: Toast.positions.BOTTOM,\n-      backgroundColor: 'black',\n-      textColor: 'white',\n-    });\n-  };\n-\n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n-\n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n-  const handleJoinOrLeave = async (meal: Meal) => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to join or leave.');\n-      return;\n-    }\n-\n-    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n-    const alreadyJoined = joined.includes(userId);\n-    const maxReached = meal.max && joined.length >= Number(meal.max);\n-\n-    if (!alreadyJoined && maxReached) {\n-      Alert.alert('Full', 'This meal has reached the maximum number of participants.');\n-      return;\n-    }\n-\n-    const updatedJoinedIds = alreadyJoined\n-      ? joined.filter((id) => id !== userId) // Leave\n-      : [...joined, userId]; // Join\n-\n-    try {\n-      await update(ref(db, `meals/${meal.id}`), {\n-        joinedIds: updatedJoinedIds,\n-      });\n-\n-      showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n-\n-      if (!alreadyJoined) {\n-        setTimeout(() => {\n-          navigation.navigate('ChatRoom', {\n-            mealId: meal.id,\n-            mealTitle: meal.title,\n-          });\n-        }, 300);\n-      }\n-    } catch (err) {\n-      console.error('üî• Failed to join/leave meal:', err);\n-      Alert.alert('Error', 'Action failed. Please try again.');\n-    }\n-  };\n-\n-  return (\n-    <View style={styles.container}>\n-      <Text style={styles.header}>üçΩ Explore Meal Events</Text>\n-\n-      {loading ? (\n-        <ActivityIndicator size=\"large\" color=\"#007aff\" style={{ marginTop: 40 }} />\n-      ) : (\n-        <FlatList\n-          data={meals}\n-          keyExtractor={(item) => item.id}\n-          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n-          renderItem={({ item }) => {\n-            const isCreatedByUser = item.creatorId === userId;\n-            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n-            const hasJoined = !!userId && joinedIds.includes(userId);\n-            const isFull = item.max && joinedIds.length >= Number(item.max);\n-            const isJoinDisabled = !!(isFull && !hasJoined);\n-\n-            return (\n-              <View style={styles.card}>\n-                <Text style={styles.title}>{item.title}</Text>\n-                <Text>üìç {item.location}</Text>\n-                <Text>üìÖ {item.date || 'N/A'} ‚è∞ {item.time}</Text>\n-                <Text>üí∞ {item.budget} üçΩÔ∏è {item.cuisine}</Text>\n-                <Text>üë• {joinedIds.length} / {item.max || 'N/A'} joined</Text>\n-\n-                {isCreatedByUser ? (\n-                  <Text style={styles.creatorNote}>You created this meal.</Text>\n-                ) : (\n-                  <Pressable\n-                    style={[\n-                      styles.button,\n-                      hasJoined ? styles.leaveButton : null,\n-                      isJoinDisabled ? { backgroundColor: '#ccc' } : null,\n-                    ]}\n-                    onPress={() => handleJoinOrLeave(item)}\n-                    disabled={isJoinDisabled}\n-                  >\n-                    <Text style={styles.buttonText}>{hasJoined ? 'Leave' : 'Join'}</Text>\n-                  </Pressable>\n-                )}\n-              </View>\n-            );\n-          }}\n-          ListEmptyComponent={\n-            <Text style={{ textAlign: 'center', marginTop: 24 }}>\n-              No upcoming meal events found.\n-            </Text>\n-          }\n-        />\n-      )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n-  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 16 },\n-  card: {\n-    backgroundColor: '#f9f9f9',\n-    borderRadius: 10,\n-    padding: 16,\n-    marginBottom: 12,\n-    borderWidth: 1,\n-    borderColor: '#ddd',\n-  },\n-  title: { fontSize: 18, fontWeight: '600', marginBottom: 4 },\n-  creatorNote: {\n-    marginTop: 10,\n-    color: 'gray',\n-    fontStyle: 'italic',\n-  },\n-  button: {\n-    marginTop: 10,\n-    backgroundColor: '#007aff',\n-    paddingVertical: 8,\n-    borderRadius: 8,\n-    alignItems: 'center',\n-  },\n-  leaveButton: {\n-    backgroundColor: '#ff3b30',\n-  },\n-  buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n-});\n"
                },
                {
                    "date": 1749591909850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,14 @@\n   Alert,\n } from 'react-native';\n import { useEffect, useState, useCallback } from 'react';\n import { useNavigation } from '@react-navigation/native';\n-import { ref, onValue, update } from 'firebase/database';\n+import { ref, onValue, get, set } from 'firebase/database'; // ‚úÖ Áî® set Êõø‰ª£ update\n import Toast from 'react-native-root-toast';\n import { db, auth } from '../firebase';\n import type { Meal, RootStackParamList } from '../types';\n import type { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { set } from 'firebase/database';\n \n-\n-\n type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'MainTabs'>;\n \n export default function MealListScreen() {\n   const navigation = useNavigation<NavigationProp>();\n@@ -61,12 +58,8 @@\n     setRefreshing(true);\n     fetchMeals();\n   }, []);\n \n-  const handleAddMeal = (newMeal: Meal) => {\n-    setMeals((prev) => [...prev, newMeal]);\n-  };\n-\n   const showToast = (message: string) => {\n     Toast.show(message, {\n       duration: Toast.durations.SHORT,\n       position: Toast.positions.BOTTOM,\n@@ -74,27 +67,20 @@\n       textColor: 'white',\n     });\n   };\n \n-  const handleCreateMeal = () => {\n-    if (!userId) {\n-      Alert.alert('Login Required', 'You must be logged in to create a meal.');\n-      return;\n-    }\n-\n-    navigation.navigate('CreateMeal', {\n-      userId,\n-      addMeal: handleAddMeal,\n-    });\n-  };\n-\n   const handleJoinOrLeave = async (meal: Meal) => {\n     if (!userId) {\n       Alert.alert('Login Required', 'You must be logged in to join or leave.');\n       return;\n     }\n \n-    const joined = Array.isArray(meal.joinedIds) ? meal.joinedIds : [];\n+    const joined = Array.isArray(meal.joinedIds)\n+      ? meal.joinedIds\n+      : typeof meal.joinedIds === 'object' && meal.joinedIds !== null\n+        ? Object.values(meal.joinedIds)\n+        : [];\n+\n     const alreadyJoined = joined.includes(userId);\n     const maxReached = meal.max && joined.length >= Number(meal.max);\n \n     if (!alreadyJoined && maxReached) {\n@@ -106,8 +92,9 @@\n       ? joined.filter((id) => id !== userId) // Leave\n       : [...joined, userId]; // Join\n \n     try {\n+      // ‚úÖ ‰ΩøÁî® set Âº∑Âà∂Â≠òÁÇ∫Á¥îÈô£Âàó\n       await set(ref(db, `meals/${meal.id}/joinedIds`), updatedJoinedIds);\n \n       showToast(alreadyJoined ? 'üëã You left the meal.' : '‚úÖ You joined the meal!');\n \n@@ -137,9 +124,14 @@\n           keyExtractor={(item) => item.id}\n           refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n           renderItem={({ item }) => {\n             const isCreatedByUser = item.creatorId === userId;\n-            const joinedIds = Array.isArray(item.joinedIds) ? item.joinedIds : [];\n+            const joinedIds = Array.isArray(item.joinedIds)\n+              ? item.joinedIds\n+              : typeof item.joinedIds === 'object' && item.joinedIds !== null\n+                ? Object.values(item.joinedIds)\n+                : [];\n+\n             const hasJoined = !!userId && joinedIds.includes(userId);\n             const isFull = item.max && joinedIds.length >= Number(item.max);\n             const isJoinDisabled = !!(isFull && !hasJoined);\n \n@@ -175,12 +167,8 @@\n             </Text>\n           }\n         />\n       )}\n-\n-      <Pressable style={styles.createButton} onPress={handleCreateMeal}>\n-        <Text style={styles.createButtonText}>Ôºã Create Meal</Text>\n-      </Pressable>\n     </View>\n   );\n }\n \n@@ -211,17 +199,5 @@\n   leaveButton: {\n     backgroundColor: '#ff3b30',\n   },\n   buttonText: { color: '#fff', fontWeight: '600' },\n-  createButton: {\n-    marginTop: 12,\n-    backgroundColor: '#ff7f50',\n-    padding: 14,\n-    borderRadius: 10,\n-    alignItems: 'center',\n-  },\n-  createButtonText: {\n-    color: '#fff',\n-    fontSize: 16,\n-    fontWeight: '600',\n-  },\n });\n"
                }
            ],
            "date": 1748564425800,
            "name": "Commit-0",
            "content": "import { View, Text, StyleSheet, FlatList, Pressable } from \"react-native\";\nimport { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport type { Meal } from \"../types\";\n\n\ntype Meal = {\n  id: string;\n  title: string;\n  mealType: \"Meal Buddy\" | \"Open to More\";\n  location?: string;\n  time?: string;\n  budget?: string;\n  cuisine?: string;\n};\n\n\nexport default function MealListScreen() {\n  const [filter, setFilter] = useState<\"Meal Buddy\" | \"Open to More\">(\n    \"Meal Buddy\"\n  );\n\n  const [meals, setMeals] = useState([\n    // Initial dummy meal events\n    {\n      id: \"1\",\n      title: \"üç≤ Dollar Shop Hotpot @ Bellevue\",\n      mealType: \"Meal Buddy\",\n    },\n    {\n      id: \"2\",\n      title: \"üç£ Sushi Kashiba Dinner Meetup\",\n      mealType: \"Open to More\",\n    },\n    {\n      id: \"3\",\n      title: \"üçî Dick‚Äôs Drive-In Burger Night\",\n      mealType: \"Meal Buddy\",\n    },\n    {\n      id: \"4\",\n      title: \"ü•ü Din Tai Fung Xiao Long Bao Gathering\",\n      mealType: \"Open to More\",\n    },\n    { id: \"5\", title: \"üçú Ramen Danbo Lunch\", mealType: \"Meal Buddy\" },\n    {\n      id: \"6\",\n      title: \"üåÆ Tacos Chukis Capitol Hill\",\n      mealType: \"Open to More\",\n    },\n  ]);\n  const navigation = useNavigation();\n  const filteredMeals = meals.filter((meal) => meal.mealType === filter);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>üçΩÔ∏è Explore Meal Events</Text>\n\n      {/* Toggle filter */}\n      <View style={styles.toggleContainer}>\n        <Pressable\n          style={[\n            styles.toggleButton,\n            filter === \"Meal Buddy\" && styles.activeToggle,\n          ]}\n          onPress={() => setFilter(\"Meal Buddy\")}\n        >\n          <Text>üçú Meal Buddy</Text>\n        </Pressable>\n        <Pressable\n          style={[\n            styles.toggleButton,\n            filter === \"Open to More\" && styles.activeToggle,\n          ]}\n          onPress={() => setFilter(\"Open to More\")}\n        >\n          <Text>‚ù§Ô∏è Open to More</Text>\n        </Pressable>\n      </View>\n\n      {/* Filtered list */}\n      <FlatList\n        data={filteredMeals}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }: { item: Meal }) => (\n          <View style={styles.mealCard}>\n            <Text style={styles.mealTitle}>{item.title}</Text>\n            {item.location && <Text>üìç {item.location}</Text>}\n            {item.time && <Text>‚è∞ {item.time}</Text>}\n            {item.budget && <Text>üí∞ {item.budget}</Text>}\n            {item.cuisine && <Text>üçΩÔ∏è {item.cuisine}</Text>}\n          </View>\n      )}\n    />\n\n\n      {/* Add meal event */}\n      <Pressable\n        style={styles.button}\n        onPress={() => {\n          // Pass meal-adding function to CreateMeal screen\n          // @ts-ignore\n          navigation.navigate(\"CreateMeal\", {\n            addMeal: (newMeal: Meal) => setMeals((prev) => [...prev, newMeal]),\n          });\n        }}\n      >\n        <Text style={styles.buttonText}>Ôºã Create Meal Event</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    paddingTop: 40,\n    backgroundColor: \"#fff\",\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 16,\n  },\n  toggleContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginBottom: 16,\n    gap: 10,\n  },\n  toggleButton: {\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#ccc\",\n    borderRadius: 8,\n  },\n  activeToggle: {\n    backgroundColor: \"#e0e0e0\",\n  },\n  mealCard: {\n    backgroundColor: \"#f0f0f0\",\n    padding: 16,\n    borderRadius: 10,\n    marginBottom: 12,\n  },\n  mealTitle: {\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  button: {\n    backgroundColor: \"#ff7f50\",\n    padding: 12,\n    borderRadius: 10,\n    alignItems: \"center\",\n    marginTop: 16,\n  },\n  buttonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n});\n"
        }
    ]
}